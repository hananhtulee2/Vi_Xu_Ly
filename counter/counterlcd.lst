CCS PCM C Compiler, Version 5.109, 43599               18-Apr-23 16:19

               Filename:   E:\PIC 16F887\Code\counterlcd.lst

               ROM used:   463 words (6%)
                           Largest free fragment is 2048
               RAM used:   7 (2%) at main() level
                           21 (6%) worst case
               Stack used: 4 locations
               Stack size: 8

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   192
0003:  NOP
.................... #include <16F887.h>
.................... //////////// Standard Header file for the PIC16F887 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F887
0004:  DATA C3,37
0005:  DATA 75,37
0006:  DATA F4,1E
0007:  DATA 25,18
0008:  DATA B3,3A
0009:  DATA 00,00
*
00ED:  MOVF   0B,W
00EE:  MOVWF  23
00EF:  BCF    0B.7
00F0:  BSF    03.5
00F1:  BSF    03.6
00F2:  BSF    0C.7
00F3:  BSF    0C.0
00F4:  NOP
00F5:  NOP
00F6:  BCF    03.5
00F7:  BCF    03.6
00F8:  BTFSC  23.7
00F9:  BSF    0B.7
00FA:  BTFSC  03.0
00FB:  GOTO   124
00FC:  BSF    03.6
00FD:  MOVF   0C,W
00FE:  ANDLW  7F
00FF:  BCF    03.6
0100:  MOVWF  23
0101:  BSF    03.6
0102:  MOVF   0D,W
0103:  BCF    03.6
0104:  MOVWF  24
0105:  BSF    03.6
0106:  MOVF   0F,W
0107:  BCF    03.6
0108:  MOVWF  25
0109:  MOVF   23,W
010A:  MOVWF  26
010B:  CALL   0C1
010C:  MOVF   24,W
010D:  BSF    03.6
010E:  MOVWF  0D
010F:  BCF    03.6
0110:  MOVF   25,W
0111:  BSF    03.6
0112:  MOVWF  0F
0113:  BCF    03.6
0114:  MOVF   0B,W
0115:  MOVWF  26
0116:  BCF    0B.7
0117:  BSF    03.5
0118:  BSF    03.6
0119:  BSF    0C.7
011A:  BSF    0C.0
011B:  NOP
011C:  NOP
011D:  BCF    03.5
011E:  BCF    03.6
011F:  BTFSC  26.7
0120:  BSF    0B.7
0121:  DECFSZ 22,F
0122:  GOTO   124
0123:  GOTO   143
0124:  BSF    03.6
0125:  RLF    0C,W
0126:  RLF    0E,W
0127:  ANDLW  7F
0128:  BCF    03.6
0129:  MOVWF  23
012A:  BSF    03.6
012B:  MOVF   0D,W
012C:  BCF    03.6
012D:  MOVWF  24
012E:  BSF    03.6
012F:  MOVF   0F,W
0130:  BCF    03.6
0131:  MOVWF  25
0132:  MOVF   23,W
0133:  MOVWF  26
0134:  CALL   0C1
0135:  MOVF   24,W
0136:  BSF    03.6
0137:  MOVWF  0D
0138:  BCF    03.6
0139:  MOVF   25,W
013A:  BSF    03.6
013B:  MOVWF  0F
013C:  INCF   0D,F
013D:  BTFSC  03.2
013E:  INCF   0F,F
013F:  BCF    03.0
0140:  BCF    03.6
0141:  DECFSZ 22,F
0142:  GOTO   0ED
0143:  BCF    0A.3
0144:  BCF    0A.4
0145:  GOTO   1C8 (RETURN)
0146:  MOVF   25,W
0147:  CLRF   78
0148:  SUBWF  24,W
0149:  BTFSC  03.0
014A:  GOTO   14E
014B:  MOVF   24,W
014C:  MOVWF  77
014D:  GOTO   15A
014E:  CLRF   77
014F:  MOVLW  08
0150:  MOVWF  26
0151:  RLF    24,F
0152:  RLF    77,F
0153:  MOVF   25,W
0154:  SUBWF  77,W
0155:  BTFSC  03.0
0156:  MOVWF  77
0157:  RLF    78,F
0158:  DECFSZ 26,F
0159:  GOTO   151
015A:  RETURN
015B:  MOVF   78,W
015C:  MOVF   22,W
015D:  MOVWF  24
015E:  MOVLW  64
015F:  MOVWF  25
0160:  CALL   146
0161:  MOVF   77,W
0162:  MOVWF  22
0163:  MOVF   78,W
0164:  MOVLW  30
0165:  BTFSS  03.2
0166:  GOTO   16E
0167:  BTFSS  23.1
0168:  GOTO   175
0169:  BTFSC  23.3
016A:  GOTO   175
016B:  BTFSC  23.4
016C:  MOVLW  20
016D:  GOTO   171
016E:  BCF    23.3
016F:  BCF    23.4
0170:  BSF    23.0
0171:  ADDWF  78,F
0172:  MOVF   78,W
0173:  MOVWF  26
0174:  CALL   0C1
0175:  MOVF   22,W
0176:  MOVWF  24
0177:  MOVLW  0A
0178:  MOVWF  25
0179:  CALL   146
017A:  MOVF   77,W
017B:  MOVWF  22
017C:  MOVF   78,W
017D:  MOVLW  30
017E:  BTFSS  03.2
017F:  GOTO   186
0180:  BTFSC  23.3
0181:  GOTO   18A
0182:  BTFSS  23.0
0183:  GOTO   18A
0184:  BTFSC  23.4
0185:  MOVLW  20
0186:  ADDWF  78,F
0187:  MOVF   78,W
0188:  MOVWF  26
0189:  CALL   0C1
018A:  MOVLW  30
018B:  ADDWF  22,F
018C:  MOVF   22,W
018D:  MOVWF  26
018E:  CALL   0C1
018F:  BCF    0A.3
0190:  BCF    0A.4
0191:  GOTO   1CD (RETURN)
.................... 
.................... #list
.................... 
.................... #fuses INTRC_IO
.................... #use delay(CLOCK=8MHz)
*
000A:  MOVLW  27
000B:  MOVWF  04
000C:  BCF    03.7
000D:  MOVF   00,W
000E:  BTFSC  03.2
000F:  GOTO   01D
0010:  MOVLW  02
0011:  MOVWF  78
0012:  CLRF   77
0013:  DECFSZ 77,F
0014:  GOTO   013
0015:  DECFSZ 78,F
0016:  GOTO   012
0017:  MOVLW  97
0018:  MOVWF  77
0019:  DECFSZ 77,F
001A:  GOTO   019
001B:  DECFSZ 00,F
001C:  GOTO   010
001D:  RETURN
.................... #include <lcd.c>
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////                             LCD.C                                     ////
.................... ////                 Driver for common LCD modules                         ////
.................... ////                                                                       ////
.................... ////  lcd_init()   Must be called before any other function.               ////
.................... ////                                                                       ////
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         ////
.................... ////                 \a  Set cursor position to upper left                 ////
.................... ////                 \f  Clear display, set cursor to upper left           ////
.................... ////                 \n  Go to start of second line                        ////
.................... ////                 \b  Move back one position                            ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     ////
.................... ////              will erase all remanining characters on the current      ////
.................... ////              line, and move the cursor to the beginning of the next   ////
.................... ////              line.                                                    ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     ////
.................... ////              will move the cursor to the start of the current         ////
.................... ////              line.                                                    ////
.................... ////                                                                       ////
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        ////
.................... ////                                                                       ////
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             ////
.................... ////                                                                       ////
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         ////
.................... ////              (on=FALSE).                                              ////
.................... ////                                                                       ////
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   ////
.................... ////                                                                       ////
.................... ////                                                                       ////
.................... ////  CONFIGURATION                                                        ////
.................... ////  The LCD can be configured in one of two ways: a.) port access or     ////
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     ////
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     ////
.................... ////  connected to sequential pins on the GPIO.  Pin access                ////
.................... ////  has no requirements, all 7 bits of the control interface can         ////
.................... ////  can be connected to any GPIO using several ports.                    ////
.................... ////                                                                       ////
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     ////
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    ////
.................... ////  of this file to configure the pin order.  If you are using a         ////
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  ////
.................... ////  be defined.                                                          ////
.................... ////                                                                       ////
.................... ////  Example of port access:                                              ////
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         ////
.................... ////                                                                       ////
.................... ////  To use pin access, the following pins must be defined:               ////
.................... ////     LCD_ENABLE_PIN                                                    ////
.................... ////     LCD_RS_PIN                                                        ////
.................... ////     LCD_RW_PIN                                                        ////
.................... ////     LCD_DATA4                                                         ////
.................... ////     LCD_DATA5                                                         ////
.................... ////     LCD_DATA6                                                         ////
.................... ////     LCD_DATA7                                                         ////
.................... ////                                                                       ////
.................... ////  Example of pin access:                                               ////
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    ////
.................... ////     #define LCD_RS_PIN      PIN_E1                                    ////
.................... ////     #define LCD_RW_PIN      PIN_E2                                    ////
.................... ////     #define LCD_DATA4       PIN_D4                                    ////
.................... ////     #define LCD_DATA5       PIN_D5                                    ////
.................... ////     #define LCD_DATA6       PIN_D6                                    ////
.................... ////     #define LCD_DATA7       PIN_D7                                    ////
.................... ////                                                                       ////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef __LCD_C__
.................... #define __LCD_C__
.................... 
.................... // define the pinout.
.................... // only required if port access is being used.
.................... typedef struct  
.................... {                            // This structure is overlayed
....................    int1 enable;           // on to an I/O port to gain
....................    int1 rs;               // access to the LCD pins.
....................    int1 rw;               // The bits are allocated from
....................    int1 unused;           // low order up.  ENABLE will
....................    unsigned int     data : 4;         // be LSB pin of that port.
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT.
....................    unsigned int    reserved: 8;
....................   #endif
.................... } LCD_PIN_MAP;
.................... 
.................... // this is to improve compatability with previous LCD drivers that accepted
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B.
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE))
....................  #define LCD_DATA_PORT getenv("SFR:PORTB")
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    // these definitions only need to be modified for baseline PICs.
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions.
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0};
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF};
.................... #endif
.................... 
.................... ////////////////////// END CONFIGURATION ///////////////////////////////////
.................... 
.................... #ifndef LCD_ENABLE_PIN
....................    #define lcd_output_enable(x) lcdlat.enable=x
....................    #define lcd_enable_tris()   lcdtris.enable=0
.................... #else
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x)
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RS_PIN
....................    #define lcd_output_rs(x) lcdlat.rs=x
....................    #define lcd_rs_tris()   lcdtris.rs=0
.................... #else
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x)
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RW_PIN
....................    #define lcd_output_rw(x) lcdlat.rw=x
....................    #define lcd_rw_tris()   lcdtris.rw=0
.................... #else
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x)
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN)
.................... #endif
.................... 
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4,
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver
.................... // compatible with any code written for the original library
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7))
....................    #define  LCD_DATA4    LCD_DATA0
....................    #define  LCD_DATA5    LCD_DATA1
....................    #define  LCD_DATA6    LCD_DATA2
....................    #define  LCD_DATA7    LCD_DATA3
.................... #endif
.................... 
.................... #ifndef LCD_DATA4
.................... #ifndef LCD_DATA_PORT
....................    #if defined(__PCB__)
....................       #define LCD_DATA_PORT      0x06     //portb
....................       #define set_tris_lcd(x)   set_tris_b(x)
....................    #else
....................      #if defined(PIN_D0)
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd
....................      #else
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb
....................      #endif
....................    #endif   
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    LCD_PIN_MAP lcd, lcdlat;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
.................... #elif defined(__PCM__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
....................    #byte lcdtris = LCD_DATA_PORT+0x80
.................... #elif defined(__PCH__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT+9
....................    #byte lcdtris = LCD_DATA_PORT+0x12
.................... #elif defined(__PCD__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #word lcd = LCD_DATA_PORT
....................    #word lcdlat = LCD_DATA_PORT+2
....................    #word lcdtris = LCD_DATA_PORT-0x02
.................... #endif
.................... #endif   //LCD_DATA4 not defined
.................... 
.................... #ifndef LCD_TYPE
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines
.................... #endif
.................... 
.................... #ifndef LCD_LINE_TWO
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line
.................... #endif
.................... 
.................... #ifndef LCD_LINE_LENGTH
....................    #define LCD_LINE_LENGTH 20
.................... #endif
.................... 
.................... unsigned int8 lcd_read_nibble(void);
.................... 
.................... unsigned int8 lcd_read_byte(void)
.................... {
....................    unsigned int8 low,high;
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_INPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_float(LCD_DATA4);
....................    output_float(LCD_DATA5);
....................    output_float(LCD_DATA6);
....................    output_float(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0xF;
*
0037:  MOVLW  0F
0038:  BSF    03.5
0039:  ANDWF  08,W
003A:  IORLW  F0
003B:  MOVWF  08
....................   #endif
....................  #endif
....................         
....................    lcd_output_rw(1);
003C:  BCF    03.5
003D:  BSF    08.2
....................    delay_cycles(1);
003E:  NOP
....................    lcd_output_enable(1);
003F:  BSF    08.0
....................    delay_cycles(1);
0040:  NOP
....................    high = lcd_read_nibble();
0041:  CALL   02B
0042:  MOVF   78,W
0043:  MOVWF  2E
....................       
....................    lcd_output_enable(0);
0044:  BCF    08.0
....................    delay_cycles(1);
0045:  NOP
....................    lcd_output_enable(1);
0046:  BSF    08.0
....................    delay_us(1);
0047:  GOTO   048
....................    low = lcd_read_nibble();
0048:  CALL   02B
0049:  MOVF   78,W
004A:  MOVWF  2D
....................       
....................    lcd_output_enable(0);
004B:  BCF    08.0
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
....................    output_drive(LCD_DATA5);
....................    output_drive(LCD_DATA6);
....................    output_drive(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0x0;
004C:  MOVLW  0F
004D:  BSF    03.5
004E:  ANDWF  08,W
004F:  MOVWF  08
....................   #endif
....................  #endif
.................... 
....................    return( (high<<4) | low);
0050:  BCF    03.5
0051:  SWAPF  2E,W
0052:  MOVWF  77
0053:  MOVLW  F0
0054:  ANDWF  77,F
0055:  MOVF   77,W
0056:  IORWF  2D,W
0057:  MOVWF  78
.................... }
.................... 
.................... unsigned int8 lcd_read_nibble(void)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    unsigned int8 n = 0x00;
.................... 
....................    /* Read the data port */
....................    n |= input(LCD_DATA4);
....................    n |= input(LCD_DATA5) << 1;
....................    n |= input(LCD_DATA6) << 2;
....................    n |= input(LCD_DATA7) << 3;
....................    
....................    return(n);
....................   #else
....................    return(lcd.data);
*
002B:  MOVF   08,W
002C:  MOVWF  77
002D:  SWAPF  08,W
002E:  ANDLW  0F
002F:  MOVWF  78
....................   #endif
0030:  RETURN
.................... }
.................... 
.................... void lcd_send_nibble(unsigned int8 n)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    /* Write to the data port */
....................    output_bit(LCD_DATA4, bit_test(n, 0));
....................    output_bit(LCD_DATA5, bit_test(n, 1));
....................    output_bit(LCD_DATA6, bit_test(n, 2));
....................    output_bit(LCD_DATA7, bit_test(n, 3));
....................   #else      
....................    lcdlat.data = n;
*
001E:  SWAPF  2E,W
001F:  ANDLW  F0
0020:  MOVWF  77
0021:  MOVLW  0F
0022:  ANDWF  08,W
0023:  IORWF  77,W
0024:  MOVWF  08
....................   #endif
....................       
....................    delay_cycles(1);
0025:  NOP
....................    lcd_output_enable(1);
0026:  BSF    08.0
....................    delay_us(2);
0027:  GOTO   028
0028:  GOTO   029
....................    lcd_output_enable(0);
0029:  BCF    08.0
002A:  RETURN
.................... }
.................... 
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n)
.................... {
....................   #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................   #else
....................    lcd_enable_tris();
*
0031:  BSF    03.5
0032:  BCF    08.0
....................    lcd_rs_tris();
0033:  BCF    08.1
....................    lcd_rw_tris();
0034:  BCF    08.2
....................   #endif
.................... 
....................    lcd_output_rs(0);
0035:  BCF    03.5
0036:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ;
*
0058:  MOVF   78,W
0059:  MOVWF  2D
005A:  BTFSC  2D.7
005B:  GOTO   037
....................    lcd_output_rs(address);
005C:  BTFSS  2B.0
005D:  BCF    08.1
005E:  BTFSC  2B.0
005F:  BSF    08.1
....................    delay_cycles(1);
0060:  NOP
....................    lcd_output_rw(0);
0061:  BCF    08.2
....................    delay_cycles(1);
0062:  NOP
....................    lcd_output_enable(0);
0063:  BCF    08.0
....................    lcd_send_nibble(n >> 4);
0064:  SWAPF  2C,W
0065:  MOVWF  2D
0066:  MOVLW  0F
0067:  ANDWF  2D,F
0068:  MOVF   2D,W
0069:  MOVWF  2E
006A:  CALL   01E
....................    lcd_send_nibble(n & 0xf);
006B:  MOVF   2C,W
006C:  ANDLW  0F
006D:  MOVWF  2D
006E:  MOVWF  2E
006F:  CALL   01E
0070:  RETURN
.................... }
.................... 
.................... #if defined(LCD_EXTENDED_NEWLINE)
.................... unsigned int8 g_LcdX, g_LcdY;
.................... #endif
.................... 
.................... void lcd_init(void) 
.................... {
....................    unsigned int8 i;
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6};
0071:  MOVLW  28
0072:  MOVWF  22
0073:  MOVLW  0C
0074:  MOVWF  23
0075:  MOVLW  01
0076:  MOVWF  24
0077:  MOVLW  06
0078:  MOVWF  25
....................                              // These bytes need to be sent to the LCD
....................                              // to start it up.
....................    
.................... 
....................    lcd_output_enable(0);
0079:  BCF    08.0
....................    lcd_output_rs(0);
007A:  BCF    08.1
....................    lcd_output_rw(0);
007B:  BCF    08.2
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
....................    output_drive(LCD_DATA5);
....................    output_drive(LCD_DATA6);
....................    output_drive(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0x0;
007C:  MOVLW  0F
007D:  BSF    03.5
007E:  ANDWF  08,W
007F:  MOVWF  08
....................   #endif
....................    lcd_enable_tris();
0080:  BCF    08.0
....................    lcd_rs_tris();
0081:  BCF    08.1
....................    lcd_rw_tris();
0082:  BCF    08.2
....................  #endif
....................     
....................    delay_ms(15);
0083:  MOVLW  0F
0084:  BCF    03.5
0085:  MOVWF  27
0086:  CALL   00A
....................    for(i=1;i<=3;++i)
0087:  MOVLW  01
0088:  MOVWF  21
0089:  MOVF   21,W
008A:  SUBLW  03
008B:  BTFSS  03.0
008C:  GOTO   095
....................    {
....................        lcd_send_nibble(3);
008D:  MOVLW  03
008E:  MOVWF  2E
008F:  CALL   01E
....................        delay_ms(5);
0090:  MOVLW  05
0091:  MOVWF  27
0092:  CALL   00A
0093:  INCF   21,F
0094:  GOTO   089
....................    }
....................    
....................    lcd_send_nibble(2);
0095:  MOVLW  02
0096:  MOVWF  2E
0097:  CALL   01E
....................    delay_ms(5);
0098:  MOVLW  05
0099:  MOVWF  27
009A:  CALL   00A
....................    for(i=0;i<=3;++i)
009B:  CLRF   21
009C:  MOVF   21,W
009D:  SUBLW  03
009E:  BTFSS  03.0
009F:  GOTO   0AC
....................       lcd_send_byte(0,LCD_INIT_STRING[i]);
00A0:  MOVLW  22
00A1:  ADDWF  21,W
00A2:  MOVWF  04
00A3:  BCF    03.7
00A4:  MOVF   00,W
00A5:  MOVWF  26
00A6:  CLRF   2B
00A7:  MOVF   26,W
00A8:  MOVWF  2C
00A9:  CALL   031
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
00AA:  INCF   21,F
00AB:  GOTO   09C
00AC:  BCF    0A.3
00AD:  BCF    0A.4
00AE:  GOTO   1B4 (RETURN)
....................    g_LcdX = 0;
....................    g_LcdY = 0;
....................   #endif
.................... }
.................... 
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y)
.................... {
....................    unsigned int8 address;
....................    
....................    if(y!=1)
00AF:  DECFSZ 28,W
00B0:  GOTO   0B2
00B1:  GOTO   0B5
....................       address=LCD_LINE_TWO;
00B2:  MOVLW  40
00B3:  MOVWF  29
00B4:  GOTO   0B6
....................    else
....................       address=0;
00B5:  CLRF   29
....................      
....................    address+=x-1;
00B6:  MOVLW  01
00B7:  SUBWF  27,W
00B8:  ADDWF  29,F
....................    lcd_send_byte(0,0x80|address);
00B9:  MOVF   29,W
00BA:  IORLW  80
00BB:  MOVWF  2A
00BC:  CLRF   2B
00BD:  MOVF   2A,W
00BE:  MOVWF  2C
00BF:  CALL   031
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
00C0:  RETURN
....................    g_LcdX = x - 1;
....................    g_LcdY = y - 1;
....................   #endif
.................... }
.................... 
.................... void lcd_putc(char c)
.................... {
....................    switch (c)
00C1:  MOVF   26,W
00C2:  XORLW  07
00C3:  BTFSC  03.2
00C4:  GOTO   0CF
00C5:  XORLW  0B
00C6:  BTFSC  03.2
00C7:  GOTO   0D4
00C8:  XORLW  06
00C9:  BTFSC  03.2
00CA:  GOTO   0DC
00CB:  XORLW  02
00CC:  BTFSC  03.2
00CD:  GOTO   0E2
00CE:  GOTO   0E7
....................    {
....................       case '\a'   :  lcd_gotoxy(1,1);     break;
00CF:  MOVLW  01
00D0:  MOVWF  27
00D1:  MOVWF  28
00D2:  CALL   0AF
00D3:  GOTO   0EC
.................... 
....................       case '\f'   :  lcd_send_byte(0,1);
00D4:  CLRF   2B
00D5:  MOVLW  01
00D6:  MOVWF  2C
00D7:  CALL   031
....................                      delay_ms(2);
00D8:  MOVLW  02
00D9:  MOVWF  27
00DA:  CALL   00A
....................                     #if defined(LCD_EXTENDED_NEWLINE)
....................                      g_LcdX = 0;
....................                      g_LcdY = 0;
....................                     #endif
....................                      break;
00DB:  GOTO   0EC
.................... 
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break;
....................       case '\n'   :
....................          while (g_LcdX++ < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, ' ');
....................          }
....................          lcd_gotoxy(1, g_LcdY+2);
....................          break;
....................      #else
....................       case '\n'   : lcd_gotoxy(1,2);        break;
00DC:  MOVLW  01
00DD:  MOVWF  27
00DE:  MOVLW  02
00DF:  MOVWF  28
00E0:  CALL   0AF
00E1:  GOTO   0EC
....................      #endif
....................      
....................       case '\b'   : lcd_send_byte(0,0x10);  break;
00E2:  CLRF   2B
00E3:  MOVLW  10
00E4:  MOVWF  2C
00E5:  CALL   031
00E6:  GOTO   0EC
....................      
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       default     : 
....................          if (g_LcdX < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, c);
....................             g_LcdX++;
....................          }
....................          break;
....................      #else
....................       default     : lcd_send_byte(1,c);     break;
00E7:  MOVLW  01
00E8:  MOVWF  2B
00E9:  MOVF   26,W
00EA:  MOVWF  2C
00EB:  CALL   031
....................      #endif
....................    }
00EC:  RETURN
.................... }
....................  
.................... char lcd_getc(unsigned int8 x, unsigned int8 y)
.................... {
....................    char value;
.................... 
....................    lcd_gotoxy(x,y);
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low
....................    lcd_output_rs(1);
....................    value = lcd_read_byte();
....................    lcd_output_rs(0);
....................    
....................    return(value);
.................... }
.................... 
.................... // write a custom character to the ram
.................... // which is 0-7 and specifies which character array we are modifying.
.................... // ptr points to an array of 8 bytes, where each byte is the next row of
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and
.................... //    usually you will want to leave this byte 0x00.
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr)
.................... {
....................    unsigned int i;
.................... 
....................    which <<= 3;
....................    which &= 0x38;
.................... 
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address
.................... 
....................    for(i=0; i<8; i++)
....................    {
....................       lcd_send_byte(1, *ptr++);
....................    }
....................   
....................    #if defined(LCD_EXTENDED_NEWLINE)
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address
....................    #endif
.................... }
.................... 
.................... void lcd_cursor_on(int1 on)
.................... {
....................    if (on)
....................    {
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON
....................    }
....................    else
....................    {
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF
....................    }
.................... }
.................... 
.................... #endif
.................... 
.................... int8 cnt ; 
.................... 
.................... void main()
*
0192:  MOVF   03,W
0193:  ANDLW  1F
0194:  MOVWF  03
0195:  MOVLW  71
0196:  BSF    03.5
0197:  MOVWF  0F
0198:  CLRF   10
0199:  MOVF   0F,W
019A:  BSF    03.6
019B:  MOVF   09,W
019C:  ANDLW  C0
019D:  MOVWF  09
019E:  BCF    03.6
019F:  BCF    1F.4
01A0:  BCF    1F.5
01A1:  MOVLW  00
01A2:  BSF    03.6
01A3:  MOVWF  08
01A4:  BCF    03.5
01A5:  CLRF   07
01A6:  CLRF   08
01A7:  CLRF   09
01A8:  BCF    03.7
.................... {
.................... set_tris_a(0xFF);//RA4/T0CKI:0b***1****
01A9:  MOVLW  FF
01AA:  BSF    03.5
01AB:  BCF    03.6
01AC:  MOVWF  05
.................... 
.................... 
.................... setup_timer_0(RTCC_DIV_1|RTCC_EXT_H_TO_L);
01AD:  MOVF   01,W
01AE:  ANDLW  C7
01AF:  IORLW  38
01B0:  MOVWF  01
.................... set_timer0(0);    
01B1:  BCF    03.5
01B2:  CLRF   01
.................... lcd_init();
01B3:  GOTO   071
.................... while(TRUE)
.................... {
.................... 
.................... if( get_timer0() == 100){
01B4:  MOVF   01,W
01B5:  SUBLW  64
01B6:  BTFSC  03.2
.................... set_timer0(0);
01B7:  CLRF   01
.................... }
.................... lcd_gotoxy(1,1);
01B8:  MOVLW  01
01B9:  MOVWF  27
01BA:  MOVWF  28
01BB:  CALL   0AF
.................... printf(lcd_putc,"Count=%03u",get_timer0());
01BC:  MOVF   01,W
01BD:  MOVWF  21
01BE:  MOVLW  04
01BF:  BSF    03.6
01C0:  MOVWF  0D
01C1:  MOVLW  00
01C2:  MOVWF  0F
01C3:  BCF    03.0
01C4:  MOVLW  06
01C5:  BCF    03.6
01C6:  MOVWF  22
01C7:  GOTO   0ED
01C8:  MOVF   21,W
01C9:  MOVWF  22
01CA:  MOVLW  03
01CB:  MOVWF  23
01CC:  GOTO   15B
01CD:  GOTO   1B4
.................... }
.................... }
01CE:  SLEEP

Configuration Fuses:
   Word  1: 2FE4   INTRC_IO NOWDT PUT MCLR NOPROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
