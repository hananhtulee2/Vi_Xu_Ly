CCS PCM C Compiler, Version 5.109, 43599               23-May-23 16:11

               Filename:   E:\PIC 16F887\Code\Onbuoi2\bai1.lst

               ROM used:   783 words (10%)
                           Largest free fragment is 2048
               RAM used:   13 (4%) at main() level
                           31 (8%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  02
0001:  MOVWF  0A
0002:  GOTO   2A8
0003:  NOP
.................... #include <16f887.h>
.................... //////////// Standard Header file for the PIC16F887 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F887
0004:  DATA C2,37
0005:  DATA F8,1E
0006:  DATA 25,18
0007:  DATA 35,26
0008:  DATA 75,00
0009:  DATA D2,2A
000A:  DATA 4E,10
000B:  DATA 20,00
000C:  DATA 53,2A
000D:  DATA 4F,28
000E:  DATA 00,01
000F:  DATA C6,2A
0010:  DATA 4C,26
0011:  DATA 20,00
0012:  DATA D2,22
0013:  DATA D3,22
0014:  DATA 54,00
*
00F8:  MOVF   2A,W
00F9:  CLRF   78
00FA:  SUBWF  29,W
00FB:  BTFSC  03.0
00FC:  GOTO   100
00FD:  MOVF   29,W
00FE:  MOVWF  77
00FF:  GOTO   10C
0100:  CLRF   77
0101:  MOVLW  08
0102:  MOVWF  2B
0103:  RLF    29,F
0104:  RLF    77,F
0105:  MOVF   2A,W
0106:  SUBWF  77,W
0107:  BTFSC  03.0
0108:  MOVWF  77
0109:  RLF    78,F
010A:  DECFSZ 2B,F
010B:  GOTO   103
010C:  RETURN
010D:  MOVF   0B,W
010E:  MOVWF  27
010F:  BCF    0B.7
0110:  BSF    03.5
0111:  BSF    03.6
0112:  BSF    0C.7
0113:  BSF    0C.0
0114:  NOP
0115:  NOP
0116:  BCF    03.5
0117:  BCF    03.6
0118:  BTFSC  27.7
0119:  BSF    0B.7
011A:  BSF    03.6
011B:  MOVF   0C,W
011C:  ANDLW  7F
011D:  BTFSC  03.2
011E:  GOTO   161
011F:  BCF    03.6
0120:  MOVWF  27
0121:  BSF    03.6
0122:  MOVF   0D,W
0123:  BCF    03.6
0124:  MOVWF  28
0125:  BSF    03.6
0126:  MOVF   0F,W
0127:  BCF    03.6
0128:  MOVWF  29
0129:  MOVF   27,W
012A:  MOVWF  30
012B:  CALL   0CC
012C:  MOVF   28,W
012D:  BSF    03.6
012E:  MOVWF  0D
012F:  BCF    03.6
0130:  MOVF   29,W
0131:  BSF    03.6
0132:  MOVWF  0F
0133:  BCF    03.6
0134:  MOVF   0B,W
0135:  MOVWF  2A
0136:  BCF    0B.7
0137:  BSF    03.5
0138:  BSF    03.6
0139:  BSF    0C.7
013A:  BSF    0C.0
013B:  NOP
013C:  NOP
013D:  BCF    03.5
013E:  BCF    03.6
013F:  BTFSC  2A.7
0140:  BSF    0B.7
0141:  BSF    03.6
0142:  RLF    0C,W
0143:  RLF    0E,W
0144:  ANDLW  7F
0145:  BTFSC  03.2
0146:  GOTO   161
0147:  BCF    03.6
0148:  MOVWF  27
0149:  BSF    03.6
014A:  MOVF   0D,W
014B:  BCF    03.6
014C:  MOVWF  28
014D:  BSF    03.6
014E:  MOVF   0F,W
014F:  BCF    03.6
0150:  MOVWF  29
0151:  MOVF   27,W
0152:  MOVWF  30
0153:  CALL   0CC
0154:  MOVF   28,W
0155:  BSF    03.6
0156:  MOVWF  0D
0157:  BCF    03.6
0158:  MOVF   29,W
0159:  BSF    03.6
015A:  MOVWF  0F
015B:  INCF   0D,F
015C:  BTFSC  03.2
015D:  INCF   0F,F
015E:  BCF    03.6
015F:  GOTO   10D
0160:  BSF    03.6
0161:  BCF    03.6
0162:  RETURN
*
0171:  MOVF   27,W
0172:  MOVWF  29
0173:  MOVLW  64
0174:  MOVWF  2A
0175:  CALL   0F8
0176:  MOVF   77,W
0177:  MOVWF  27
0178:  MOVF   78,W
0179:  MOVLW  30
017A:  BTFSS  03.2
017B:  GOTO   183
017C:  BTFSS  28.1
017D:  GOTO   18A
017E:  BTFSC  28.3
017F:  GOTO   18A
0180:  BTFSC  28.4
0181:  MOVLW  20
0182:  GOTO   186
0183:  BCF    28.3
0184:  BCF    28.4
0185:  BSF    28.0
0186:  ADDWF  78,F
0187:  MOVF   78,W
0188:  MOVWF  30
0189:  CALL   0CC
018A:  MOVF   27,W
018B:  MOVWF  29
018C:  MOVLW  0A
018D:  MOVWF  2A
018E:  CALL   0F8
018F:  MOVF   77,W
0190:  MOVWF  27
0191:  MOVF   78,W
0192:  MOVLW  30
0193:  BTFSS  03.2
0194:  GOTO   19B
0195:  BTFSC  28.3
0196:  GOTO   19F
0197:  BTFSS  28.0
0198:  GOTO   19F
0199:  BTFSC  28.4
019A:  MOVLW  20
019B:  ADDWF  78,F
019C:  MOVF   78,W
019D:  MOVWF  30
019E:  CALL   0CC
019F:  MOVLW  30
01A0:  ADDWF  27,F
01A1:  MOVF   27,W
01A2:  MOVWF  30
01A3:  CALL   0CC
*
01B2:  MOVF   0B,W
01B3:  MOVWF  28
01B4:  BCF    0B.7
01B5:  BSF    03.5
01B6:  BSF    03.6
01B7:  BSF    0C.7
01B8:  BSF    0C.0
01B9:  NOP
01BA:  NOP
01BB:  BCF    03.5
01BC:  BCF    03.6
01BD:  BTFSC  28.7
01BE:  BSF    0B.7
01BF:  BTFSC  03.0
01C0:  GOTO   1E9
01C1:  BSF    03.6
01C2:  MOVF   0C,W
01C3:  ANDLW  7F
01C4:  BCF    03.6
01C5:  MOVWF  28
01C6:  BSF    03.6
01C7:  MOVF   0D,W
01C8:  BCF    03.6
01C9:  MOVWF  29
01CA:  BSF    03.6
01CB:  MOVF   0F,W
01CC:  BCF    03.6
01CD:  MOVWF  2A
01CE:  MOVF   28,W
01CF:  MOVWF  30
01D0:  CALL   0CC
01D1:  MOVF   29,W
01D2:  BSF    03.6
01D3:  MOVWF  0D
01D4:  BCF    03.6
01D5:  MOVF   2A,W
01D6:  BSF    03.6
01D7:  MOVWF  0F
01D8:  BCF    03.6
01D9:  MOVF   0B,W
01DA:  MOVWF  2B
01DB:  BCF    0B.7
01DC:  BSF    03.5
01DD:  BSF    03.6
01DE:  BSF    0C.7
01DF:  BSF    0C.0
01E0:  NOP
01E1:  NOP
01E2:  BCF    03.5
01E3:  BCF    03.6
01E4:  BTFSC  2B.7
01E5:  BSF    0B.7
01E6:  DECFSZ 27,F
01E7:  GOTO   1E9
01E8:  GOTO   208
01E9:  BSF    03.6
01EA:  RLF    0C,W
01EB:  RLF    0E,W
01EC:  ANDLW  7F
01ED:  BCF    03.6
01EE:  MOVWF  28
01EF:  BSF    03.6
01F0:  MOVF   0D,W
01F1:  BCF    03.6
01F2:  MOVWF  29
01F3:  BSF    03.6
01F4:  MOVF   0F,W
01F5:  BCF    03.6
01F6:  MOVWF  2A
01F7:  MOVF   28,W
01F8:  MOVWF  30
01F9:  CALL   0CC
01FA:  MOVF   29,W
01FB:  BSF    03.6
01FC:  MOVWF  0D
01FD:  BCF    03.6
01FE:  MOVF   2A,W
01FF:  BSF    03.6
0200:  MOVWF  0F
0201:  INCF   0D,F
0202:  BTFSC  03.2
0203:  INCF   0F,F
0204:  BCF    03.0
0205:  BCF    03.6
0206:  DECFSZ 27,F
0207:  GOTO   1B2
*
020E:  CLRF   2F
020F:  MOVF   04,W
0210:  MOVWF  2E
0211:  BCF    2F.0
0212:  BTFSC  03.7
0213:  BSF    2F.0
0214:  SWAPF  28,W
0215:  IORLW  F0
0216:  MOVWF  2A
0217:  ADDWF  2A,F
0218:  ADDLW  E2
0219:  MOVWF  2B
021A:  ADDLW  32
021B:  MOVWF  2D
021C:  MOVF   28,W
021D:  ANDLW  0F
021E:  ADDWF  2B,F
021F:  ADDWF  2B,F
0220:  ADDWF  2D,F
0221:  ADDLW  E9
0222:  MOVWF  2C
0223:  ADDWF  2C,F
0224:  ADDWF  2C,F
0225:  SWAPF  27,W
0226:  ANDLW  0F
0227:  ADDWF  2C,F
0228:  ADDWF  2D,F
0229:  RLF    2C,F
022A:  RLF    2D,F
022B:  COMF   2D,F
022C:  RLF    2D,F
022D:  MOVF   27,W
022E:  ANDLW  0F
022F:  ADDWF  2D,F
0230:  RLF    2A,F
0231:  MOVLW  07
0232:  MOVWF  29
0233:  MOVLW  0A
0234:  ADDWF  2D,F
0235:  DECF   2C,F
0236:  BTFSS  03.0
0237:  GOTO   234
0238:  ADDWF  2C,F
0239:  DECF   2B,F
023A:  BTFSS  03.0
023B:  GOTO   238
023C:  ADDWF  2B,F
023D:  DECF   2A,F
023E:  BTFSS  03.0
023F:  GOTO   23C
0240:  ADDWF  2A,F
0241:  DECF   29,F
0242:  BTFSS  03.0
0243:  GOTO   240
0244:  MOVLW  29
0245:  MOVWF  04
0246:  BCF    03.7
0247:  MOVLW  07
0248:  ANDWF  2E,W
0249:  BCF    2E.6
024A:  ADDWF  04,F
024B:  MOVLW  2D
024C:  SUBWF  04,W
024D:  BTFSC  03.2
024E:  BSF    2E.6
024F:  MOVF   00,W
0250:  MOVWF  77
0251:  BTFSS  03.2
0252:  GOTO   25B
0253:  BTFSC  2E.6
0254:  GOTO   25B
0255:  BTFSC  2E.4
0256:  GOTO   26D
0257:  BTFSC  2E.3
0258:  GOTO   25B
0259:  MOVLW  20
025A:  GOTO   25E
025B:  BSF    2E.3
025C:  BCF    2E.4
025D:  MOVLW  30
025E:  ADDWF  77,F
025F:  CLRF   28
0260:  MOVF   04,W
0261:  MOVWF  27
0262:  BCF    28.0
0263:  BTFSC  03.7
0264:  BSF    28.0
0265:  MOVF   77,W
0266:  MOVWF  30
0267:  CALL   0CC
0268:  MOVF   27,W
0269:  MOVWF  04
026A:  BCF    03.7
026B:  BTFSC  28.0
026C:  BSF    03.7
026D:  INCF   04,F
026E:  BTFSS  2E.6
026F:  GOTO   24B
.................... 
.................... #list
.................... 
.................... #fuses intrc
.................... #use delay(clock=8M)
*
0015:  MOVLW  31
0016:  MOVWF  04
0017:  BCF    03.7
0018:  MOVF   00,W
0019:  BTFSC  03.2
001A:  GOTO   028
001B:  MOVLW  02
001C:  MOVWF  78
001D:  CLRF   77
001E:  DECFSZ 77,F
001F:  GOTO   01E
0020:  DECFSZ 78,F
0021:  GOTO   01D
0022:  MOVLW  97
0023:  MOVWF  77
0024:  DECFSZ 77,F
0025:  GOTO   024
0026:  DECFSZ 00,F
0027:  GOTO   01B
0028:  RETURN
.................... 
.................... #include <lcd.c>       
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////                             LCD.C                                     ////
.................... ////                 Driver for common LCD modules                         ////
.................... ////                                                                       ////
.................... ////  lcd_init()   Must be called before any other function.               ////
.................... ////                                                                       ////
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         ////
.................... ////                 \a  Set cursor position to upper left                 ////
.................... ////                 \f  Clear display, set cursor to upper left           ////
.................... ////                 \n  Go to start of second line                        ////
.................... ////                 \b  Move back one position                            ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     ////
.................... ////              will erase all remanining characters on the current      ////
.................... ////              line, and move the cursor to the beginning of the next   ////
.................... ////              line.                                                    ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     ////
.................... ////              will move the cursor to the start of the current         ////
.................... ////              line.                                                    ////
.................... ////                                                                       ////
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        ////
.................... ////                                                                       ////
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             ////
.................... ////                                                                       ////
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         ////
.................... ////              (on=FALSE).                                              ////
.................... ////                                                                       ////
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   ////
.................... ////                                                                       ////
.................... ////                                                                       ////
.................... ////  CONFIGURATION                                                        ////
.................... ////  The LCD can be configured in one of two ways: a.) port access or     ////
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     ////
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     ////
.................... ////  connected to sequential pins on the GPIO.  Pin access                ////
.................... ////  has no requirements, all 7 bits of the control interface can         ////
.................... ////  can be connected to any GPIO using several ports.                    ////
.................... ////                                                                       ////
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     ////
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    ////
.................... ////  of this file to configure the pin order.  If you are using a         ////
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  ////
.................... ////  be defined.                                                          ////
.................... ////                                                                       ////
.................... ////  Example of port access:                                              ////
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         ////
.................... ////                                                                       ////
.................... ////  To use pin access, the following pins must be defined:               ////
.................... ////     LCD_ENABLE_PIN                                                    ////
.................... ////     LCD_RS_PIN                                                        ////
.................... ////     LCD_RW_PIN                                                        ////
.................... ////     LCD_DATA4                                                         ////
.................... ////     LCD_DATA5                                                         ////
.................... ////     LCD_DATA6                                                         ////
.................... ////     LCD_DATA7                                                         ////
.................... ////                                                                       ////
.................... ////  Example of pin access:                                               ////
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    ////
.................... ////     #define LCD_RS_PIN      PIN_E1                                    ////
.................... ////     #define LCD_RW_PIN      PIN_E2                                    ////
.................... ////     #define LCD_DATA4       PIN_D4                                    ////
.................... ////     #define LCD_DATA5       PIN_D5                                    ////
.................... ////     #define LCD_DATA6       PIN_D6                                    ////
.................... ////     #define LCD_DATA7       PIN_D7                                    ////
.................... ////                                                                       ////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef __LCD_C__
.................... #define __LCD_C__
.................... 
.................... // define the pinout.
.................... // only required if port access is being used.
.................... typedef struct  
.................... {                            // This structure is overlayed
....................    int1 enable;           // on to an I/O port to gain
....................    int1 rs;               // access to the LCD pins.
....................    int1 rw;               // The bits are allocated from
....................    int1 unused;           // low order up.  ENABLE will
....................    unsigned int     data : 4;         // be LSB pin of that port.
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT.
....................    unsigned int    reserved: 8;
....................   #endif
.................... } LCD_PIN_MAP;
.................... 
.................... // this is to improve compatability with previous LCD drivers that accepted
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B.
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE))
....................  #define LCD_DATA_PORT getenv("SFR:PORTB")
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    // these definitions only need to be modified for baseline PICs.
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions.
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0};
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF};
.................... #endif
.................... 
.................... ////////////////////// END CONFIGURATION ///////////////////////////////////
.................... 
.................... #ifndef LCD_ENABLE_PIN
....................    #define lcd_output_enable(x) lcdlat.enable=x
....................    #define lcd_enable_tris()   lcdtris.enable=0
.................... #else
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x)
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RS_PIN
....................    #define lcd_output_rs(x) lcdlat.rs=x
....................    #define lcd_rs_tris()   lcdtris.rs=0
.................... #else
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x)
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RW_PIN
....................    #define lcd_output_rw(x) lcdlat.rw=x
....................    #define lcd_rw_tris()   lcdtris.rw=0
.................... #else
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x)
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN)
.................... #endif
.................... 
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4,
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver
.................... // compatible with any code written for the original library
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7))
....................    #define  LCD_DATA4    LCD_DATA0
....................    #define  LCD_DATA5    LCD_DATA1
....................    #define  LCD_DATA6    LCD_DATA2
....................    #define  LCD_DATA7    LCD_DATA3
.................... #endif
.................... 
.................... #ifndef LCD_DATA4
.................... #ifndef LCD_DATA_PORT
....................    #if defined(__PCB__)
....................       #define LCD_DATA_PORT      0x06     //portb
....................       #define set_tris_lcd(x)   set_tris_b(x)
....................    #else
....................      #if defined(PIN_D0)
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd
....................      #else
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb
....................      #endif
....................    #endif   
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    LCD_PIN_MAP lcd, lcdlat;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
.................... #elif defined(__PCM__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
....................    #byte lcdtris = LCD_DATA_PORT+0x80
.................... #elif defined(__PCH__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT+9
....................    #byte lcdtris = LCD_DATA_PORT+0x12
.................... #elif defined(__PCD__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #word lcd = LCD_DATA_PORT
....................    #word lcdlat = LCD_DATA_PORT+2
....................    #word lcdtris = LCD_DATA_PORT-0x02
.................... #endif
.................... #endif   //LCD_DATA4 not defined
.................... 
.................... #ifndef LCD_TYPE
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines
.................... #endif
.................... 
.................... #ifndef LCD_LINE_TWO
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line
.................... #endif
.................... 
.................... #ifndef LCD_LINE_LENGTH
....................    #define LCD_LINE_LENGTH 20
.................... #endif
.................... 
.................... unsigned int8 lcd_read_nibble(void);
.................... 
.................... unsigned int8 lcd_read_byte(void)
.................... {
....................    unsigned int8 low,high;
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_INPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_float(LCD_DATA4);
....................    output_float(LCD_DATA5);
....................    output_float(LCD_DATA6);
....................    output_float(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0xF;
*
0042:  MOVLW  0F
0043:  BSF    03.5
0044:  ANDWF  08,W
0045:  IORLW  F0
0046:  MOVWF  08
....................   #endif
....................  #endif
....................         
....................    lcd_output_rw(1);
0047:  BCF    03.5
0048:  BSF    08.2
....................    delay_cycles(1);
0049:  NOP
....................    lcd_output_enable(1);
004A:  BSF    08.0
....................    delay_cycles(1);
004B:  NOP
....................    high = lcd_read_nibble();
004C:  CALL   036
004D:  MOVF   78,W
004E:  MOVWF  38
....................       
....................    lcd_output_enable(0);
004F:  BCF    08.0
....................    delay_cycles(1);
0050:  NOP
....................    lcd_output_enable(1);
0051:  BSF    08.0
....................    delay_us(1);
0052:  GOTO   053
....................    low = lcd_read_nibble();
0053:  CALL   036
0054:  MOVF   78,W
0055:  MOVWF  37
....................       
....................    lcd_output_enable(0);
0056:  BCF    08.0
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
....................    output_drive(LCD_DATA5);
....................    output_drive(LCD_DATA6);
....................    output_drive(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0x0;
0057:  MOVLW  0F
0058:  BSF    03.5
0059:  ANDWF  08,W
005A:  MOVWF  08
....................   #endif
....................  #endif
.................... 
....................    return( (high<<4) | low);
005B:  BCF    03.5
005C:  SWAPF  38,W
005D:  MOVWF  77
005E:  MOVLW  F0
005F:  ANDWF  77,F
0060:  MOVF   77,W
0061:  IORWF  37,W
0062:  MOVWF  78
.................... }
.................... 
.................... unsigned int8 lcd_read_nibble(void)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    unsigned int8 n = 0x00;
.................... 
....................    /* Read the data port */
....................    n |= input(LCD_DATA4);
....................    n |= input(LCD_DATA5) << 1;
....................    n |= input(LCD_DATA6) << 2;
....................    n |= input(LCD_DATA7) << 3;
....................    
....................    return(n);
....................   #else
....................    return(lcd.data);
*
0036:  MOVF   08,W
0037:  MOVWF  77
0038:  SWAPF  08,W
0039:  ANDLW  0F
003A:  MOVWF  78
....................   #endif
003B:  RETURN
.................... }
.................... 
.................... void lcd_send_nibble(unsigned int8 n)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    /* Write to the data port */
....................    output_bit(LCD_DATA4, bit_test(n, 0));
....................    output_bit(LCD_DATA5, bit_test(n, 1));
....................    output_bit(LCD_DATA6, bit_test(n, 2));
....................    output_bit(LCD_DATA7, bit_test(n, 3));
....................   #else      
....................    lcdlat.data = n;
*
0029:  SWAPF  38,W
002A:  ANDLW  F0
002B:  MOVWF  77
002C:  MOVLW  0F
002D:  ANDWF  08,W
002E:  IORWF  77,W
002F:  MOVWF  08
....................   #endif
....................       
....................    delay_cycles(1);
0030:  NOP
....................    lcd_output_enable(1);
0031:  BSF    08.0
....................    delay_us(2);
0032:  GOTO   033
0033:  GOTO   034
....................    lcd_output_enable(0);
0034:  BCF    08.0
0035:  RETURN
.................... }
.................... 
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n)
.................... {
....................   #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................   #else
....................    lcd_enable_tris();
*
003C:  BSF    03.5
003D:  BCF    08.0
....................    lcd_rs_tris();
003E:  BCF    08.1
....................    lcd_rw_tris();
003F:  BCF    08.2
....................   #endif
.................... 
....................    lcd_output_rs(0);
0040:  BCF    03.5
0041:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ;
*
0063:  MOVF   78,W
0064:  MOVWF  37
0065:  BTFSC  37.7
0066:  GOTO   042
....................    lcd_output_rs(address);
0067:  BTFSS  35.0
0068:  BCF    08.1
0069:  BTFSC  35.0
006A:  BSF    08.1
....................    delay_cycles(1);
006B:  NOP
....................    lcd_output_rw(0);
006C:  BCF    08.2
....................    delay_cycles(1);
006D:  NOP
....................    lcd_output_enable(0);
006E:  BCF    08.0
....................    lcd_send_nibble(n >> 4);
006F:  SWAPF  36,W
0070:  MOVWF  37
0071:  MOVLW  0F
0072:  ANDWF  37,F
0073:  MOVF   37,W
0074:  MOVWF  38
0075:  CALL   029
....................    lcd_send_nibble(n & 0xf);
0076:  MOVF   36,W
0077:  ANDLW  0F
0078:  MOVWF  37
0079:  MOVWF  38
007A:  CALL   029
007B:  RETURN
.................... }
.................... 
.................... #if defined(LCD_EXTENDED_NEWLINE)
.................... unsigned int8 g_LcdX, g_LcdY;
.................... #endif
.................... 
.................... void lcd_init(void) 
.................... {
....................    unsigned int8 i;
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6};
007C:  MOVLW  28
007D:  MOVWF  28
007E:  MOVLW  0C
007F:  MOVWF  29
0080:  MOVLW  01
0081:  MOVWF  2A
0082:  MOVLW  06
0083:  MOVWF  2B
....................                              // These bytes need to be sent to the LCD
....................                              // to start it up.
....................    
.................... 
....................    lcd_output_enable(0);
0084:  BCF    08.0
....................    lcd_output_rs(0);
0085:  BCF    08.1
....................    lcd_output_rw(0);
0086:  BCF    08.2
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
....................    output_drive(LCD_DATA5);
....................    output_drive(LCD_DATA6);
....................    output_drive(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0x0;
0087:  MOVLW  0F
0088:  BSF    03.5
0089:  ANDWF  08,W
008A:  MOVWF  08
....................   #endif
....................    lcd_enable_tris();
008B:  BCF    08.0
....................    lcd_rs_tris();
008C:  BCF    08.1
....................    lcd_rw_tris();
008D:  BCF    08.2
....................  #endif
....................     
....................    delay_ms(15);
008E:  MOVLW  0F
008F:  BCF    03.5
0090:  MOVWF  31
0091:  CALL   015
....................    for(i=1;i<=3;++i)
0092:  MOVLW  01
0093:  MOVWF  27
0094:  MOVF   27,W
0095:  SUBLW  03
0096:  BTFSS  03.0
0097:  GOTO   0A0
....................    {
....................        lcd_send_nibble(3);
0098:  MOVLW  03
0099:  MOVWF  38
009A:  CALL   029
....................        delay_ms(5);
009B:  MOVLW  05
009C:  MOVWF  31
009D:  CALL   015
009E:  INCF   27,F
009F:  GOTO   094
....................    }
....................    
....................    lcd_send_nibble(2);
00A0:  MOVLW  02
00A1:  MOVWF  38
00A2:  CALL   029
....................    delay_ms(5);
00A3:  MOVLW  05
00A4:  MOVWF  31
00A5:  CALL   015
....................    for(i=0;i<=3;++i)
00A6:  CLRF   27
00A7:  MOVF   27,W
00A8:  SUBLW  03
00A9:  BTFSS  03.0
00AA:  GOTO   0B7
....................       lcd_send_byte(0,LCD_INIT_STRING[i]);
00AB:  MOVLW  28
00AC:  ADDWF  27,W
00AD:  MOVWF  04
00AE:  BCF    03.7
00AF:  MOVF   00,W
00B0:  MOVWF  2C
00B1:  CLRF   35
00B2:  MOVF   2C,W
00B3:  MOVWF  36
00B4:  CALL   03C
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
00B5:  INCF   27,F
00B6:  GOTO   0A7
00B7:  BCF    0A.3
00B8:  BCF    0A.4
00B9:  GOTO   2D7 (RETURN)
....................    g_LcdX = 0;
....................    g_LcdY = 0;
....................   #endif
.................... }
.................... 
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y)
.................... {
....................    unsigned int8 address;
....................    
....................    if(y!=1)
00BA:  DECFSZ 32,W
00BB:  GOTO   0BD
00BC:  GOTO   0C0
....................       address=LCD_LINE_TWO;
00BD:  MOVLW  40
00BE:  MOVWF  33
00BF:  GOTO   0C1
....................    else
....................       address=0;
00C0:  CLRF   33
....................      
....................    address+=x-1;
00C1:  MOVLW  01
00C2:  SUBWF  31,W
00C3:  ADDWF  33,F
....................    lcd_send_byte(0,0x80|address);
00C4:  MOVF   33,W
00C5:  IORLW  80
00C6:  MOVWF  34
00C7:  CLRF   35
00C8:  MOVF   34,W
00C9:  MOVWF  36
00CA:  CALL   03C
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
00CB:  RETURN
....................    g_LcdX = x - 1;
....................    g_LcdY = y - 1;
....................   #endif
.................... }
.................... 
.................... void lcd_putc(char c)
.................... {
....................    switch (c)
00CC:  MOVF   30,W
00CD:  XORLW  07
00CE:  BTFSC  03.2
00CF:  GOTO   0DA
00D0:  XORLW  0B
00D1:  BTFSC  03.2
00D2:  GOTO   0DF
00D3:  XORLW  06
00D4:  BTFSC  03.2
00D5:  GOTO   0E7
00D6:  XORLW  02
00D7:  BTFSC  03.2
00D8:  GOTO   0ED
00D9:  GOTO   0F2
....................    {
....................       case '\a'   :  lcd_gotoxy(1,1);     break;
00DA:  MOVLW  01
00DB:  MOVWF  31
00DC:  MOVWF  32
00DD:  CALL   0BA
00DE:  GOTO   0F7
.................... 
....................       case '\f'   :  lcd_send_byte(0,1);
00DF:  CLRF   35
00E0:  MOVLW  01
00E1:  MOVWF  36
00E2:  CALL   03C
....................                      delay_ms(2);
00E3:  MOVLW  02
00E4:  MOVWF  31
00E5:  CALL   015
....................                     #if defined(LCD_EXTENDED_NEWLINE)
....................                      g_LcdX = 0;
....................                      g_LcdY = 0;
....................                     #endif
....................                      break;
00E6:  GOTO   0F7
.................... 
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break;
....................       case '\n'   :
....................          while (g_LcdX++ < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, ' ');
....................          }
....................          lcd_gotoxy(1, g_LcdY+2);
....................          break;
....................      #else
....................       case '\n'   : lcd_gotoxy(1,2);        break;
00E7:  MOVLW  01
00E8:  MOVWF  31
00E9:  MOVLW  02
00EA:  MOVWF  32
00EB:  CALL   0BA
00EC:  GOTO   0F7
....................      #endif
....................      
....................       case '\b'   : lcd_send_byte(0,0x10);  break;
00ED:  CLRF   35
00EE:  MOVLW  10
00EF:  MOVWF  36
00F0:  CALL   03C
00F1:  GOTO   0F7
....................      
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       default     : 
....................          if (g_LcdX < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, c);
....................             g_LcdX++;
....................          }
....................          break;
....................      #else
....................       default     : lcd_send_byte(1,c);     break;
00F2:  MOVLW  01
00F3:  MOVWF  35
00F4:  MOVF   30,W
00F5:  MOVWF  36
00F6:  CALL   03C
....................      #endif
....................    }
00F7:  RETURN
.................... }
....................  
.................... char lcd_getc(unsigned int8 x, unsigned int8 y)
.................... {
....................    char value;
.................... 
....................    lcd_gotoxy(x,y);
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low
....................    lcd_output_rs(1);
....................    value = lcd_read_byte();
....................    lcd_output_rs(0);
....................    
....................    return(value);
.................... }
.................... 
.................... // write a custom character to the ram
.................... // which is 0-7 and specifies which character array we are modifying.
.................... // ptr points to an array of 8 bytes, where each byte is the next row of
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and
.................... //    usually you will want to leave this byte 0x00.
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr)
.................... {
....................    unsigned int i;
.................... 
....................    which <<= 3;
....................    which &= 0x38;
.................... 
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address
.................... 
....................    for(i=0; i<8; i++)
....................    {
....................       lcd_send_byte(1, *ptr++);
....................    }
....................   
....................    #if defined(LCD_EXTENDED_NEWLINE)
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address
....................    #endif
.................... }
.................... 
.................... void lcd_cursor_on(int1 on)
.................... {
....................    if (on)
....................    {
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON
....................    }
....................    else
....................    {
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF
....................    }
.................... }
.................... 
.................... #endif
.................... 
.................... 
.................... #define RUN pin_b0
.................... #define STOP pin_b1
.................... 
.................... int8 mode =0;                
.................... unsigned int8 product=0;
.................... unsigned int16 box=0;
....................                      
....................   
.................... void hienthiLCD()
.................... {
....................    lcd_gotoxy(1,1);
*
0163:  MOVLW  01
0164:  MOVWF  31
0165:  MOVWF  32
0166:  CALL   0BA
....................    printf(lcd_putc,"P=%02u",product);
0167:  MOVLW  50
0168:  MOVWF  30
0169:  CALL   0CC
016A:  MOVLW  3D
016B:  MOVWF  30
016C:  CALL   0CC
016D:  MOVF   21,W
016E:  MOVWF  27
016F:  MOVLW  01
0170:  MOVWF  28
....................    
....................    lcd_gotoxy(1,2);
*
01A4:  MOVLW  01
01A5:  MOVWF  31
01A6:  MOVLW  02
01A7:  MOVWF  32
01A8:  CALL   0BA
....................    printf(lcd_putc,"Box=%05Lu", box);
01A9:  MOVLW  04
01AA:  BSF    03.6
01AB:  MOVWF  0D
01AC:  MOVLW  00
01AD:  MOVWF  0F
01AE:  BCF    03.0
01AF:  MOVLW  04
01B0:  BCF    03.6
01B1:  MOVWF  27
*
0208:  MOVLW  08
0209:  MOVWF  04
020A:  MOVF   23,W
020B:  MOVWF  28
020C:  MOVF   22,W
020D:  MOVWF  27
....................     
....................    lcd_gotoxy(10,1); 
*
0270:  MOVLW  0A
0271:  MOVWF  31
0272:  MOVLW  01
0273:  MOVWF  32
0274:  CALL   0BA
....................    if(mode==1) {
0275:  DECFSZ 20,W
0276:  GOTO   27F
....................       lcd_putc("RUN  ");
0277:  MOVLW  09
0278:  BSF    03.6
0279:  MOVWF  0D
027A:  MOVLW  00
027B:  MOVWF  0F
027C:  BCF    03.6
027D:  CALL   10D
....................    } else if (mode==2){
027E:  GOTO   2A5
027F:  MOVF   20,W
0280:  SUBLW  02
0281:  BTFSS  03.2
0282:  GOTO   29E
....................       lcd_putc("STOP"); 
0283:  MOVLW  0C
0284:  BSF    03.6
0285:  MOVWF  0D
0286:  MOVLW  00
0287:  MOVWF  0F
0288:  BCF    03.6
0289:  CALL   10D
....................       if (box==50) {
028A:  MOVF   22,W
028B:  SUBLW  32
028C:  BTFSS  03.2
028D:  GOTO   29D
028E:  MOVF   23,F
028F:  BTFSS  03.2
0290:  GOTO   29D
....................            lcd_gotoxy(10,2);
0291:  MOVLW  0A
0292:  MOVWF  31
0293:  MOVLW  02
0294:  MOVWF  32
0295:  CALL   0BA
....................            lcd_putc("FULL ");
0296:  MOVLW  0F
0297:  BSF    03.6
0298:  MOVWF  0D
0299:  MOVLW  00
029A:  MOVWF  0F
029B:  BCF    03.6
029C:  CALL   10D
....................       }
....................    } else {
029D:  GOTO   2A5
....................       lcd_putc("RESET");
029E:  MOVLW  12
029F:  BSF    03.6
02A0:  MOVWF  0D
02A1:  MOVLW  00
02A2:  MOVWF  0F
02A3:  BCF    03.6
02A4:  CALL   10D
....................    }  
02A5:  BCF    0A.3
02A6:  BCF    0A.4
02A7:  GOTO   30D (RETURN)
....................    
....................     
....................    
.................... }
.................... 
.................... 
.................... void main()
02A8:  MOVF   03,W
02A9:  ANDLW  1F
02AA:  MOVWF  03
02AB:  MOVLW  71
02AC:  BSF    03.5
02AD:  MOVWF  0F
02AE:  CLRF   10
02AF:  MOVF   0F,W
02B0:  BCF    03.5
02B1:  CLRF   20
02B2:  CLRF   21
02B3:  CLRF   23
02B4:  CLRF   22
02B5:  CLRF   25
02B6:  CLRF   24
02B7:  MOVLW  FF
02B8:  MOVWF  26
02B9:  BSF    03.5
02BA:  BSF    03.6
02BB:  MOVF   09,W
02BC:  ANDLW  C0
02BD:  MOVWF  09
02BE:  BCF    03.6
02BF:  BCF    1F.4
02C0:  BCF    1F.5
02C1:  MOVLW  00
02C2:  BSF    03.6
02C3:  MOVWF  08
02C4:  BCF    03.5
02C5:  CLRF   07
02C6:  CLRF   08
02C7:  CLRF   09
02C8:  BCF    03.7
.................... {
....................    set_tris_a(0xff);
02C9:  MOVLW  FF
02CA:  BSF    03.5
02CB:  BCF    03.6
02CC:  MOVWF  05
....................    set_tris_b(0b00000011);
02CD:  MOVLW  03
02CE:  MOVWF  06
....................    set_tris_c(0);
02CF:  MOVLW  00
02D0:  MOVWF  07
02D1:  BCF    03.5
02D2:  MOVWF  26
....................    set_tris_d(0);
02D3:  BSF    03.5
02D4:  MOVWF  08
....................    
....................    
....................    lcd_init();                            
02D5:  BCF    03.5
02D6:  GOTO   07C
....................    setup_timer_1(t1_div_by_1);
02D7:  CLRF   10
....................    set_timer1(0);
02D8:  CLRF   0E
02D9:  CLRF   0F
02DA:  CLRF   0E
02DB:  NOP
....................                                       
....................    while(true)
....................    {
....................       if(input(RUN)==0)
02DC:  BSF    03.5
02DD:  BSF    06.0
02DE:  BCF    03.5
02DF:  BTFSC  06.0
02E0:  GOTO   2E6
....................       {
....................          mode=1;
02E1:  MOVLW  01
02E2:  MOVWF  20
....................          setup_timer_1(t1_external); //bat timer 1
02E3:  MOVLW  07
02E4:  MOVWF  10
....................       } else if(input(STOP)==0) {
02E5:  GOTO   2EE
02E6:  BSF    03.5
02E7:  BSF    06.1
02E8:  BCF    03.5
02E9:  BTFSC  06.1
02EA:  GOTO   2EE
....................          mode=2;
02EB:  MOVLW  02
02EC:  MOVWF  20
....................          setup_timer_1(t1_disabled);   //tat timer 1                                    
02ED:  CLRF   10
....................       }                                 
....................       
....................       if(mode!=0)
02EE:  MOVF   20,F
02EF:  BTFSC  03.2
02F0:  GOTO   30C
....................       {
....................          product=get_timer1();
02F1:  MOVF   0F,W
02F2:  MOVWF  7A
02F3:  MOVF   0E,W
02F4:  MOVWF  77
02F5:  MOVF   0F,W
02F6:  SUBWF  7A,W
02F7:  BTFSS  03.2
02F8:  GOTO   2F1
02F9:  MOVF   77,W
02FA:  MOVWF  21
....................          if (product == 50) box++;
02FB:  MOVF   21,W
02FC:  SUBLW  32
02FD:  BTFSS  03.2
02FE:  GOTO   302
02FF:  INCF   22,F
0300:  BTFSC  03.2
0301:  INCF   23,F
....................          if (box==50) 
0302:  MOVF   22,W
0303:  SUBLW  32
0304:  BTFSS  03.2
0305:  GOTO   30C
0306:  MOVF   23,F
0307:  BTFSS  03.2
0308:  GOTO   30C
....................          {     
....................             setup_timer_1(t1_disabled);   //tat timer 1  
0309:  CLRF   10
....................             mode = 2; 
030A:  MOVLW  02
030B:  MOVWF  20
....................          }            
....................       }
....................       
....................       hienthiLCD();
030C:  GOTO   163
030D:  GOTO   2DC
....................          
....................    }
....................    
.................... }    
.................... 
030E:  SLEEP

Configuration Fuses:
   Word  1: 2FE5   INTRC NOWDT PUT MCLR NOPROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
