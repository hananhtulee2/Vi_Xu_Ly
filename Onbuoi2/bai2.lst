CCS PCM C Compiler, Version 5.109, 43599               23-May-23 16:39

               Filename:   E:\PIC 16F887\Code\Onbuoi2\bai2.lst

               ROM used:   1295 words (16%)
                           Largest free fragment is 2048
               RAM used:   16 (4%) at main() level
                           33 (9%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  03
0001:  MOVWF  0A
0002:  GOTO   36C
0003:  NOP
.................... #include <16f887.h>  
.................... //////////// Standard Header file for the PIC16F887 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F887
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  C0
0009:  RETLW  F9
000A:  RETLW  A4
000B:  RETLW  B0
000C:  RETLW  99
000D:  RETLW  92
000E:  RETLW  82
000F:  RETLW  F8
0010:  RETLW  80
0011:  RETLW  90
0012:  DATA C2,37
0013:  DATA F8,1E
0014:  DATA 25,18
0015:  DATA 35,26
0016:  DATA 75,00
0017:  DATA 41,26
0018:  DATA 41,29
0019:  DATA 4D,00
001A:  DATA 20,10
001B:  DATA 20,10
001C:  DATA 20,00
001D:  DATA D2,2A
001E:  DATA 4E,10
001F:  DATA 00,01
0020:  DATA 53,2A
0021:  DATA 4F,28
0022:  DATA 00,00
*
00C8:  MOVLW  8E
00C9:  MOVWF  77
00CA:  MOVF   2C,W
00CB:  MOVWF  78
00CC:  MOVF   2B,W
00CD:  MOVWF  79
00CE:  CLRF   7A
00CF:  MOVF   78,F
00D0:  BTFSS  03.2
00D1:  GOTO   0DC
00D2:  MOVF   79,W
00D3:  MOVWF  78
00D4:  CLRF   79
00D5:  MOVLW  08
00D6:  SUBWF  77,F
00D7:  MOVF   78,F
00D8:  BTFSS  03.2
00D9:  GOTO   0DC
00DA:  CLRF   77
00DB:  GOTO   0E4
00DC:  BCF    03.0
00DD:  BTFSC  78.7
00DE:  GOTO   0E3
00DF:  RLF    79,F
00E0:  RLF    78,F
00E1:  DECF   77,F
00E2:  GOTO   0DC
00E3:  BCF    78.7
00E4:  RETURN
00E5:  MOVF   2B,W
00E6:  BTFSC  03.2
00E7:  GOTO   1AA
00E8:  MOVWF  37
00E9:  MOVF   2F,W
00EA:  BTFSC  03.2
00EB:  GOTO   1AA
00EC:  SUBWF  37,F
00ED:  BTFSS  03.0
00EE:  GOTO   0F4
00EF:  MOVLW  7F
00F0:  ADDWF  37,F
00F1:  BTFSC  03.0
00F2:  GOTO   1AA
00F3:  GOTO   0FA
00F4:  MOVLW  81
00F5:  SUBWF  37,F
00F6:  BTFSS  03.0
00F7:  GOTO   1AA
00F8:  BTFSC  03.2
00F9:  GOTO   1AA
00FA:  MOVF   37,W
00FB:  MOVWF  77
00FC:  CLRF   78
00FD:  CLRF   79
00FE:  CLRF   7A
00FF:  CLRF   36
0100:  MOVF   2C,W
0101:  MOVWF  35
0102:  BSF    35.7
0103:  MOVF   2D,W
0104:  MOVWF  34
0105:  MOVF   2E,W
0106:  MOVWF  33
0107:  MOVLW  19
0108:  MOVWF  37
0109:  MOVF   32,W
010A:  SUBWF  33,F
010B:  BTFSC  03.0
010C:  GOTO   11D
010D:  MOVLW  01
010E:  SUBWF  34,F
010F:  BTFSC  03.0
0110:  GOTO   11D
0111:  SUBWF  35,F
0112:  BTFSC  03.0
0113:  GOTO   11D
0114:  SUBWF  36,F
0115:  BTFSC  03.0
0116:  GOTO   11D
0117:  INCF   36,F
0118:  INCF   35,F
0119:  INCF   34,F
011A:  MOVF   32,W
011B:  ADDWF  33,F
011C:  GOTO   14F
011D:  MOVF   31,W
011E:  SUBWF  34,F
011F:  BTFSC  03.0
0120:  GOTO   138
0121:  MOVLW  01
0122:  SUBWF  35,F
0123:  BTFSC  03.0
0124:  GOTO   138
0125:  SUBWF  36,F
0126:  BTFSC  03.0
0127:  GOTO   138
0128:  INCF   36,F
0129:  INCF   35,F
012A:  MOVF   31,W
012B:  ADDWF  34,F
012C:  MOVF   32,W
012D:  ADDWF  33,F
012E:  BTFSS  03.0
012F:  GOTO   14F
0130:  INCF   34,F
0131:  BTFSS  03.2
0132:  GOTO   14F
0133:  INCF   35,F
0134:  BTFSS  03.2
0135:  GOTO   14F
0136:  INCF   36,F
0137:  GOTO   14F
0138:  MOVF   30,W
0139:  IORLW  80
013A:  SUBWF  35,F
013B:  BTFSC  03.0
013C:  GOTO   14E
013D:  MOVLW  01
013E:  SUBWF  36,F
013F:  BTFSC  03.0
0140:  GOTO   14E
0141:  INCF   36,F
0142:  MOVF   30,W
0143:  IORLW  80
0144:  ADDWF  35,F
0145:  MOVF   31,W
0146:  ADDWF  34,F
0147:  BTFSS  03.0
0148:  GOTO   12C
0149:  INCF   35,F
014A:  BTFSS  03.2
014B:  GOTO   12C
014C:  INCF   36,F
014D:  GOTO   12C
014E:  BSF    7A.0
014F:  DECFSZ 37,F
0150:  GOTO   152
0151:  GOTO   15D
0152:  BCF    03.0
0153:  RLF    33,F
0154:  RLF    34,F
0155:  RLF    35,F
0156:  RLF    36,F
0157:  BCF    03.0
0158:  RLF    7A,F
0159:  RLF    79,F
015A:  RLF    78,F
015B:  RLF    38,F
015C:  GOTO   109
015D:  BTFSS  38.0
015E:  GOTO   165
015F:  BCF    03.0
0160:  RRF    78,F
0161:  RRF    79,F
0162:  RRF    7A,F
0163:  RRF    38,F
0164:  GOTO   168
0165:  DECF   77,F
0166:  BTFSC  03.2
0167:  GOTO   1AA
0168:  BTFSC  38.7
0169:  GOTO   191
016A:  BCF    03.0
016B:  RLF    33,F
016C:  RLF    34,F
016D:  RLF    35,F
016E:  RLF    36,F
016F:  MOVF   32,W
0170:  SUBWF  33,F
0171:  BTFSC  03.0
0172:  GOTO   17D
0173:  MOVLW  01
0174:  SUBWF  34,F
0175:  BTFSC  03.0
0176:  GOTO   17D
0177:  SUBWF  35,F
0178:  BTFSC  03.0
0179:  GOTO   17D
017A:  SUBWF  36,F
017B:  BTFSS  03.0
017C:  GOTO   1A0
017D:  MOVF   31,W
017E:  SUBWF  34,F
017F:  BTFSC  03.0
0180:  GOTO   188
0181:  MOVLW  01
0182:  SUBWF  35,F
0183:  BTFSC  03.0
0184:  GOTO   188
0185:  SUBWF  36,F
0186:  BTFSS  03.0
0187:  GOTO   1A0
0188:  MOVF   30,W
0189:  IORLW  80
018A:  SUBWF  35,F
018B:  BTFSC  03.0
018C:  GOTO   191
018D:  MOVLW  01
018E:  SUBWF  36,F
018F:  BTFSS  03.0
0190:  GOTO   1A0
0191:  INCF   7A,F
0192:  BTFSS  03.2
0193:  GOTO   1A0
0194:  INCF   79,F
0195:  BTFSS  03.2
0196:  GOTO   1A0
0197:  INCF   78,F
0198:  BTFSS  03.2
0199:  GOTO   1A0
019A:  INCF   77,F
019B:  BTFSC  03.2
019C:  GOTO   1AA
019D:  RRF    78,F
019E:  RRF    79,F
019F:  RRF    7A,F
01A0:  MOVF   2C,W
01A1:  MOVWF  37
01A2:  MOVF   30,W
01A3:  XORWF  37,F
01A4:  BTFSS  37.7
01A5:  GOTO   1A8
01A6:  BSF    78.7
01A7:  GOTO   1AE
01A8:  BCF    78.7
01A9:  GOTO   1AE
01AA:  CLRF   77
01AB:  CLRF   78
01AC:  CLRF   79
01AD:  CLRF   7A
01AE:  RETURN
01AF:  MOVLW  8E
01B0:  MOVWF  77
01B1:  MOVF   29,W
01B2:  SUBWF  77,F
01B3:  MOVF   2A,W
01B4:  MOVWF  79
01B5:  MOVF   2B,W
01B6:  MOVWF  78
01B7:  BSF    79.7
01B8:  MOVF   77,F
01B9:  BTFSC  03.2
01BA:  GOTO   1C6
01BB:  BCF    03.0
01BC:  MOVF   79,F
01BD:  BTFSS  03.2
01BE:  GOTO   1C2
01BF:  MOVF   78,F
01C0:  BTFSC  03.2
01C1:  GOTO   1C6
01C2:  RRF    79,F
01C3:  RRF    78,F
01C4:  DECFSZ 77,F
01C5:  GOTO   1BB
01C6:  BTFSS  2A.7
01C7:  GOTO   1CD
01C8:  COMF   78,F
01C9:  COMF   79,F
01CA:  INCF   78,F
01CB:  BTFSC  03.2
01CC:  INCF   79,F
01CD:  RETURN
01CE:  MOVF   2C,W
01CF:  CLRF   78
01D0:  SUBWF  2B,W
01D1:  BTFSC  03.0
01D2:  GOTO   1D6
01D3:  MOVF   2B,W
01D4:  MOVWF  77
01D5:  GOTO   1E2
01D6:  CLRF   77
01D7:  MOVLW  08
01D8:  MOVWF  2D
01D9:  RLF    2B,F
01DA:  RLF    77,F
01DB:  MOVF   2C,W
01DC:  SUBWF  77,W
01DD:  BTFSC  03.0
01DE:  MOVWF  77
01DF:  RLF    78,F
01E0:  DECFSZ 2D,F
01E1:  GOTO   1D9
01E2:  RETURN
*
0221:  MOVF   78,W
0222:  MOVF   29,W
0223:  MOVWF  2B
0224:  MOVLW  64
0225:  MOVWF  2C
0226:  CALL   1CE
0227:  MOVF   77,W
0228:  MOVWF  29
0229:  MOVF   78,W
022A:  MOVLW  30
022B:  BTFSS  03.2
022C:  GOTO   234
022D:  BTFSS  2A.1
022E:  GOTO   23B
022F:  BTFSC  2A.3
0230:  GOTO   23B
0231:  BTFSC  2A.4
0232:  MOVLW  20
0233:  GOTO   237
0234:  BCF    2A.3
0235:  BCF    2A.4
0236:  BSF    2A.0
0237:  ADDWF  78,F
0238:  MOVF   78,W
0239:  MOVWF  32
023A:  CALL   1F5
023B:  MOVF   29,W
023C:  MOVWF  2B
023D:  MOVLW  0A
023E:  MOVWF  2C
023F:  CALL   1CE
0240:  MOVF   77,W
0241:  MOVWF  29
0242:  MOVF   78,W
0243:  MOVLW  30
0244:  BTFSS  03.2
0245:  GOTO   24C
0246:  BTFSC  2A.3
0247:  GOTO   250
0248:  BTFSS  2A.0
0249:  GOTO   250
024A:  BTFSC  2A.4
024B:  MOVLW  20
024C:  ADDWF  78,F
024D:  MOVF   78,W
024E:  MOVWF  32
024F:  CALL   1F5
0250:  MOVLW  30
0251:  ADDWF  29,F
0252:  MOVF   29,W
0253:  MOVWF  32
0254:  CALL   1F5
0255:  BCF    0A.3
0256:  BCF    0A.4
0257:  GOTO   4C6 (RETURN)
0258:  MOVF   0B,W
0259:  MOVWF  2A
025A:  BCF    0B.7
025B:  BSF    03.5
025C:  BSF    03.6
025D:  BSF    0C.7
025E:  BSF    0C.0
025F:  NOP
0260:  NOP
0261:  BCF    03.5
0262:  BCF    03.6
0263:  BTFSC  2A.7
0264:  BSF    0B.7
0265:  BTFSC  03.0
0266:  GOTO   28F
0267:  BSF    03.6
0268:  MOVF   0C,W
0269:  ANDLW  7F
026A:  BCF    03.6
026B:  MOVWF  2A
026C:  BSF    03.6
026D:  MOVF   0D,W
026E:  BCF    03.6
026F:  MOVWF  2B
0270:  BSF    03.6
0271:  MOVF   0F,W
0272:  BCF    03.6
0273:  MOVWF  2C
0274:  MOVF   2A,W
0275:  MOVWF  32
0276:  CALL   1F5
0277:  MOVF   2B,W
0278:  BSF    03.6
0279:  MOVWF  0D
027A:  BCF    03.6
027B:  MOVF   2C,W
027C:  BSF    03.6
027D:  MOVWF  0F
027E:  BCF    03.6
027F:  MOVF   0B,W
0280:  MOVWF  2D
0281:  BCF    0B.7
0282:  BSF    03.5
0283:  BSF    03.6
0284:  BSF    0C.7
0285:  BSF    0C.0
0286:  NOP
0287:  NOP
0288:  BCF    03.5
0289:  BCF    03.6
028A:  BTFSC  2D.7
028B:  BSF    0B.7
028C:  DECFSZ 29,F
028D:  GOTO   28F
028E:  GOTO   2AE
028F:  BSF    03.6
0290:  RLF    0C,W
0291:  RLF    0E,W
0292:  ANDLW  7F
0293:  BCF    03.6
0294:  MOVWF  2A
0295:  BSF    03.6
0296:  MOVF   0D,W
0297:  BCF    03.6
0298:  MOVWF  2B
0299:  BSF    03.6
029A:  MOVF   0F,W
029B:  BCF    03.6
029C:  MOVWF  2C
029D:  MOVF   2A,W
029E:  MOVWF  32
029F:  CALL   1F5
02A0:  MOVF   2B,W
02A1:  BSF    03.6
02A2:  MOVWF  0D
02A3:  BCF    03.6
02A4:  MOVF   2C,W
02A5:  BSF    03.6
02A6:  MOVWF  0F
02A7:  INCF   0D,F
02A8:  BTFSC  03.2
02A9:  INCF   0F,F
02AA:  BCF    03.0
02AB:  BCF    03.6
02AC:  DECFSZ 29,F
02AD:  GOTO   258
02AE:  BCF    0A.3
02AF:  BCF    0A.4
02B0:  GOTO   4D5 (RETURN)
02B1:  CLRF   31
02B2:  MOVF   04,W
02B3:  MOVWF  30
02B4:  BCF    31.0
02B5:  BTFSC  03.7
02B6:  BSF    31.0
02B7:  SWAPF  2A,W
02B8:  IORLW  F0
02B9:  MOVWF  2C
02BA:  ADDWF  2C,F
02BB:  ADDLW  E2
02BC:  MOVWF  2D
02BD:  ADDLW  32
02BE:  MOVWF  2F
02BF:  MOVF   2A,W
02C0:  ANDLW  0F
02C1:  ADDWF  2D,F
02C2:  ADDWF  2D,F
02C3:  ADDWF  2F,F
02C4:  ADDLW  E9
02C5:  MOVWF  2E
02C6:  ADDWF  2E,F
02C7:  ADDWF  2E,F
02C8:  SWAPF  29,W
02C9:  ANDLW  0F
02CA:  ADDWF  2E,F
02CB:  ADDWF  2F,F
02CC:  RLF    2E,F
02CD:  RLF    2F,F
02CE:  COMF   2F,F
02CF:  RLF    2F,F
02D0:  MOVF   29,W
02D1:  ANDLW  0F
02D2:  ADDWF  2F,F
02D3:  RLF    2C,F
02D4:  MOVLW  07
02D5:  MOVWF  2B
02D6:  MOVLW  0A
02D7:  ADDWF  2F,F
02D8:  DECF   2E,F
02D9:  BTFSS  03.0
02DA:  GOTO   2D7
02DB:  ADDWF  2E,F
02DC:  DECF   2D,F
02DD:  BTFSS  03.0
02DE:  GOTO   2DB
02DF:  ADDWF  2D,F
02E0:  DECF   2C,F
02E1:  BTFSS  03.0
02E2:  GOTO   2DF
02E3:  ADDWF  2C,F
02E4:  DECF   2B,F
02E5:  BTFSS  03.0
02E6:  GOTO   2E3
02E7:  MOVLW  2B
02E8:  MOVWF  04
02E9:  BCF    03.7
02EA:  MOVLW  07
02EB:  ANDWF  30,W
02EC:  BCF    30.6
02ED:  ADDWF  04,F
02EE:  MOVLW  2F
02EF:  SUBWF  04,W
02F0:  BTFSC  03.2
02F1:  BSF    30.6
02F2:  MOVF   00,W
02F3:  MOVWF  77
02F4:  BTFSS  03.2
02F5:  GOTO   2FE
02F6:  BTFSC  30.6
02F7:  GOTO   2FE
02F8:  BTFSC  30.4
02F9:  GOTO   310
02FA:  BTFSC  30.3
02FB:  GOTO   2FE
02FC:  MOVLW  20
02FD:  GOTO   301
02FE:  BSF    30.3
02FF:  BCF    30.4
0300:  MOVLW  30
0301:  ADDWF  77,F
0302:  CLRF   2A
0303:  MOVF   04,W
0304:  MOVWF  29
0305:  BCF    2A.0
0306:  BTFSC  03.7
0307:  BSF    2A.0
0308:  MOVF   77,W
0309:  MOVWF  32
030A:  CALL   1F5
030B:  MOVF   29,W
030C:  MOVWF  04
030D:  BCF    03.7
030E:  BTFSC  2A.0
030F:  BSF    03.7
0310:  INCF   04,F
0311:  BTFSS  30.6
0312:  GOTO   2EE
0313:  BCF    0A.3
0314:  BCF    0A.4
0315:  GOTO   4DC (RETURN)
0316:  MOVF   0B,W
0317:  MOVWF  29
0318:  BCF    0B.7
0319:  BSF    03.5
031A:  BSF    03.6
031B:  BSF    0C.7
031C:  BSF    0C.0
031D:  NOP
031E:  NOP
031F:  BCF    03.5
0320:  BCF    03.6
0321:  BTFSC  29.7
0322:  BSF    0B.7
0323:  BSF    03.6
0324:  MOVF   0C,W
0325:  ANDLW  7F
0326:  BTFSC  03.2
0327:  GOTO   36A
0328:  BCF    03.6
0329:  MOVWF  29
032A:  BSF    03.6
032B:  MOVF   0D,W
032C:  BCF    03.6
032D:  MOVWF  2A
032E:  BSF    03.6
032F:  MOVF   0F,W
0330:  BCF    03.6
0331:  MOVWF  2B
0332:  MOVF   29,W
0333:  MOVWF  32
0334:  CALL   1F5
0335:  MOVF   2A,W
0336:  BSF    03.6
0337:  MOVWF  0D
0338:  BCF    03.6
0339:  MOVF   2B,W
033A:  BSF    03.6
033B:  MOVWF  0F
033C:  BCF    03.6
033D:  MOVF   0B,W
033E:  MOVWF  2C
033F:  BCF    0B.7
0340:  BSF    03.5
0341:  BSF    03.6
0342:  BSF    0C.7
0343:  BSF    0C.0
0344:  NOP
0345:  NOP
0346:  BCF    03.5
0347:  BCF    03.6
0348:  BTFSC  2C.7
0349:  BSF    0B.7
034A:  BSF    03.6
034B:  RLF    0C,W
034C:  RLF    0E,W
034D:  ANDLW  7F
034E:  BTFSC  03.2
034F:  GOTO   36A
0350:  BCF    03.6
0351:  MOVWF  29
0352:  BSF    03.6
0353:  MOVF   0D,W
0354:  BCF    03.6
0355:  MOVWF  2A
0356:  BSF    03.6
0357:  MOVF   0F,W
0358:  BCF    03.6
0359:  MOVWF  2B
035A:  MOVF   29,W
035B:  MOVWF  32
035C:  CALL   1F5
035D:  MOVF   2A,W
035E:  BSF    03.6
035F:  MOVWF  0D
0360:  BCF    03.6
0361:  MOVF   2B,W
0362:  BSF    03.6
0363:  MOVWF  0F
0364:  INCF   0D,F
0365:  BTFSC  03.2
0366:  INCF   0F,F
0367:  BCF    03.6
0368:  GOTO   316
0369:  BSF    03.6
036A:  BCF    03.6
036B:  RETURN
.................... 
.................... #list
.................... 
.................... #device adc=10
.................... #fuses intrc
.................... #use delay(clock=8M)
*
0023:  MOVLW  33
0024:  MOVWF  04
0025:  BCF    03.7
0026:  MOVF   00,W
0027:  BTFSC  03.2
0028:  GOTO   036
0029:  MOVLW  02
002A:  MOVWF  78
002B:  CLRF   77
002C:  DECFSZ 77,F
002D:  GOTO   02C
002E:  DECFSZ 78,F
002F:  GOTO   02B
0030:  MOVLW  97
0031:  MOVWF  77
0032:  DECFSZ 77,F
0033:  GOTO   032
0034:  DECFSZ 00,F
0035:  GOTO   029
0036:  RETURN
.................... #include <lcd.c>
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////                             LCD.C                                     ////
.................... ////                 Driver for common LCD modules                         ////
.................... ////                                                                       ////
.................... ////  lcd_init()   Must be called before any other function.               ////
.................... ////                                                                       ////
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         ////
.................... ////                 \a  Set cursor position to upper left                 ////
.................... ////                 \f  Clear display, set cursor to upper left           ////
.................... ////                 \n  Go to start of second line                        ////
.................... ////                 \b  Move back one position                            ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     ////
.................... ////              will erase all remanining characters on the current      ////
.................... ////              line, and move the cursor to the beginning of the next   ////
.................... ////              line.                                                    ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     ////
.................... ////              will move the cursor to the start of the current         ////
.................... ////              line.                                                    ////
.................... ////                                                                       ////
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        ////
.................... ////                                                                       ////
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             ////
.................... ////                                                                       ////
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         ////
.................... ////              (on=FALSE).                                              ////
.................... ////                                                                       ////
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   ////
.................... ////                                                                       ////
.................... ////                                                                       ////
.................... ////  CONFIGURATION                                                        ////
.................... ////  The LCD can be configured in one of two ways: a.) port access or     ////
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     ////
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     ////
.................... ////  connected to sequential pins on the GPIO.  Pin access                ////
.................... ////  has no requirements, all 7 bits of the control interface can         ////
.................... ////  can be connected to any GPIO using several ports.                    ////
.................... ////                                                                       ////
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     ////
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    ////
.................... ////  of this file to configure the pin order.  If you are using a         ////
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  ////
.................... ////  be defined.                                                          ////
.................... ////                                                                       ////
.................... ////  Example of port access:                                              ////
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         ////
.................... ////                                                                       ////
.................... ////  To use pin access, the following pins must be defined:               ////
.................... ////     LCD_ENABLE_PIN                                                    ////
.................... ////     LCD_RS_PIN                                                        ////
.................... ////     LCD_RW_PIN                                                        ////
.................... ////     LCD_DATA4                                                         ////
.................... ////     LCD_DATA5                                                         ////
.................... ////     LCD_DATA6                                                         ////
.................... ////     LCD_DATA7                                                         ////
.................... ////                                                                       ////
.................... ////  Example of pin access:                                               ////
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    ////
.................... ////     #define LCD_RS_PIN      PIN_E1                                    ////
.................... ////     #define LCD_RW_PIN      PIN_E2                                    ////
.................... ////     #define LCD_DATA4       PIN_D4                                    ////
.................... ////     #define LCD_DATA5       PIN_D5                                    ////
.................... ////     #define LCD_DATA6       PIN_D6                                    ////
.................... ////     #define LCD_DATA7       PIN_D7                                    ////
.................... ////                                                                       ////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef __LCD_C__
.................... #define __LCD_C__
.................... 
.................... // define the pinout.
.................... // only required if port access is being used.
.................... typedef struct  
.................... {                            // This structure is overlayed
....................    int1 enable;           // on to an I/O port to gain
....................    int1 rs;               // access to the LCD pins.
....................    int1 rw;               // The bits are allocated from
....................    int1 unused;           // low order up.  ENABLE will
....................    unsigned int     data : 4;         // be LSB pin of that port.
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT.
....................    unsigned int    reserved: 8;
....................   #endif
.................... } LCD_PIN_MAP;
.................... 
.................... // this is to improve compatability with previous LCD drivers that accepted
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B.
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE))
....................  #define LCD_DATA_PORT getenv("SFR:PORTB")
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    // these definitions only need to be modified for baseline PICs.
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions.
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0};
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF};
.................... #endif
.................... 
.................... ////////////////////// END CONFIGURATION ///////////////////////////////////
.................... 
.................... #ifndef LCD_ENABLE_PIN
....................    #define lcd_output_enable(x) lcdlat.enable=x
....................    #define lcd_enable_tris()   lcdtris.enable=0
.................... #else
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x)
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RS_PIN
....................    #define lcd_output_rs(x) lcdlat.rs=x
....................    #define lcd_rs_tris()   lcdtris.rs=0
.................... #else
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x)
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RW_PIN
....................    #define lcd_output_rw(x) lcdlat.rw=x
....................    #define lcd_rw_tris()   lcdtris.rw=0
.................... #else
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x)
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN)
.................... #endif
.................... 
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4,
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver
.................... // compatible with any code written for the original library
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7))
....................    #define  LCD_DATA4    LCD_DATA0
....................    #define  LCD_DATA5    LCD_DATA1
....................    #define  LCD_DATA6    LCD_DATA2
....................    #define  LCD_DATA7    LCD_DATA3
.................... #endif
.................... 
.................... #ifndef LCD_DATA4
.................... #ifndef LCD_DATA_PORT
....................    #if defined(__PCB__)
....................       #define LCD_DATA_PORT      0x06     //portb
....................       #define set_tris_lcd(x)   set_tris_b(x)
....................    #else
....................      #if defined(PIN_D0)
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd
....................      #else
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb
....................      #endif
....................    #endif   
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    LCD_PIN_MAP lcd, lcdlat;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
.................... #elif defined(__PCM__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
....................    #byte lcdtris = LCD_DATA_PORT+0x80
.................... #elif defined(__PCH__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT+9
....................    #byte lcdtris = LCD_DATA_PORT+0x12
.................... #elif defined(__PCD__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #word lcd = LCD_DATA_PORT
....................    #word lcdlat = LCD_DATA_PORT+2
....................    #word lcdtris = LCD_DATA_PORT-0x02
.................... #endif
.................... #endif   //LCD_DATA4 not defined
.................... 
.................... #ifndef LCD_TYPE
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines
.................... #endif
.................... 
.................... #ifndef LCD_LINE_TWO
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line
.................... #endif
.................... 
.................... #ifndef LCD_LINE_LENGTH
....................    #define LCD_LINE_LENGTH 20
.................... #endif
.................... 
.................... unsigned int8 lcd_read_nibble(void);
.................... 
.................... unsigned int8 lcd_read_byte(void)
.................... {
....................    unsigned int8 low,high;
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_INPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_float(LCD_DATA4);
....................    output_float(LCD_DATA5);
....................    output_float(LCD_DATA6);
....................    output_float(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0xF;
*
0050:  MOVLW  0F
0051:  BSF    03.5
0052:  ANDWF  08,W
0053:  IORLW  F0
0054:  MOVWF  08
....................   #endif
....................  #endif
....................         
....................    lcd_output_rw(1);
0055:  BCF    03.5
0056:  BSF    08.2
....................    delay_cycles(1);
0057:  NOP
....................    lcd_output_enable(1);
0058:  BSF    08.0
....................    delay_cycles(1);
0059:  NOP
....................    high = lcd_read_nibble();
005A:  CALL   044
005B:  MOVF   78,W
005C:  MOVWF  3A
....................       
....................    lcd_output_enable(0);
005D:  BCF    08.0
....................    delay_cycles(1);
005E:  NOP
....................    lcd_output_enable(1);
005F:  BSF    08.0
....................    delay_us(1);
0060:  GOTO   061
....................    low = lcd_read_nibble();
0061:  CALL   044
0062:  MOVF   78,W
0063:  MOVWF  39
....................       
....................    lcd_output_enable(0);
0064:  BCF    08.0
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
....................    output_drive(LCD_DATA5);
....................    output_drive(LCD_DATA6);
....................    output_drive(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0x0;
0065:  MOVLW  0F
0066:  BSF    03.5
0067:  ANDWF  08,W
0068:  MOVWF  08
....................   #endif
....................  #endif
.................... 
....................    return( (high<<4) | low);
0069:  BCF    03.5
006A:  SWAPF  3A,W
006B:  MOVWF  77
006C:  MOVLW  F0
006D:  ANDWF  77,F
006E:  MOVF   77,W
006F:  IORWF  39,W
0070:  MOVWF  78
.................... }
.................... 
.................... unsigned int8 lcd_read_nibble(void)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    unsigned int8 n = 0x00;
.................... 
....................    /* Read the data port */
....................    n |= input(LCD_DATA4);
....................    n |= input(LCD_DATA5) << 1;
....................    n |= input(LCD_DATA6) << 2;
....................    n |= input(LCD_DATA7) << 3;
....................    
....................    return(n);
....................   #else
....................    return(lcd.data);
*
0044:  MOVF   08,W
0045:  MOVWF  77
0046:  SWAPF  08,W
0047:  ANDLW  0F
0048:  MOVWF  78
....................   #endif
0049:  RETURN
.................... }
.................... 
.................... void lcd_send_nibble(unsigned int8 n)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    /* Write to the data port */
....................    output_bit(LCD_DATA4, bit_test(n, 0));
....................    output_bit(LCD_DATA5, bit_test(n, 1));
....................    output_bit(LCD_DATA6, bit_test(n, 2));
....................    output_bit(LCD_DATA7, bit_test(n, 3));
....................   #else      
....................    lcdlat.data = n;
*
0037:  SWAPF  3A,W
0038:  ANDLW  F0
0039:  MOVWF  77
003A:  MOVLW  0F
003B:  ANDWF  08,W
003C:  IORWF  77,W
003D:  MOVWF  08
....................   #endif
....................       
....................    delay_cycles(1);
003E:  NOP
....................    lcd_output_enable(1);
003F:  BSF    08.0
....................    delay_us(2);
0040:  GOTO   041
0041:  GOTO   042
....................    lcd_output_enable(0);
0042:  BCF    08.0
0043:  RETURN
.................... }
.................... 
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n)
.................... {
....................   #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................   #else
....................    lcd_enable_tris();
*
004A:  BSF    03.5
004B:  BCF    08.0
....................    lcd_rs_tris();
004C:  BCF    08.1
....................    lcd_rw_tris();
004D:  BCF    08.2
....................   #endif
.................... 
....................    lcd_output_rs(0);
004E:  BCF    03.5
004F:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ;
*
0071:  MOVF   78,W
0072:  MOVWF  39
0073:  BTFSC  39.7
0074:  GOTO   050
....................    lcd_output_rs(address);
0075:  BTFSS  37.0
0076:  BCF    08.1
0077:  BTFSC  37.0
0078:  BSF    08.1
....................    delay_cycles(1);
0079:  NOP
....................    lcd_output_rw(0);
007A:  BCF    08.2
....................    delay_cycles(1);
007B:  NOP
....................    lcd_output_enable(0);
007C:  BCF    08.0
....................    lcd_send_nibble(n >> 4);
007D:  SWAPF  38,W
007E:  MOVWF  39
007F:  MOVLW  0F
0080:  ANDWF  39,F
0081:  MOVF   39,W
0082:  MOVWF  3A
0083:  CALL   037
....................    lcd_send_nibble(n & 0xf);
0084:  MOVF   38,W
0085:  ANDLW  0F
0086:  MOVWF  39
0087:  MOVWF  3A
0088:  CALL   037
0089:  RETURN
.................... }
.................... 
.................... #if defined(LCD_EXTENDED_NEWLINE)
.................... unsigned int8 g_LcdX, g_LcdY;
.................... #endif
.................... 
.................... void lcd_init(void) 
.................... {
....................    unsigned int8 i;
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6};
008A:  MOVLW  28
008B:  MOVWF  2A
008C:  MOVLW  0C
008D:  MOVWF  2B
008E:  MOVLW  01
008F:  MOVWF  2C
0090:  MOVLW  06
0091:  MOVWF  2D
....................                              // These bytes need to be sent to the LCD
....................                              // to start it up.
....................    
.................... 
....................    lcd_output_enable(0);
0092:  BCF    08.0
....................    lcd_output_rs(0);
0093:  BCF    08.1
....................    lcd_output_rw(0);
0094:  BCF    08.2
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
....................    output_drive(LCD_DATA5);
....................    output_drive(LCD_DATA6);
....................    output_drive(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0x0;
0095:  MOVLW  0F
0096:  BSF    03.5
0097:  ANDWF  08,W
0098:  MOVWF  08
....................   #endif
....................    lcd_enable_tris();
0099:  BCF    08.0
....................    lcd_rs_tris();
009A:  BCF    08.1
....................    lcd_rw_tris();
009B:  BCF    08.2
....................  #endif
....................     
....................    delay_ms(15);
009C:  MOVLW  0F
009D:  BCF    03.5
009E:  MOVWF  33
009F:  CALL   023
....................    for(i=1;i<=3;++i)
00A0:  MOVLW  01
00A1:  MOVWF  29
00A2:  MOVF   29,W
00A3:  SUBLW  03
00A4:  BTFSS  03.0
00A5:  GOTO   0AE
....................    {
....................        lcd_send_nibble(3);
00A6:  MOVLW  03
00A7:  MOVWF  3A
00A8:  CALL   037
....................        delay_ms(5);
00A9:  MOVLW  05
00AA:  MOVWF  33
00AB:  CALL   023
00AC:  INCF   29,F
00AD:  GOTO   0A2
....................    }
....................    
....................    lcd_send_nibble(2);
00AE:  MOVLW  02
00AF:  MOVWF  3A
00B0:  CALL   037
....................    delay_ms(5);
00B1:  MOVLW  05
00B2:  MOVWF  33
00B3:  CALL   023
....................    for(i=0;i<=3;++i)
00B4:  CLRF   29
00B5:  MOVF   29,W
00B6:  SUBLW  03
00B7:  BTFSS  03.0
00B8:  GOTO   0C5
....................       lcd_send_byte(0,LCD_INIT_STRING[i]);
00B9:  MOVLW  2A
00BA:  ADDWF  29,W
00BB:  MOVWF  04
00BC:  BCF    03.7
00BD:  MOVF   00,W
00BE:  MOVWF  2E
00BF:  CLRF   37
00C0:  MOVF   2E,W
00C1:  MOVWF  38
00C2:  CALL   04A
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
00C3:  INCF   29,F
00C4:  GOTO   0B5
00C5:  BCF    0A.3
00C6:  BCF    0A.4
00C7:  GOTO   3A1 (RETURN)
....................    g_LcdX = 0;
....................    g_LcdY = 0;
....................   #endif
.................... }
.................... 
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y)
.................... {
....................    unsigned int8 address;
....................    
....................    if(y!=1)
*
01E3:  DECFSZ 34,W
01E4:  GOTO   1E6
01E5:  GOTO   1E9
....................       address=LCD_LINE_TWO;
01E6:  MOVLW  40
01E7:  MOVWF  35
01E8:  GOTO   1EA
....................    else
....................       address=0;
01E9:  CLRF   35
....................      
....................    address+=x-1;
01EA:  MOVLW  01
01EB:  SUBWF  33,W
01EC:  ADDWF  35,F
....................    lcd_send_byte(0,0x80|address);
01ED:  MOVF   35,W
01EE:  IORLW  80
01EF:  MOVWF  36
01F0:  CLRF   37
01F1:  MOVF   36,W
01F2:  MOVWF  38
01F3:  CALL   04A
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
01F4:  RETURN
....................    g_LcdX = x - 1;
....................    g_LcdY = y - 1;
....................   #endif
.................... }
.................... 
.................... void lcd_putc(char c)
.................... {
....................    switch (c)
01F5:  MOVF   32,W
01F6:  XORLW  07
01F7:  BTFSC  03.2
01F8:  GOTO   203
01F9:  XORLW  0B
01FA:  BTFSC  03.2
01FB:  GOTO   208
01FC:  XORLW  06
01FD:  BTFSC  03.2
01FE:  GOTO   210
01FF:  XORLW  02
0200:  BTFSC  03.2
0201:  GOTO   216
0202:  GOTO   21B
....................    {
....................       case '\a'   :  lcd_gotoxy(1,1);     break;
0203:  MOVLW  01
0204:  MOVWF  33
0205:  MOVWF  34
0206:  CALL   1E3
0207:  GOTO   220
.................... 
....................       case '\f'   :  lcd_send_byte(0,1);
0208:  CLRF   37
0209:  MOVLW  01
020A:  MOVWF  38
020B:  CALL   04A
....................                      delay_ms(2);
020C:  MOVLW  02
020D:  MOVWF  33
020E:  CALL   023
....................                     #if defined(LCD_EXTENDED_NEWLINE)
....................                      g_LcdX = 0;
....................                      g_LcdY = 0;
....................                     #endif
....................                      break;
020F:  GOTO   220
.................... 
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break;
....................       case '\n'   :
....................          while (g_LcdX++ < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, ' ');
....................          }
....................          lcd_gotoxy(1, g_LcdY+2);
....................          break;
....................      #else
....................       case '\n'   : lcd_gotoxy(1,2);        break;
0210:  MOVLW  01
0211:  MOVWF  33
0212:  MOVLW  02
0213:  MOVWF  34
0214:  CALL   1E3
0215:  GOTO   220
....................      #endif
....................      
....................       case '\b'   : lcd_send_byte(0,0x10);  break;
0216:  CLRF   37
0217:  MOVLW  10
0218:  MOVWF  38
0219:  CALL   04A
021A:  GOTO   220
....................      
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       default     : 
....................          if (g_LcdX < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, c);
....................             g_LcdX++;
....................          }
....................          break;
....................      #else
....................       default     : lcd_send_byte(1,c);     break;
021B:  MOVLW  01
021C:  MOVWF  37
021D:  MOVF   32,W
021E:  MOVWF  38
021F:  CALL   04A
....................      #endif
....................    }
0220:  RETURN
.................... }
....................  
.................... char lcd_getc(unsigned int8 x, unsigned int8 y)
.................... {
....................    char value;
.................... 
....................    lcd_gotoxy(x,y);
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low
....................    lcd_output_rs(1);
....................    value = lcd_read_byte();
....................    lcd_output_rs(0);
....................    
....................    return(value);
.................... }
.................... 
.................... // write a custom character to the ram
.................... // which is 0-7 and specifies which character array we are modifying.
.................... // ptr points to an array of 8 bytes, where each byte is the next row of
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and
.................... //    usually you will want to leave this byte 0x00.
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr)
.................... {
....................    unsigned int i;
.................... 
....................    which <<= 3;
....................    which &= 0x38;
.................... 
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address
.................... 
....................    for(i=0; i<8; i++)
....................    {
....................       lcd_send_byte(1, *ptr++);
....................    }
....................   
....................    #if defined(LCD_EXTENDED_NEWLINE)
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address
....................    #endif
.................... }
.................... 
.................... void lcd_cursor_on(int1 on)
.................... {
....................    if (on)
....................    {
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON
....................    }
....................    else
....................    {
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF
....................    }
.................... }
.................... 
.................... #endif
.................... 
.................... 
.................... #bit T0IF =0x0b.2      //khai bao co tran timer 1                   
....................                          
.................... const unsigned int8 code7seg[10]={0xc0,0xf9,0xa4,0xb0,0x99,0x92,0x82,0xf8,0x80,0x90};
.................... 
.................... #define RUN    pin_c3  
.................... #define PAUSE   pin_c4
.................... #define pulse pin_e0
.................... 
.................... 
.................... unsigned int8 mode=0;
.................... unsigned int8 temp=0, product=0;
.................... unsigned int16 box=0;
.................... unsigned int8 overcount=0;
....................              
.................... void main()
*
036C:  MOVF   03,W
036D:  ANDLW  1F
036E:  MOVWF  03
036F:  MOVLW  71
0370:  BSF    03.5
0371:  MOVWF  0F
0372:  CLRF   10
0373:  MOVF   0F,W
0374:  BCF    03.5
0375:  CLRF   20
0376:  CLRF   21
0377:  CLRF   22
0378:  CLRF   24
0379:  CLRF   23
037A:  CLRF   25
037B:  MOVLW  FF
037C:  MOVWF  26
037D:  CLRF   28
037E:  CLRF   27
037F:  BSF    03.5
0380:  BSF    03.6
0381:  MOVF   09,W
0382:  ANDLW  C0
0383:  MOVWF  09
0384:  BCF    03.6
0385:  BCF    1F.4
0386:  BCF    1F.5
0387:  MOVLW  00
0388:  BSF    03.6
0389:  MOVWF  08
038A:  BCF    03.5
038B:  CLRF   07
038C:  CLRF   08
038D:  CLRF   09
038E:  BCF    03.7
.................... {
....................     set_tris_a(0x00);
038F:  MOVLW  00
0390:  BSF    03.5
0391:  BCF    03.6
0392:  MOVWF  05
....................     set_tris_b(0);
0393:  MOVWF  06
....................     set_tris_c(0b00011000); //0x18
0394:  MOVLW  18
0395:  MOVWF  07
0396:  BCF    03.5
0397:  MOVWF  26
....................     set_tris_d(0);
0398:  MOVLW  00
0399:  BSF    03.5
039A:  MOVWF  08
....................     set_tris_e(0x04); //0b00000100
039B:  BCF    09.0
039C:  BCF    09.1
039D:  BSF    09.2
039E:  BCF    09.3
....................     
....................     
....................     lcd_init();
039F:  BCF    03.5
03A0:  GOTO   08A
....................     setup_adc(adc_clock_internal);
03A1:  BSF    1F.6
03A2:  BSF    1F.7
03A3:  BSF    03.5
03A4:  BSF    1F.7
03A5:  BCF    03.5
03A6:  BSF    1F.0
....................     setup_adc_ports(san7|vss_vdd);
03A7:  BSF    03.5
03A8:  BSF    03.6
03A9:  MOVF   09,W
03AA:  ANDLW  C0
03AB:  MOVWF  09
03AC:  BCF    03.6
03AD:  BCF    1F.4
03AE:  BCF    1F.5
03AF:  MOVLW  80
03B0:  BSF    03.6
03B1:  MOVWF  08
....................     set_adc_channel(7);
03B2:  MOVLW  1C
03B3:  MOVWF  78
03B4:  BCF    03.5
03B5:  BCF    03.6
03B6:  MOVF   1F,W
03B7:  ANDLW  C3
03B8:  IORWF  78,W
03B9:  MOVWF  1F
....................                                    
....................     setup_timer_1(t1_div_by_1);
03BA:  CLRF   10
....................     set_timer1(0);
03BB:  CLRF   0E
03BC:  CLRF   0F
03BD:  CLRF   0E
03BE:  NOP
....................     
....................     setup_timer_0(t0_internal|t0_div_256);
03BF:  BSF    03.5
03C0:  MOVF   01,W
03C1:  ANDLW  C0
03C2:  IORLW  07
03C3:  MOVWF  01
....................     set_timer0(100);
03C4:  MOVLW  64
03C5:  BCF    03.5
03C6:  MOVWF  01
....................     
....................                        
....................     while(true)
....................     {
....................          if(input(RUN)==0)  
03C7:  BSF    26.3
03C8:  MOVF   26,W
03C9:  BSF    03.5
03CA:  MOVWF  07
03CB:  BCF    03.5
03CC:  BTFSC  07.3
03CD:  GOTO   3D2
....................          {
....................             mode=1; 
03CE:  MOVLW  01
03CF:  MOVWF  20
....................             setup_timer_1(t1_external);     //bat counter
03D0:  MOVLW  07
03D1:  MOVWF  10
....................          }             
....................          if(input(PAUSE)==0) {
03D2:  BSF    26.4
03D3:  MOVF   26,W
03D4:  BSF    03.5
03D5:  MOVWF  07
03D6:  BCF    03.5
03D7:  BTFSC  07.4
03D8:  GOTO   3DC
....................             mode=2; 
03D9:  MOVLW  02
03DA:  MOVWF  20
....................             setup_timer_1(t1_disabled);    //dung dem  
03DB:  CLRF   10
....................          }
....................          
....................          if(mode==1) {
03DC:  DECFSZ 20,W
03DD:  GOTO   437
....................             //doc adc
....................               temp=read_adc()/2.046;   
03DE:  BSF    1F.1
03DF:  BTFSC  1F.1
03E0:  GOTO   3DF
03E1:  MOVF   1E,W
03E2:  MOVWF  79
03E3:  BSF    03.5
03E4:  MOVF   1E,W
03E5:  MOVWF  78
03E6:  MOVF   79,W
03E7:  BCF    03.5
03E8:  MOVWF  2A
03E9:  MOVF   78,W
03EA:  MOVWF  29
03EB:  MOVF   2A,W
03EC:  MOVWF  2C
03ED:  MOVF   78,W
03EE:  MOVWF  2B
03EF:  CALL   0C8
03F0:  MOVF   7A,W
03F1:  MOVWF  2E
03F2:  MOVF   79,W
03F3:  MOVWF  2D
03F4:  MOVF   78,W
03F5:  MOVWF  2C
03F6:  MOVF   77,W
03F7:  MOVWF  2B
03F8:  MOVLW  AA
03F9:  MOVWF  32
03FA:  MOVLW  F1
03FB:  MOVWF  31
03FC:  MOVLW  02
03FD:  MOVWF  30
03FE:  MOVLW  80
03FF:  MOVWF  2F
0400:  CALL   0E5
0401:  MOVF   7A,W
0402:  MOVWF  2C
0403:  MOVF   79,W
0404:  MOVWF  2B
0405:  MOVF   78,W
0406:  MOVWF  2A
0407:  MOVF   77,W
0408:  MOVWF  29
0409:  CALL   1AF
040A:  MOVF   78,W
040B:  MOVWF  21
....................                                   
....................             //dem sp  
....................               product = get_timer1();
040C:  MOVF   0F,W
040D:  MOVWF  7A
040E:  MOVF   0E,W
040F:  MOVWF  77
0410:  MOVF   0F,W
0411:  SUBWF  7A,W
0412:  BTFSS  03.2
0413:  GOTO   40C
0414:  MOVF   77,W
0415:  MOVWF  22
....................               if (product ==24) {
0416:  MOVF   22,W
0417:  SUBLW  18
0418:  BTFSS  03.2
0419:  GOTO   41D
....................                   box++;
041A:  INCF   23,F
041B:  BTFSC  03.2
041C:  INCF   24,F
....................               }
....................             //xuat xung      
....................               if(T0IF==1) //Tr?n 
041D:  BTFSS  0B.2
041E:  GOTO   436
....................               {        
....................                   set_timer0(100); overcount++; T0IF=0;
041F:  MOVLW  64
0420:  MOVWF  01
0421:  INCF   25,F
0422:  BCF    0B.2
....................                   if(overcount<7) {   
0423:  MOVF   25,W
0424:  SUBLW  06
0425:  BTFSS  03.0
0426:  GOTO   42C
....................                      output_high(pulse);
0427:  BSF    03.5
0428:  BCF    09.0
0429:  BCF    03.5
042A:  BSF    09.0
....................                   } else if (overcount < 10) {
042B:  GOTO   436
042C:  MOVF   25,W
042D:  SUBLW  09
042E:  BTFSS  03.0
042F:  GOTO   435
....................                      output_low(pulse);
0430:  BSF    03.5
0431:  BCF    09.0
0432:  BCF    03.5
0433:  BCF    09.0
....................                   } else {
0434:  GOTO   436
....................                      overcount=0;
0435:  CLRF   25
....................                   }
....................               }             
....................             
....................          } else if (mode==2) {
0436:  GOTO   49D
0437:  MOVF   20,W
0438:  SUBLW  02
0439:  BTFSS  03.2
043A:  GOTO   46F
....................              //doc adc
....................               temp=read_adc()/2.046; 
043B:  BSF    1F.1
043C:  BTFSC  1F.1
043D:  GOTO   43C
043E:  MOVF   1E,W
043F:  MOVWF  79
0440:  BSF    03.5
0441:  MOVF   1E,W
0442:  MOVWF  78
0443:  MOVF   79,W
0444:  BCF    03.5
0445:  MOVWF  2A
0446:  MOVF   78,W
0447:  MOVWF  29
0448:  MOVF   2A,W
0449:  MOVWF  2C
044A:  MOVF   78,W
044B:  MOVWF  2B
044C:  CALL   0C8
044D:  MOVF   7A,W
044E:  MOVWF  2E
044F:  MOVF   79,W
0450:  MOVWF  2D
0451:  MOVF   78,W
0452:  MOVWF  2C
0453:  MOVF   77,W
0454:  MOVWF  2B
0455:  MOVLW  AA
0456:  MOVWF  32
0457:  MOVLW  F1
0458:  MOVWF  31
0459:  MOVLW  02
045A:  MOVWF  30
045B:  MOVLW  80
045C:  MOVWF  2F
045D:  CALL   0E5
045E:  MOVF   7A,W
045F:  MOVWF  2C
0460:  MOVF   79,W
0461:  MOVWF  2B
0462:  MOVF   78,W
0463:  MOVWF  2A
0464:  MOVF   77,W
0465:  MOVWF  29
0466:  CALL   1AF
0467:  MOVF   78,W
0468:  MOVWF  21
....................               
....................               setup_timer_1(t1_disabled);
0469:  CLRF   10
....................               
....................               output_low(pulse); //tat xung
046A:  BSF    03.5
046B:  BCF    09.0
046C:  BCF    03.5
046D:  BCF    09.0
....................               
....................          } else { 
046E:  GOTO   49D
....................                temp=read_adc()/2.046;
046F:  BSF    1F.1
0470:  BTFSC  1F.1
0471:  GOTO   470
0472:  MOVF   1E,W
0473:  MOVWF  79
0474:  BSF    03.5
0475:  MOVF   1E,W
0476:  MOVWF  78
0477:  MOVF   79,W
0478:  BCF    03.5
0479:  MOVWF  2A
047A:  MOVF   78,W
047B:  MOVWF  29
047C:  MOVF   2A,W
047D:  MOVWF  2C
047E:  MOVF   78,W
047F:  MOVWF  2B
0480:  CALL   0C8
0481:  MOVF   7A,W
0482:  MOVWF  2E
0483:  MOVF   79,W
0484:  MOVWF  2D
0485:  MOVF   78,W
0486:  MOVWF  2C
0487:  MOVF   77,W
0488:  MOVWF  2B
0489:  MOVLW  AA
048A:  MOVWF  32
048B:  MOVLW  F1
048C:  MOVWF  31
048D:  MOVLW  02
048E:  MOVWF  30
048F:  MOVLW  80
0490:  MOVWF  2F
0491:  CALL   0E5
0492:  MOVF   7A,W
0493:  MOVWF  2C
0494:  MOVF   79,W
0495:  MOVWF  2B
0496:  MOVF   78,W
0497:  MOVWF  2A
0498:  MOVF   77,W
0499:  MOVWF  29
049A:  CALL   1AF
049B:  MOVF   78,W
049C:  MOVWF  21
....................          }//mode ==0
....................      
....................          //hien thi 7 seg
....................          output_a(code7seg[temp/10]);  
049D:  MOVF   21,W
049E:  MOVWF  2B
049F:  MOVLW  0A
04A0:  MOVWF  2C
04A1:  CALL   1CE
04A2:  MOVF   78,W
04A3:  CALL   004
04A4:  MOVWF  29
04A5:  BSF    03.5
04A6:  CLRF   05
04A7:  BCF    03.5
04A8:  MOVF   29,W
04A9:  MOVWF  05
....................          output_b(code7seg[temp%10]);  
04AA:  MOVF   21,W
04AB:  MOVWF  2B
04AC:  MOVLW  0A
04AD:  MOVWF  2C
04AE:  CALL   1CE
04AF:  MOVF   77,W
04B0:  CALL   004
04B1:  MOVWF  29
04B2:  BSF    03.5
04B3:  CLRF   06
04B4:  BCF    03.5
04B5:  MOVF   29,W
04B6:  MOVWF  06
....................          // hien thi lcd                                
....................          lcd_gotoxy(1,1); 
04B7:  MOVLW  01
04B8:  MOVWF  33
04B9:  MOVWF  34
04BA:  CALL   1E3
....................          printf(lcd_putc,"P=%02u", product); 
04BB:  MOVLW  50
04BC:  MOVWF  32
04BD:  CALL   1F5
04BE:  MOVLW  3D
04BF:  MOVWF  32
04C0:  CALL   1F5
04C1:  MOVF   22,W
04C2:  MOVWF  29
04C3:  MOVLW  01
04C4:  MOVWF  2A
04C5:  GOTO   221
....................          lcd_gotoxy(1,2);
04C6:  MOVLW  01
04C7:  MOVWF  33
04C8:  MOVLW  02
04C9:  MOVWF  34
04CA:  CALL   1E3
....................          printf(lcd_putc,"Box=%05Lu", box); 
04CB:  MOVLW  12
04CC:  BSF    03.6
04CD:  MOVWF  0D
04CE:  MOVLW  00
04CF:  MOVWF  0F
04D0:  BCF    03.0
04D1:  MOVLW  04
04D2:  BCF    03.6
04D3:  MOVWF  29
04D4:  GOTO   258
04D5:  MOVLW  08
04D6:  MOVWF  04
04D7:  MOVF   24,W
04D8:  MOVWF  2A
04D9:  MOVF   23,W
04DA:  MOVWF  29
04DB:  GOTO   2B1
....................          
....................          lcd_gotoxy(10,1);
04DC:  MOVLW  0A
04DD:  MOVWF  33
04DE:  MOVLW  01
04DF:  MOVWF  34
04E0:  CALL   1E3
....................          if(temp>40) {
04E1:  MOVF   21,W
04E2:  SUBLW  28
04E3:  BTFSC  03.0
04E4:  GOTO   4ED
....................             lcd_putc("ALARM");
04E5:  MOVLW  17
04E6:  BSF    03.6
04E7:  MOVWF  0D
04E8:  MOVLW  00
04E9:  MOVWF  0F
04EA:  BCF    03.6
04EB:  CALL   316
....................          } else {
04EC:  GOTO   4F4
....................             lcd_putc("     ");
04ED:  MOVLW  1A
04EE:  BSF    03.6
04EF:  MOVWF  0D
04F0:  MOVLW  00
04F1:  MOVWF  0F
04F2:  BCF    03.6
04F3:  CALL   316
....................          } 
....................                                      
....................          lcd_gotoxy(13,2);
04F4:  MOVLW  0D
04F5:  MOVWF  33
04F6:  MOVLW  02
04F7:  MOVWF  34
04F8:  CALL   1E3
....................          if(mode==1) {
04F9:  DECFSZ 20,W
04FA:  GOTO   503
....................             lcd_putc("RUN ");
04FB:  MOVLW  1D
04FC:  BSF    03.6
04FD:  MOVWF  0D
04FE:  MOVLW  00
04FF:  MOVWF  0F
0500:  BCF    03.6
0501:  CALL   316
....................          } else if (mode==0){        
0502:  GOTO   50D
0503:  MOVF   20,F
0504:  BTFSS  03.2
0505:  GOTO   50D
....................             lcd_putc("STOP");
0506:  MOVLW  20
0507:  BSF    03.6
0508:  MOVWF  0D
0509:  MOVLW  00
050A:  MOVWF  0F
050B:  BCF    03.6
050C:  CALL   316
....................          } 
050D:  GOTO   3C7
....................     }        
.................... }
.................... 
050E:  SLEEP

Configuration Fuses:
   Word  1: 2FE5   INTRC NOWDT PUT MCLR NOPROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
