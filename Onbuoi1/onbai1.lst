CCS PCM C Compiler, Version 5.109, 43599               22-May-23 17:04

               Filename:   E:\PIC 16F887\Code\onbai1\onbai1.lst

               ROM used:   690 words (8%)
                           Largest free fragment is 2048
               RAM used:   11 (3%) at main() level
                           24 (7%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   1FE
0003:  NOP
.................... #include <16F887.h>
.................... //////////// Standard Header file for the PIC16F887 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F887
0004:  DATA 4E,24
0005:  DATA 41,27
0006:  DATA A0,29
0007:  DATA D4,20
0008:  DATA 52,2A
0009:  DATA 00,00
000A:  DATA C4,22
000B:  DATA A0,25
000C:  DATA C8,27
000D:  DATA 49,10
000E:  DATA C4,27
000F:  DATA CE,23
0010:  DATA 00,01
0011:  DATA C4,22
0012:  DATA 4D,10
0013:  DATA D3,20
0014:  DATA 4E,10
0015:  DATA 50,24
0016:  DATA C1,26
0017:  DATA 00,01
0018:  DATA D3,27
0019:  DATA 20,26
001A:  DATA D5,27
001B:  DATA CE,23
001C:  DATA A0,1E
001D:  DATA A0,12
001E:  DATA 30,19
001F:  DATA 75,00
*
0103:  MOVF   0B,W
0104:  MOVWF  25
0105:  BCF    0B.7
0106:  BSF    03.5
0107:  BSF    03.6
0108:  BSF    0C.7
0109:  BSF    0C.0
010A:  NOP
010B:  NOP
010C:  BCF    03.5
010D:  BCF    03.6
010E:  BTFSC  25.7
010F:  BSF    0B.7
0110:  BSF    03.6
0111:  MOVF   0C,W
0112:  ANDLW  7F
0113:  BTFSC  03.2
0114:  GOTO   157
0115:  BCF    03.6
0116:  MOVWF  25
0117:  BSF    03.6
0118:  MOVF   0D,W
0119:  BCF    03.6
011A:  MOVWF  26
011B:  BSF    03.6
011C:  MOVF   0F,W
011D:  BCF    03.6
011E:  MOVWF  27
011F:  MOVF   25,W
0120:  MOVWF  29
0121:  CALL   0D7
0122:  MOVF   26,W
0123:  BSF    03.6
0124:  MOVWF  0D
0125:  BCF    03.6
0126:  MOVF   27,W
0127:  BSF    03.6
0128:  MOVWF  0F
0129:  BCF    03.6
012A:  MOVF   0B,W
012B:  MOVWF  28
012C:  BCF    0B.7
012D:  BSF    03.5
012E:  BSF    03.6
012F:  BSF    0C.7
0130:  BSF    0C.0
0131:  NOP
0132:  NOP
0133:  BCF    03.5
0134:  BCF    03.6
0135:  BTFSC  28.7
0136:  BSF    0B.7
0137:  BSF    03.6
0138:  RLF    0C,W
0139:  RLF    0E,W
013A:  ANDLW  7F
013B:  BTFSC  03.2
013C:  GOTO   157
013D:  BCF    03.6
013E:  MOVWF  25
013F:  BSF    03.6
0140:  MOVF   0D,W
0141:  BCF    03.6
0142:  MOVWF  26
0143:  BSF    03.6
0144:  MOVF   0F,W
0145:  BCF    03.6
0146:  MOVWF  27
0147:  MOVF   25,W
0148:  MOVWF  29
0149:  CALL   0D7
014A:  MOVF   26,W
014B:  BSF    03.6
014C:  MOVWF  0D
014D:  BCF    03.6
014E:  MOVF   27,W
014F:  BSF    03.6
0150:  MOVWF  0F
0151:  INCF   0D,F
0152:  BTFSC  03.2
0153:  INCF   0F,F
0154:  BCF    03.6
0155:  GOTO   103
0156:  BSF    03.6
0157:  BCF    03.6
0158:  RETURN
0159:  MOVF   0B,W
015A:  MOVWF  26
015B:  BCF    0B.7
015C:  BSF    03.5
015D:  BSF    03.6
015E:  BSF    0C.7
015F:  BSF    0C.0
0160:  NOP
0161:  NOP
0162:  BCF    03.5
0163:  BCF    03.6
0164:  BTFSC  26.7
0165:  BSF    0B.7
0166:  BTFSC  03.0
0167:  GOTO   190
0168:  BSF    03.6
0169:  MOVF   0C,W
016A:  ANDLW  7F
016B:  BCF    03.6
016C:  MOVWF  26
016D:  BSF    03.6
016E:  MOVF   0D,W
016F:  BCF    03.6
0170:  MOVWF  27
0171:  BSF    03.6
0172:  MOVF   0F,W
0173:  BCF    03.6
0174:  MOVWF  28
0175:  MOVF   26,W
0176:  MOVWF  29
0177:  CALL   0D7
0178:  MOVF   27,W
0179:  BSF    03.6
017A:  MOVWF  0D
017B:  BCF    03.6
017C:  MOVF   28,W
017D:  BSF    03.6
017E:  MOVWF  0F
017F:  BCF    03.6
0180:  MOVF   0B,W
0181:  MOVWF  29
0182:  BCF    0B.7
0183:  BSF    03.5
0184:  BSF    03.6
0185:  BSF    0C.7
0186:  BSF    0C.0
0187:  NOP
0188:  NOP
0189:  BCF    03.5
018A:  BCF    03.6
018B:  BTFSC  29.7
018C:  BSF    0B.7
018D:  DECFSZ 25,F
018E:  GOTO   190
018F:  GOTO   1AF
0190:  BSF    03.6
0191:  RLF    0C,W
0192:  RLF    0E,W
0193:  ANDLW  7F
0194:  BCF    03.6
0195:  MOVWF  26
0196:  BSF    03.6
0197:  MOVF   0D,W
0198:  BCF    03.6
0199:  MOVWF  27
019A:  BSF    03.6
019B:  MOVF   0F,W
019C:  BCF    03.6
019D:  MOVWF  28
019E:  MOVF   26,W
019F:  MOVWF  29
01A0:  CALL   0D7
01A1:  MOVF   27,W
01A2:  BSF    03.6
01A3:  MOVWF  0D
01A4:  BCF    03.6
01A5:  MOVF   28,W
01A6:  BSF    03.6
01A7:  MOVWF  0F
01A8:  INCF   0D,F
01A9:  BTFSC  03.2
01AA:  INCF   0F,F
01AB:  BCF    03.0
01AC:  BCF    03.6
01AD:  DECFSZ 25,F
01AE:  GOTO   159
01AF:  BCF    0A.3
01B0:  BCF    0A.4
01B1:  GOTO   285 (RETURN)
01B2:  MOVF   28,W
01B3:  CLRF   78
01B4:  SUBWF  27,W
01B5:  BTFSC  03.0
01B6:  GOTO   1BA
01B7:  MOVF   27,W
01B8:  MOVWF  77
01B9:  GOTO   1C6
01BA:  CLRF   77
01BB:  MOVLW  08
01BC:  MOVWF  29
01BD:  RLF    27,F
01BE:  RLF    77,F
01BF:  MOVF   28,W
01C0:  SUBWF  77,W
01C1:  BTFSC  03.0
01C2:  MOVWF  77
01C3:  RLF    78,F
01C4:  DECFSZ 29,F
01C5:  GOTO   1BD
01C6:  RETURN
01C7:  MOVF   78,W
01C8:  MOVF   25,W
01C9:  MOVWF  27
01CA:  MOVLW  64
01CB:  MOVWF  28
01CC:  CALL   1B2
01CD:  MOVF   77,W
01CE:  MOVWF  25
01CF:  MOVF   78,W
01D0:  MOVLW  30
01D1:  BTFSS  03.2
01D2:  GOTO   1DA
01D3:  BTFSS  26.1
01D4:  GOTO   1E1
01D5:  BTFSC  26.3
01D6:  GOTO   1E1
01D7:  BTFSC  26.4
01D8:  MOVLW  20
01D9:  GOTO   1DD
01DA:  BCF    26.3
01DB:  BCF    26.4
01DC:  BSF    26.0
01DD:  ADDWF  78,F
01DE:  MOVF   78,W
01DF:  MOVWF  29
01E0:  CALL   0D7
01E1:  MOVF   25,W
01E2:  MOVWF  27
01E3:  MOVLW  0A
01E4:  MOVWF  28
01E5:  CALL   1B2
01E6:  MOVF   77,W
01E7:  MOVWF  25
01E8:  MOVF   78,W
01E9:  MOVLW  30
01EA:  BTFSS  03.2
01EB:  GOTO   1F2
01EC:  BTFSC  26.3
01ED:  GOTO   1F6
01EE:  BTFSS  26.0
01EF:  GOTO   1F6
01F0:  BTFSC  26.4
01F1:  MOVLW  20
01F2:  ADDWF  78,F
01F3:  MOVF   78,W
01F4:  MOVWF  29
01F5:  CALL   0D7
01F6:  MOVLW  30
01F7:  ADDWF  25,F
01F8:  MOVF   25,W
01F9:  MOVWF  29
01FA:  CALL   0D7
01FB:  BCF    0A.3
01FC:  BCF    0A.4
01FD:  GOTO   28A (RETURN)
.................... 
.................... #list
.................... 
.................... #fuses INTRC_IO
.................... #use delay(CLOCK=8MHz)
*
0020:  MOVLW  2A
0021:  MOVWF  04
0022:  BCF    03.7
0023:  MOVF   00,W
0024:  BTFSC  03.2
0025:  GOTO   033
0026:  MOVLW  02
0027:  MOVWF  78
0028:  CLRF   77
0029:  DECFSZ 77,F
002A:  GOTO   029
002B:  DECFSZ 78,F
002C:  GOTO   028
002D:  MOVLW  97
002E:  MOVWF  77
002F:  DECFSZ 77,F
0030:  GOTO   02F
0031:  DECFSZ 00,F
0032:  GOTO   026
0033:  RETURN
.................... #include <lcd.c>
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////                             LCD.C                                     ////
.................... ////                 Driver for common LCD modules                         ////
.................... ////                                                                       ////
.................... ////  lcd_init()   Must be called before any other function.               ////
.................... ////                                                                       ////
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         ////
.................... ////                 \a  Set cursor position to upper left                 ////
.................... ////                 \f  Clear display, set cursor to upper left           ////
.................... ////                 \n  Go to start of second line                        ////
.................... ////                 \b  Move back one position                            ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     ////
.................... ////              will erase all remanining characters on the current      ////
.................... ////              line, and move the cursor to the beginning of the next   ////
.................... ////              line.                                                    ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     ////
.................... ////              will move the cursor to the start of the current         ////
.................... ////              line.                                                    ////
.................... ////                                                                       ////
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        ////
.................... ////                                                                       ////
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             ////
.................... ////                                                                       ////
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         ////
.................... ////              (on=FALSE).                                              ////
.................... ////                                                                       ////
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   ////
.................... ////                                                                       ////
.................... ////                                                                       ////
.................... ////  CONFIGURATION                                                        ////
.................... ////  The LCD can be configured in one of two ways: a.) port access or     ////
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     ////
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     ////
.................... ////  connected to sequential pins on the GPIO.  Pin access                ////
.................... ////  has no requirements, all 7 bits of the control interface can         ////
.................... ////  can be connected to any GPIO using several ports.                    ////
.................... ////                                                                       ////
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     ////
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    ////
.................... ////  of this file to configure the pin order.  If you are using a         ////
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  ////
.................... ////  be defined.                                                          ////
.................... ////                                                                       ////
.................... ////  Example of port access:                                              ////
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         ////
.................... ////                                                                       ////
.................... ////  To use pin access, the following pins must be defined:               ////
.................... ////     LCD_ENABLE_PIN                                                    ////
.................... ////     LCD_RS_PIN                                                        ////
.................... ////     LCD_RW_PIN                                                        ////
.................... ////     LCD_DATA4                                                         ////
.................... ////     LCD_DATA5                                                         ////
.................... ////     LCD_DATA6                                                         ////
.................... ////     LCD_DATA7                                                         ////
.................... ////                                                                       ////
.................... ////  Example of pin access:                                               ////
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    ////
.................... ////     #define LCD_RS_PIN      PIN_E1                                    ////
.................... ////     #define LCD_RW_PIN      PIN_E2                                    ////
.................... ////     #define LCD_DATA4       PIN_D4                                    ////
.................... ////     #define LCD_DATA5       PIN_D5                                    ////
.................... ////     #define LCD_DATA6       PIN_D6                                    ////
.................... ////     #define LCD_DATA7       PIN_D7                                    ////
.................... ////                                                                       ////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef __LCD_C__
.................... #define __LCD_C__
.................... 
.................... // define the pinout.
.................... // only required if port access is being used.
.................... typedef struct  
.................... {                            // This structure is overlayed
....................    int1 enable;           // on to an I/O port to gain
....................    int1 rs;               // access to the LCD pins.
....................    int1 rw;               // The bits are allocated from
....................    int1 unused;           // low order up.  ENABLE will
....................    unsigned int     data : 4;         // be LSB pin of that port.
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT.
....................    unsigned int    reserved: 8;
....................   #endif
.................... } LCD_PIN_MAP;
.................... 
.................... // this is to improve compatability with previous LCD drivers that accepted
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B.
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE))
....................  #define LCD_DATA_PORT getenv("SFR:PORTB")
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    // these definitions only need to be modified for baseline PICs.
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions.
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0};
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF};
.................... #endif
.................... 
.................... ////////////////////// END CONFIGURATION ///////////////////////////////////
.................... 
.................... #ifndef LCD_ENABLE_PIN
....................    #define lcd_output_enable(x) lcdlat.enable=x
....................    #define lcd_enable_tris()   lcdtris.enable=0
.................... #else
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x)
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RS_PIN
....................    #define lcd_output_rs(x) lcdlat.rs=x
....................    #define lcd_rs_tris()   lcdtris.rs=0
.................... #else
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x)
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RW_PIN
....................    #define lcd_output_rw(x) lcdlat.rw=x
....................    #define lcd_rw_tris()   lcdtris.rw=0
.................... #else
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x)
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN)
.................... #endif
.................... 
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4,
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver
.................... // compatible with any code written for the original library
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7))
....................    #define  LCD_DATA4    LCD_DATA0
....................    #define  LCD_DATA5    LCD_DATA1
....................    #define  LCD_DATA6    LCD_DATA2
....................    #define  LCD_DATA7    LCD_DATA3
.................... #endif
.................... 
.................... #ifndef LCD_DATA4
.................... #ifndef LCD_DATA_PORT
....................    #if defined(__PCB__)
....................       #define LCD_DATA_PORT      0x06     //portb
....................       #define set_tris_lcd(x)   set_tris_b(x)
....................    #else
....................      #if defined(PIN_D0)
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd
....................      #else
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb
....................      #endif
....................    #endif   
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    LCD_PIN_MAP lcd, lcdlat;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
.................... #elif defined(__PCM__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
....................    #byte lcdtris = LCD_DATA_PORT+0x80
.................... #elif defined(__PCH__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT+9
....................    #byte lcdtris = LCD_DATA_PORT+0x12
.................... #elif defined(__PCD__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #word lcd = LCD_DATA_PORT
....................    #word lcdlat = LCD_DATA_PORT+2
....................    #word lcdtris = LCD_DATA_PORT-0x02
.................... #endif
.................... #endif   //LCD_DATA4 not defined
.................... 
.................... #ifndef LCD_TYPE
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines
.................... #endif
.................... 
.................... #ifndef LCD_LINE_TWO
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line
.................... #endif
.................... 
.................... #ifndef LCD_LINE_LENGTH
....................    #define LCD_LINE_LENGTH 20
.................... #endif
.................... 
.................... unsigned int8 lcd_read_nibble(void);
.................... 
.................... unsigned int8 lcd_read_byte(void)
.................... {
....................    unsigned int8 low,high;
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_INPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_float(LCD_DATA4);
....................    output_float(LCD_DATA5);
....................    output_float(LCD_DATA6);
....................    output_float(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0xF;
*
004D:  MOVLW  0F
004E:  BSF    03.5
004F:  ANDWF  08,W
0050:  IORLW  F0
0051:  MOVWF  08
....................   #endif
....................  #endif
....................         
....................    lcd_output_rw(1);
0052:  BCF    03.5
0053:  BSF    08.2
....................    delay_cycles(1);
0054:  NOP
....................    lcd_output_enable(1);
0055:  BSF    08.0
....................    delay_cycles(1);
0056:  NOP
....................    high = lcd_read_nibble();
0057:  CALL   041
0058:  MOVF   78,W
0059:  MOVWF  31
....................       
....................    lcd_output_enable(0);
005A:  BCF    08.0
....................    delay_cycles(1);
005B:  NOP
....................    lcd_output_enable(1);
005C:  BSF    08.0
....................    delay_us(1);
005D:  GOTO   05E
....................    low = lcd_read_nibble();
005E:  CALL   041
005F:  MOVF   78,W
0060:  MOVWF  30
....................       
....................    lcd_output_enable(0);
0061:  BCF    08.0
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
....................    output_drive(LCD_DATA5);
....................    output_drive(LCD_DATA6);
....................    output_drive(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0x0;
0062:  MOVLW  0F
0063:  BSF    03.5
0064:  ANDWF  08,W
0065:  MOVWF  08
....................   #endif
....................  #endif
.................... 
....................    return( (high<<4) | low);
0066:  BCF    03.5
0067:  SWAPF  31,W
0068:  MOVWF  77
0069:  MOVLW  F0
006A:  ANDWF  77,F
006B:  MOVF   77,W
006C:  IORWF  30,W
006D:  MOVWF  78
.................... }
.................... 
.................... unsigned int8 lcd_read_nibble(void)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    unsigned int8 n = 0x00;
.................... 
....................    /* Read the data port */
....................    n |= input(LCD_DATA4);
....................    n |= input(LCD_DATA5) << 1;
....................    n |= input(LCD_DATA6) << 2;
....................    n |= input(LCD_DATA7) << 3;
....................    
....................    return(n);
....................   #else
....................    return(lcd.data);
*
0041:  MOVF   08,W
0042:  MOVWF  77
0043:  SWAPF  08,W
0044:  ANDLW  0F
0045:  MOVWF  78
....................   #endif
0046:  RETURN
.................... }
.................... 
.................... void lcd_send_nibble(unsigned int8 n)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    /* Write to the data port */
....................    output_bit(LCD_DATA4, bit_test(n, 0));
....................    output_bit(LCD_DATA5, bit_test(n, 1));
....................    output_bit(LCD_DATA6, bit_test(n, 2));
....................    output_bit(LCD_DATA7, bit_test(n, 3));
....................   #else      
....................    lcdlat.data = n;
*
0034:  SWAPF  31,W
0035:  ANDLW  F0
0036:  MOVWF  77
0037:  MOVLW  0F
0038:  ANDWF  08,W
0039:  IORWF  77,W
003A:  MOVWF  08
....................   #endif
....................       
....................    delay_cycles(1);
003B:  NOP
....................    lcd_output_enable(1);
003C:  BSF    08.0
....................    delay_us(2);
003D:  GOTO   03E
003E:  GOTO   03F
....................    lcd_output_enable(0);
003F:  BCF    08.0
0040:  RETURN
.................... }
.................... 
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n)
.................... {
....................   #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................   #else
....................    lcd_enable_tris();
*
0047:  BSF    03.5
0048:  BCF    08.0
....................    lcd_rs_tris();
0049:  BCF    08.1
....................    lcd_rw_tris();
004A:  BCF    08.2
....................   #endif
.................... 
....................    lcd_output_rs(0);
004B:  BCF    03.5
004C:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ;
*
006E:  MOVF   78,W
006F:  MOVWF  30
0070:  BTFSC  30.7
0071:  GOTO   04D
....................    lcd_output_rs(address);
0072:  BTFSS  2E.0
0073:  BCF    08.1
0074:  BTFSC  2E.0
0075:  BSF    08.1
....................    delay_cycles(1);
0076:  NOP
....................    lcd_output_rw(0);
0077:  BCF    08.2
....................    delay_cycles(1);
0078:  NOP
....................    lcd_output_enable(0);
0079:  BCF    08.0
....................    lcd_send_nibble(n >> 4);
007A:  SWAPF  2F,W
007B:  MOVWF  30
007C:  MOVLW  0F
007D:  ANDWF  30,F
007E:  MOVF   30,W
007F:  MOVWF  31
0080:  CALL   034
....................    lcd_send_nibble(n & 0xf);
0081:  MOVF   2F,W
0082:  ANDLW  0F
0083:  MOVWF  30
0084:  MOVWF  31
0085:  CALL   034
0086:  RETURN
.................... }
.................... 
.................... #if defined(LCD_EXTENDED_NEWLINE)
.................... unsigned int8 g_LcdX, g_LcdY;
.................... #endif
.................... 
.................... void lcd_init(void) 
.................... {
....................    unsigned int8 i;
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6};
0087:  MOVLW  28
0088:  MOVWF  26
0089:  MOVLW  0C
008A:  MOVWF  27
008B:  MOVLW  01
008C:  MOVWF  28
008D:  MOVLW  06
008E:  MOVWF  29
....................                              // These bytes need to be sent to the LCD
....................                              // to start it up.
....................    
.................... 
....................    lcd_output_enable(0);
008F:  BCF    08.0
....................    lcd_output_rs(0);
0090:  BCF    08.1
....................    lcd_output_rw(0);
0091:  BCF    08.2
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
....................    output_drive(LCD_DATA5);
....................    output_drive(LCD_DATA6);
....................    output_drive(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0x0;
0092:  MOVLW  0F
0093:  BSF    03.5
0094:  ANDWF  08,W
0095:  MOVWF  08
....................   #endif
....................    lcd_enable_tris();
0096:  BCF    08.0
....................    lcd_rs_tris();
0097:  BCF    08.1
....................    lcd_rw_tris();
0098:  BCF    08.2
....................  #endif
....................     
....................    delay_ms(15);
0099:  MOVLW  0F
009A:  BCF    03.5
009B:  MOVWF  2A
009C:  CALL   020
....................    for(i=1;i<=3;++i)
009D:  MOVLW  01
009E:  MOVWF  25
009F:  MOVF   25,W
00A0:  SUBLW  03
00A1:  BTFSS  03.0
00A2:  GOTO   0AB
....................    {
....................        lcd_send_nibble(3);
00A3:  MOVLW  03
00A4:  MOVWF  31
00A5:  CALL   034
....................        delay_ms(5);
00A6:  MOVLW  05
00A7:  MOVWF  2A
00A8:  CALL   020
00A9:  INCF   25,F
00AA:  GOTO   09F
....................    }
....................    
....................    lcd_send_nibble(2);
00AB:  MOVLW  02
00AC:  MOVWF  31
00AD:  CALL   034
....................    delay_ms(5);
00AE:  MOVLW  05
00AF:  MOVWF  2A
00B0:  CALL   020
....................    for(i=0;i<=3;++i)
00B1:  CLRF   25
00B2:  MOVF   25,W
00B3:  SUBLW  03
00B4:  BTFSS  03.0
00B5:  GOTO   0C2
....................       lcd_send_byte(0,LCD_INIT_STRING[i]);
00B6:  MOVLW  26
00B7:  ADDWF  25,W
00B8:  MOVWF  04
00B9:  BCF    03.7
00BA:  MOVF   00,W
00BB:  MOVWF  2A
00BC:  CLRF   2E
00BD:  MOVF   2A,W
00BE:  MOVWF  2F
00BF:  CALL   047
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
00C0:  INCF   25,F
00C1:  GOTO   0B2
00C2:  BCF    0A.3
00C3:  BCF    0A.4
00C4:  GOTO   233 (RETURN)
....................    g_LcdX = 0;
....................    g_LcdY = 0;
....................   #endif
.................... }
.................... 
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y)
.................... {
....................    unsigned int8 address;
....................    
....................    if(y!=1)
00C5:  DECFSZ 2B,W
00C6:  GOTO   0C8
00C7:  GOTO   0CB
....................       address=LCD_LINE_TWO;
00C8:  MOVLW  40
00C9:  MOVWF  2C
00CA:  GOTO   0CC
....................    else
....................       address=0;
00CB:  CLRF   2C
....................      
....................    address+=x-1;
00CC:  MOVLW  01
00CD:  SUBWF  2A,W
00CE:  ADDWF  2C,F
....................    lcd_send_byte(0,0x80|address);
00CF:  MOVF   2C,W
00D0:  IORLW  80
00D1:  MOVWF  2D
00D2:  CLRF   2E
00D3:  MOVF   2D,W
00D4:  MOVWF  2F
00D5:  CALL   047
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
00D6:  RETURN
....................    g_LcdX = x - 1;
....................    g_LcdY = y - 1;
....................   #endif
.................... }
.................... 
.................... void lcd_putc(char c)
.................... {
....................    switch (c)
00D7:  MOVF   29,W
00D8:  XORLW  07
00D9:  BTFSC  03.2
00DA:  GOTO   0E5
00DB:  XORLW  0B
00DC:  BTFSC  03.2
00DD:  GOTO   0EA
00DE:  XORLW  06
00DF:  BTFSC  03.2
00E0:  GOTO   0F2
00E1:  XORLW  02
00E2:  BTFSC  03.2
00E3:  GOTO   0F8
00E4:  GOTO   0FD
....................    {
....................       case '\a'   :  lcd_gotoxy(1,1);     break;
00E5:  MOVLW  01
00E6:  MOVWF  2A
00E7:  MOVWF  2B
00E8:  CALL   0C5
00E9:  GOTO   102
.................... 
....................       case '\f'   :  lcd_send_byte(0,1);
00EA:  CLRF   2E
00EB:  MOVLW  01
00EC:  MOVWF  2F
00ED:  CALL   047
....................                      delay_ms(2);
00EE:  MOVLW  02
00EF:  MOVWF  2A
00F0:  CALL   020
....................                     #if defined(LCD_EXTENDED_NEWLINE)
....................                      g_LcdX = 0;
....................                      g_LcdY = 0;
....................                     #endif
....................                      break;
00F1:  GOTO   102
.................... 
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break;
....................       case '\n'   :
....................          while (g_LcdX++ < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, ' ');
....................          }
....................          lcd_gotoxy(1, g_LcdY+2);
....................          break;
....................      #else
....................       case '\n'   : lcd_gotoxy(1,2);        break;
00F2:  MOVLW  01
00F3:  MOVWF  2A
00F4:  MOVLW  02
00F5:  MOVWF  2B
00F6:  CALL   0C5
00F7:  GOTO   102
....................      #endif
....................      
....................       case '\b'   : lcd_send_byte(0,0x10);  break;
00F8:  CLRF   2E
00F9:  MOVLW  10
00FA:  MOVWF  2F
00FB:  CALL   047
00FC:  GOTO   102
....................      
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       default     : 
....................          if (g_LcdX < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, c);
....................             g_LcdX++;
....................          }
....................          break;
....................      #else
....................       default     : lcd_send_byte(1,c);     break;
00FD:  MOVLW  01
00FE:  MOVWF  2E
00FF:  MOVF   29,W
0100:  MOVWF  2F
0101:  CALL   047
....................      #endif
....................    }
0102:  RETURN
.................... }
....................  
.................... char lcd_getc(unsigned int8 x, unsigned int8 y)
.................... {
....................    char value;
.................... 
....................    lcd_gotoxy(x,y);
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low
....................    lcd_output_rs(1);
....................    value = lcd_read_byte();
....................    lcd_output_rs(0);
....................    
....................    return(value);
.................... }
.................... 
.................... // write a custom character to the ram
.................... // which is 0-7 and specifies which character array we are modifying.
.................... // ptr points to an array of 8 bytes, where each byte is the next row of
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and
.................... //    usually you will want to leave this byte 0x00.
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr)
.................... {
....................    unsigned int i;
.................... 
....................    which <<= 3;
....................    which &= 0x38;
.................... 
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address
.................... 
....................    for(i=0; i<8; i++)
....................    {
....................       lcd_send_byte(1, *ptr++);
....................    }
....................   
....................    #if defined(LCD_EXTENDED_NEWLINE)
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address
....................    #endif
.................... }
.................... 
.................... void lcd_cursor_on(int1 on)
.................... {
....................    if (on)
....................    {
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON
....................    }
....................    else
....................    {
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF
....................    }
.................... }
.................... 
.................... #endif
.................... 
.................... 
.................... #define START PIN_B0
.................... #define STOP  PIN_B1
.................... #define LCD_ENABLE_PIN  PIN_E0                            
.................... #define LCD_RS_PIN      PIN_E1
.................... #define LCD_RW_PIN      PIN_E2                                   
.................... #define LCD_DATA4       PIN_D4                                  
.................... #define LCD_DATA5       PIN_D5
.................... #define LCD_DATA6       PIN_D6
.................... unsigned int8 PRODUCT;
.................... 
.................... unsigned int8 st = 0;
.................... void main()
*
01FE:  MOVF   03,W
01FF:  ANDLW  1F
0200:  MOVWF  03
0201:  MOVLW  71
0202:  BSF    03.5
0203:  MOVWF  0F
0204:  CLRF   10
0205:  MOVF   0F,W
0206:  BCF    03.5
0207:  CLRF   21
0208:  MOVLW  FF
0209:  MOVWF  22
020A:  CLRF   24
020B:  CLRF   23
020C:  BSF    03.5
020D:  BSF    03.6
020E:  MOVF   09,W
020F:  ANDLW  C0
0210:  MOVWF  09
0211:  BCF    03.6
0212:  BCF    1F.4
0213:  BCF    1F.5
0214:  MOVLW  00
0215:  BSF    03.6
0216:  MOVWF  08
0217:  BCF    03.5
0218:  CLRF   07
0219:  CLRF   08
021A:  CLRF   09
021B:  BCF    03.7
.................... {
....................     set_tris_d(0x00); //RA4/T0CKI:0b***1****
021C:  MOVLW  00
021D:  BSF    03.5
021E:  BCF    03.6
021F:  MOVWF  08
....................     set_tris_c(0x01);
0220:  MOVLW  01
0221:  MOVWF  07
0222:  BCF    03.5
0223:  MOVWF  22
....................     set_tris_b(0x03); 
0224:  MOVLW  03
0225:  BSF    03.5
0226:  MOVWF  06
....................     set_tris_e(0x00);
0227:  BCF    09.0
0228:  BCF    09.1
0229:  BCF    09.2
022A:  BCF    09.3
....................     setup_timer_1(T1_EXTERNAL|T1_DIV_BY_1);
022B:  MOVLW  07
022C:  BCF    03.5
022D:  MOVWF  10
....................     set_timer1(0);
022E:  CLRF   0E
022F:  CLRF   0F
0230:  CLRF   0E
0231:  NOP
.................... 
....................     lcd_init();
0232:  GOTO   087
....................     lcd_gotoxy(1, 1);
0233:  MOVLW  01
0234:  MOVWF  2A
0235:  MOVWF  2B
0236:  CALL   0C5
....................     lcd_putc("NHAN START");
0237:  MOVLW  04
0238:  BSF    03.6
0239:  MOVWF  0D
023A:  MOVLW  00
023B:  MOVWF  0F
023C:  BCF    03.6
023D:  CALL   103
.................... 
....................     lcd_gotoxy(1, 2);
023E:  MOVLW  01
023F:  MOVWF  2A
0240:  MOVLW  02
0241:  MOVWF  2B
0242:  CALL   0C5
....................     lcd_putc("DE KHOI DONG");
0243:  MOVLW  0A
0244:  BSF    03.6
0245:  MOVWF  0D
0246:  MOVLW  00
0247:  MOVWF  0F
0248:  BCF    03.6
0249:  CALL   103
.................... 
....................     while (TRUE)
....................     {
.................... 
....................         if (input(START) == 0)
024A:  BSF    03.5
024B:  BSF    06.0
024C:  BCF    03.5
024D:  BTFSC  06.0
024E:  GOTO   25C
....................         {
.................... 
....................             delay_ms(50);
024F:  MOVLW  32
0250:  MOVWF  2A
0251:  CALL   020
....................             st = 1;
0252:  MOVLW  01
0253:  MOVWF  21
....................             while (input(START) == 0) ;
0254:  BSF    03.5
0255:  BSF    06.0
0256:  BCF    03.5
0257:  BTFSS  06.0
0258:  GOTO   254
....................             delay_ms(50);
0259:  MOVLW  32
025A:  MOVWF  2A
025B:  CALL   020
....................         }
....................         if (st == 1)
025C:  DECFSZ 21,W
025D:  GOTO   29A
....................         {
....................             
....................             delay_ms(10);
025E:  MOVLW  0A
025F:  MOVWF  2A
0260:  CALL   020
....................             PRODUCT = get_timer1();
0261:  MOVF   0F,W
0262:  MOVWF  7A
0263:  MOVF   0E,W
0264:  MOVWF  77
0265:  MOVF   0F,W
0266:  SUBWF  7A,W
0267:  BTFSS  03.2
0268:  GOTO   261
0269:  MOVF   77,W
026A:  MOVWF  20
....................             lcd_gotoxy(1, 1);
026B:  MOVLW  01
026C:  MOVWF  2A
026D:  MOVWF  2B
026E:  CALL   0C5
....................             lcd_putc("DEM SAN PHAM");
026F:  MOVLW  11
0270:  BSF    03.6
0271:  MOVWF  0D
0272:  MOVLW  00
0273:  MOVWF  0F
0274:  BCF    03.6
0275:  CALL   103
.................... 
....................             lcd_gotoxy(1, 2);
0276:  MOVLW  01
0277:  MOVWF  2A
0278:  MOVLW  02
0279:  MOVWF  2B
027A:  CALL   0C5
....................             printf(lcd_putc, "SO LUONG = %02u", PRODUCT);
027B:  MOVLW  18
027C:  BSF    03.6
027D:  MOVWF  0D
027E:  MOVLW  00
027F:  MOVWF  0F
0280:  BCF    03.0
0281:  MOVLW  0B
0282:  BCF    03.6
0283:  MOVWF  25
0284:  GOTO   159
0285:  MOVF   20,W
0286:  MOVWF  25
0287:  MOVLW  01
0288:  MOVWF  26
0289:  GOTO   1C7
.................... 
....................             if (PRODUCT == 30)
028A:  MOVF   20,W
028B:  SUBLW  1E
028C:  BTFSS  03.2
028D:  GOTO   297
....................             {
....................                 setup_timer_1(T1_disabled);
028E:  CLRF   10
....................                 lcd_send_byte(0,1);
028F:  CLRF   2E
0290:  MOVLW  01
0291:  MOVWF  2F
0292:  CALL   047
....................                 lcd_send_byte(0,6);
0293:  CLRF   2E
0294:  MOVLW  06
0295:  MOVWF  2F
0296:  CALL   047
....................             }
....................             delay_ms(10);
0297:  MOVLW  0A
0298:  MOVWF  2A
0299:  CALL   020
....................         } 
....................         
....................         if (input(STOP) == 0)
029A:  BSF    03.5
029B:  BSF    06.1
029C:  BCF    03.5
029D:  BTFSC  06.1
029E:  GOTO   2AC
....................         {
.................... 
....................             delay_ms(50);
029F:  MOVLW  32
02A0:  MOVWF  2A
02A1:  CALL   020
....................             st = 2 ; 
02A2:  MOVLW  02
02A3:  MOVWF  21
....................             while (input(STOP) == 0) ;
02A4:  BSF    03.5
02A5:  BSF    06.1
02A6:  BCF    03.5
02A7:  BTFSS  06.1
02A8:  GOTO   2A4
....................             delay_ms(50);
02A9:  MOVLW  32
02AA:  MOVWF  2A
02AB:  CALL   020
....................         }
....................         if (st == 2){
02AC:  MOVF   21,W
02AD:  SUBLW  02
02AE:  BTFSC  03.2
....................             setup_timer_1(T1_disabled);
02AF:  CLRF   10
....................         }
02B0:  GOTO   24A
....................     }
.................... }
.................... 
02B1:  SLEEP

Configuration Fuses:
   Word  1: 2FE4   INTRC_IO NOWDT PUT MCLR NOPROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
