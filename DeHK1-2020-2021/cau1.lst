CCS PCM C Compiler, Version 5.109, 43599               29-May-23 23:55

               Filename:   E:\PIC 16F887\Code\DeHK1-2020-2021\cau1.lst

               ROM used:   248 words (3%)
                           Largest free fragment is 2048
               RAM used:   19 (5%) at main() level
                           24 (7%) worst case
               Stack used: 0 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   056
0003:  NOP
.................... #include <16F887.h>
.................... //////////// Standard Header file for the PIC16F887 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F887
*
0018:  MOVLW  10
0019:  MOVWF  30
001A:  CLRF   77
001B:  CLRF   7A
001C:  RRF    2D,F
001D:  RRF    2C,F
001E:  BTFSS  03.0
001F:  GOTO   026
0020:  MOVF   2E,W
0021:  ADDWF  77,F
0022:  BTFSC  03.0
0023:  INCF   7A,F
0024:  MOVF   2F,W
0025:  ADDWF  7A,F
0026:  RRF    7A,F
0027:  RRF    77,F
0028:  RRF    79,F
0029:  RRF    78,F
002A:  DECFSZ 30,F
002B:  GOTO   01C
002C:  BCF    0A.3
002D:  BCF    0A.4
002E:  GOTO   0CC (RETURN)
002F:  CLRF   78
0030:  CLRF   79
0031:  CLRF   77
0032:  CLRF   7A
0033:  MOVF   31,W
0034:  BTFSS  03.2
0035:  GOTO   039
0036:  MOVF   30,W
0037:  BTFSC  03.2
0038:  GOTO   053
0039:  MOVLW  10
003A:  MOVWF  32
003B:  BCF    03.0
003C:  RLF    2E,F
003D:  RLF    2F,F
003E:  RLF    77,F
003F:  RLF    7A,F
0040:  MOVF   31,W
0041:  SUBWF  7A,W
0042:  BTFSS  03.2
0043:  GOTO   046
0044:  MOVF   30,W
0045:  SUBWF  77,W
0046:  BTFSS  03.0
0047:  GOTO   04F
0048:  MOVF   30,W
0049:  SUBWF  77,F
004A:  BTFSS  03.0
004B:  DECF   7A,F
004C:  MOVF   31,W
004D:  SUBWF  7A,F
004E:  BSF    03.0
004F:  RLF    78,F
0050:  RLF    79,F
0051:  DECFSZ 32,F
0052:  GOTO   03B
0053:  BCF    0A.3
0054:  BCF    0A.4
0055:  GOTO   0D8 (RETURN)
.................... 
.................... #list
.................... 
.................... #fuses INTRC_IO
.................... #use delay(CLOCK=8MHz)
*
0004:  MOVLW  2C
0005:  MOVWF  04
0006:  BCF    03.7
0007:  MOVF   00,W
0008:  BTFSC  03.2
0009:  GOTO   017
000A:  MOVLW  02
000B:  MOVWF  78
000C:  CLRF   77
000D:  DECFSZ 77,F
000E:  GOTO   00D
000F:  DECFSZ 78,F
0010:  GOTO   00C
0011:  MOVLW  97
0012:  MOVWF  77
0013:  DECFSZ 77,F
0014:  GOTO   013
0015:  DECFSZ 00,F
0016:  GOTO   00A
0017:  RETURN
.................... 
.................... #define  RAND  PIN_B0
.................... 
.................... 
.................... unsigned int8 speed = 0 ; 
.................... char Code7Seg[10]={0xC0,0xF9,0xA4,0xB0,0x99,0x92,0x82,0xF8,0x80,0x90};
*
0072:  MOVLW  C0
0073:  BCF    03.6
0074:  MOVWF  21
0075:  MOVLW  F9
0076:  MOVWF  22
0077:  MOVLW  A4
0078:  MOVWF  23
0079:  MOVLW  B0
007A:  MOVWF  24
007B:  MOVLW  99
007C:  MOVWF  25
007D:  MOVLW  92
007E:  MOVWF  26
007F:  MOVLW  82
0080:  MOVWF  27
0081:  MOVLW  F8
0082:  MOVWF  28
0083:  MOVLW  80
0084:  MOVWF  29
0085:  MOVLW  90
0086:  MOVWF  2A
.................... 
.................... void main(){
*
0056:  MOVF   03,W
0057:  ANDLW  1F
0058:  MOVWF  03
0059:  MOVLW  71
005A:  BSF    03.5
005B:  MOVWF  0F
005C:  CLRF   10
005D:  MOVF   0F,W
005E:  BCF    03.5
005F:  CLRF   20
0060:  MOVLW  FF
0061:  MOVWF  2B
0062:  BSF    03.5
0063:  BSF    03.6
0064:  MOVF   09,W
0065:  ANDLW  C0
0066:  MOVWF  09
0067:  BCF    03.6
0068:  BCF    1F.4
0069:  BCF    1F.5
006A:  MOVLW  00
006B:  BSF    03.6
006C:  MOVWF  08
006D:  BCF    03.5
006E:  CLRF   07
006F:  CLRF   08
0070:  CLRF   09
0071:  BCF    03.7
....................    set_tris_d(0xff); 
*
0087:  MOVLW  FF
0088:  BSF    03.5
0089:  MOVWF  08
....................    set_tris_b(0x00);
008A:  MOVLW  00
008B:  MOVWF  06
....................    set_tris_c(0x00);
008C:  MOVWF  07
008D:  BCF    03.5
008E:  MOVWF  2B
....................    
....................    setup_ccp1(ccp_off); output_low(pin_C2);
008F:  MOVLW  F0
0090:  ANDWF  17,F
0091:  BCF    2B.2
0092:  MOVF   2B,W
0093:  BSF    03.5
0094:  MOVWF  07
0095:  BCF    03.5
0096:  BCF    07.2
....................    
....................    setup_timer_2(T2_DIV_BY_16,249,1);
0097:  MOVLW  00
0098:  MOVWF  78
0099:  IORLW  06
009A:  MOVWF  12
009B:  MOVLW  F9
009C:  BSF    03.5
009D:  MOVWF  12
....................    set_timer2(0);
009E:  BCF    03.5
009F:  CLRF   11
.................... 
.................... while(true){
....................    if(input(RAND) == 0 ){
00A0:  BSF    03.5
00A1:  BSF    06.0
00A2:  BCF    03.5
00A3:  BTFSC  06.0
00A4:  GOTO   0B1
....................       delay_ms(50);
00A5:  MOVLW  32
00A6:  MOVWF  2C
00A7:  CALL   004
....................       speed++ ;
00A8:  INCF   20,F
....................       while(input(RAND)==0);
00A9:  BSF    03.5
00AA:  BSF    06.0
00AB:  BCF    03.5
00AC:  BTFSS  06.0
00AD:  GOTO   0A9
....................       delay_ms(50);
00AE:  MOVLW  32
00AF:  MOVWF  2C
00B0:  CALL   004
....................    } else ; 
....................      if( speed > 9 ) speed = 0 ; 
00B1:  MOVF   20,W
00B2:  SUBLW  09
00B3:  BTFSC  03.0
00B4:  GOTO   0B6
00B5:  CLRF   20
....................      else ; 
....................      
....................    setup_ccp1(ccp_pwm); set_pwm1_duty(1000*speed/10) ; 
00B6:  BCF    2B.2
00B7:  MOVF   2B,W
00B8:  BSF    03.5
00B9:  MOVWF  07
00BA:  BCF    03.5
00BB:  BCF    07.2
00BC:  MOVLW  0C
00BD:  MOVWF  17
00BE:  BSF    03.5
00BF:  CLRF   1B
00C0:  CLRF   1C
00C1:  MOVLW  01
00C2:  MOVWF  1D
00C3:  MOVLW  03
00C4:  BCF    03.5
00C5:  MOVWF  2D
00C6:  MOVLW  E8
00C7:  MOVWF  2C
00C8:  CLRF   2F
00C9:  MOVF   20,W
00CA:  MOVWF  2E
00CB:  GOTO   018
00CC:  MOVF   79,W
00CD:  MOVWF  2D
00CE:  MOVF   78,W
00CF:  MOVWF  2C
00D0:  MOVF   79,W
00D1:  MOVWF  2F
00D2:  MOVF   78,W
00D3:  MOVWF  2E
00D4:  CLRF   31
00D5:  MOVLW  0A
00D6:  MOVWF  30
00D7:  GOTO   02F
00D8:  MOVF   79,W
00D9:  MOVWF  2D
00DA:  MOVF   78,W
00DB:  MOVWF  2C
00DC:  RRF    2D,F
00DD:  RRF    2C,F
00DE:  RRF    2D,F
00DF:  RRF    2C,F
00E0:  RRF    2D,F
00E1:  MOVF   2C,W
00E2:  MOVWF  15
00E3:  RRF    2D,F
00E4:  RRF    2D,W
00E5:  ANDLW  30
00E6:  MOVWF  77
00E7:  MOVF   17,W
00E8:  ANDLW  CF
00E9:  IORWF  77,W
00EA:  MOVWF  17
....................    
....................    output_d(Code7Seg[speed]) ; 
00EB:  MOVLW  21
00EC:  ADDWF  20,W
00ED:  MOVWF  04
00EE:  BCF    03.7
00EF:  MOVF   00,W
00F0:  MOVWF  2C
00F1:  BSF    03.5
00F2:  CLRF   08
00F3:  BCF    03.5
00F4:  MOVF   2C,W
00F5:  MOVWF  08
00F6:  GOTO   0A0
.................... }
.................... 
.................... }
00F7:  SLEEP

Configuration Fuses:
   Word  1: 2FE4   INTRC_IO NOWDT PUT MCLR NOPROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
