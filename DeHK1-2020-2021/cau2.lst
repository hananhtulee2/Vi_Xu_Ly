CCS PCM C Compiler, Version 5.109, 43599               30-May-23 00:20

               Filename:   E:\PIC 16F887\Code\DeHK1-2020-2021\cau2.lst

               ROM used:   943 words (12%)
                           Largest free fragment is 2048
               RAM used:   11 (3%) at main() level
                           25 (7%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  02
0001:  MOVWF  0A
0002:  GOTO   2A2
0003:  NOP
.................... #include <16F887.h>
.................... //////////// Standard Header file for the PIC16F887 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F887
0004:  DATA D1,2A
0005:  DATA 41,10
0006:  DATA 4E,24
0007:  DATA C9,22
0008:  DATA 54,10
0009:  DATA CB,18
000A:  DATA 00,00
000B:  DATA D1,2A
000C:  DATA 41,10
000D:  DATA 4E,24
000E:  DATA C9,22
000F:  DATA 54,10
0010:  DATA 4B,19
0011:  DATA 00,01
0012:  DATA D1,2A
0013:  DATA 41,10
0014:  DATA 4E,24
0015:  DATA C9,22
0016:  DATA 54,10
0017:  DATA B2,25
0018:  DATA 00,00
*
00BE:  MOVLW  8E
00BF:  MOVWF  77
00C0:  MOVF   27,W
00C1:  MOVWF  78
00C2:  MOVF   26,W
00C3:  MOVWF  79
00C4:  CLRF   7A
00C5:  MOVF   78,F
00C6:  BTFSS  03.2
00C7:  GOTO   0D2
00C8:  MOVF   79,W
00C9:  MOVWF  78
00CA:  CLRF   79
00CB:  MOVLW  08
00CC:  SUBWF  77,F
00CD:  MOVF   78,F
00CE:  BTFSS  03.2
00CF:  GOTO   0D2
00D0:  CLRF   77
00D1:  GOTO   0DA
00D2:  BCF    03.0
00D3:  BTFSC  78.7
00D4:  GOTO   0D9
00D5:  RLF    79,F
00D6:  RLF    78,F
00D7:  DECF   77,F
00D8:  GOTO   0D2
00D9:  BCF    78.7
00DA:  RETURN
00DB:  MOVF   26,W
00DC:  BTFSC  03.2
00DD:  GOTO   1A0
00DE:  MOVWF  32
00DF:  MOVF   2A,W
00E0:  BTFSC  03.2
00E1:  GOTO   1A0
00E2:  SUBWF  32,F
00E3:  BTFSS  03.0
00E4:  GOTO   0EA
00E5:  MOVLW  7F
00E6:  ADDWF  32,F
00E7:  BTFSC  03.0
00E8:  GOTO   1A0
00E9:  GOTO   0F0
00EA:  MOVLW  81
00EB:  SUBWF  32,F
00EC:  BTFSS  03.0
00ED:  GOTO   1A0
00EE:  BTFSC  03.2
00EF:  GOTO   1A0
00F0:  MOVF   32,W
00F1:  MOVWF  77
00F2:  CLRF   78
00F3:  CLRF   79
00F4:  CLRF   7A
00F5:  CLRF   31
00F6:  MOVF   27,W
00F7:  MOVWF  30
00F8:  BSF    30.7
00F9:  MOVF   28,W
00FA:  MOVWF  2F
00FB:  MOVF   29,W
00FC:  MOVWF  2E
00FD:  MOVLW  19
00FE:  MOVWF  32
00FF:  MOVF   2D,W
0100:  SUBWF  2E,F
0101:  BTFSC  03.0
0102:  GOTO   113
0103:  MOVLW  01
0104:  SUBWF  2F,F
0105:  BTFSC  03.0
0106:  GOTO   113
0107:  SUBWF  30,F
0108:  BTFSC  03.0
0109:  GOTO   113
010A:  SUBWF  31,F
010B:  BTFSC  03.0
010C:  GOTO   113
010D:  INCF   31,F
010E:  INCF   30,F
010F:  INCF   2F,F
0110:  MOVF   2D,W
0111:  ADDWF  2E,F
0112:  GOTO   145
0113:  MOVF   2C,W
0114:  SUBWF  2F,F
0115:  BTFSC  03.0
0116:  GOTO   12E
0117:  MOVLW  01
0118:  SUBWF  30,F
0119:  BTFSC  03.0
011A:  GOTO   12E
011B:  SUBWF  31,F
011C:  BTFSC  03.0
011D:  GOTO   12E
011E:  INCF   31,F
011F:  INCF   30,F
0120:  MOVF   2C,W
0121:  ADDWF  2F,F
0122:  MOVF   2D,W
0123:  ADDWF  2E,F
0124:  BTFSS  03.0
0125:  GOTO   145
0126:  INCF   2F,F
0127:  BTFSS  03.2
0128:  GOTO   145
0129:  INCF   30,F
012A:  BTFSS  03.2
012B:  GOTO   145
012C:  INCF   31,F
012D:  GOTO   145
012E:  MOVF   2B,W
012F:  IORLW  80
0130:  SUBWF  30,F
0131:  BTFSC  03.0
0132:  GOTO   144
0133:  MOVLW  01
0134:  SUBWF  31,F
0135:  BTFSC  03.0
0136:  GOTO   144
0137:  INCF   31,F
0138:  MOVF   2B,W
0139:  IORLW  80
013A:  ADDWF  30,F
013B:  MOVF   2C,W
013C:  ADDWF  2F,F
013D:  BTFSS  03.0
013E:  GOTO   122
013F:  INCF   30,F
0140:  BTFSS  03.2
0141:  GOTO   122
0142:  INCF   31,F
0143:  GOTO   122
0144:  BSF    7A.0
0145:  DECFSZ 32,F
0146:  GOTO   148
0147:  GOTO   153
0148:  BCF    03.0
0149:  RLF    2E,F
014A:  RLF    2F,F
014B:  RLF    30,F
014C:  RLF    31,F
014D:  BCF    03.0
014E:  RLF    7A,F
014F:  RLF    79,F
0150:  RLF    78,F
0151:  RLF    33,F
0152:  GOTO   0FF
0153:  BTFSS  33.0
0154:  GOTO   15B
0155:  BCF    03.0
0156:  RRF    78,F
0157:  RRF    79,F
0158:  RRF    7A,F
0159:  RRF    33,F
015A:  GOTO   15E
015B:  DECF   77,F
015C:  BTFSC  03.2
015D:  GOTO   1A0
015E:  BTFSC  33.7
015F:  GOTO   187
0160:  BCF    03.0
0161:  RLF    2E,F
0162:  RLF    2F,F
0163:  RLF    30,F
0164:  RLF    31,F
0165:  MOVF   2D,W
0166:  SUBWF  2E,F
0167:  BTFSC  03.0
0168:  GOTO   173
0169:  MOVLW  01
016A:  SUBWF  2F,F
016B:  BTFSC  03.0
016C:  GOTO   173
016D:  SUBWF  30,F
016E:  BTFSC  03.0
016F:  GOTO   173
0170:  SUBWF  31,F
0171:  BTFSS  03.0
0172:  GOTO   196
0173:  MOVF   2C,W
0174:  SUBWF  2F,F
0175:  BTFSC  03.0
0176:  GOTO   17E
0177:  MOVLW  01
0178:  SUBWF  30,F
0179:  BTFSC  03.0
017A:  GOTO   17E
017B:  SUBWF  31,F
017C:  BTFSS  03.0
017D:  GOTO   196
017E:  MOVF   2B,W
017F:  IORLW  80
0180:  SUBWF  30,F
0181:  BTFSC  03.0
0182:  GOTO   187
0183:  MOVLW  01
0184:  SUBWF  31,F
0185:  BTFSS  03.0
0186:  GOTO   196
0187:  INCF   7A,F
0188:  BTFSS  03.2
0189:  GOTO   196
018A:  INCF   79,F
018B:  BTFSS  03.2
018C:  GOTO   196
018D:  INCF   78,F
018E:  BTFSS  03.2
018F:  GOTO   196
0190:  INCF   77,F
0191:  BTFSC  03.2
0192:  GOTO   1A0
0193:  RRF    78,F
0194:  RRF    79,F
0195:  RRF    7A,F
0196:  MOVF   27,W
0197:  MOVWF  32
0198:  MOVF   2B,W
0199:  XORWF  32,F
019A:  BTFSS  32.7
019B:  GOTO   19E
019C:  BSF    78.7
019D:  GOTO   1A4
019E:  BCF    78.7
019F:  GOTO   1A4
01A0:  CLRF   77
01A1:  CLRF   78
01A2:  CLRF   79
01A3:  CLRF   7A
01A4:  RETURN
01A5:  MOVLW  8E
01A6:  MOVWF  77
01A7:  MOVF   24,W
01A8:  SUBWF  77,F
01A9:  MOVF   25,W
01AA:  MOVWF  79
01AB:  MOVF   26,W
01AC:  MOVWF  78
01AD:  BSF    79.7
01AE:  MOVF   77,F
01AF:  BTFSC  03.2
01B0:  GOTO   1BC
01B1:  BCF    03.0
01B2:  MOVF   79,F
01B3:  BTFSS  03.2
01B4:  GOTO   1B8
01B5:  MOVF   78,F
01B6:  BTFSC  03.2
01B7:  GOTO   1BC
01B8:  RRF    79,F
01B9:  RRF    78,F
01BA:  DECFSZ 77,F
01BB:  GOTO   1B1
01BC:  BTFSS  25.7
01BD:  GOTO   1C3
01BE:  COMF   78,F
01BF:  COMF   79,F
01C0:  INCF   78,F
01C1:  BTFSC  03.2
01C2:  INCF   79,F
01C3:  RETURN
*
0202:  MOVF   27,W
0203:  CLRF   78
0204:  SUBWF  26,W
0205:  BTFSC  03.0
0206:  GOTO   20A
0207:  MOVF   26,W
0208:  MOVWF  77
0209:  GOTO   216
020A:  CLRF   77
020B:  MOVLW  08
020C:  MOVWF  28
020D:  RLF    26,F
020E:  RLF    77,F
020F:  MOVF   27,W
0210:  SUBWF  77,W
0211:  BTFSC  03.0
0212:  MOVWF  77
0213:  RLF    78,F
0214:  DECFSZ 28,F
0215:  GOTO   20D
0216:  RETURN
0217:  MOVF   78,W
0218:  MOVF   24,W
0219:  MOVWF  26
021A:  MOVLW  64
021B:  MOVWF  27
021C:  CALL   202
021D:  MOVF   77,W
021E:  MOVWF  24
021F:  MOVF   78,W
0220:  MOVLW  30
0221:  BTFSS  03.2
0222:  GOTO   22A
0223:  BTFSS  25.1
0224:  GOTO   231
0225:  BTFSC  25.3
0226:  GOTO   231
0227:  BTFSC  25.4
0228:  MOVLW  20
0229:  GOTO   22D
022A:  BCF    25.3
022B:  BCF    25.4
022C:  BSF    25.0
022D:  ADDWF  78,F
022E:  MOVF   78,W
022F:  MOVWF  27
0230:  CALL   1D6
0231:  MOVF   24,W
0232:  MOVWF  26
0233:  MOVLW  0A
0234:  MOVWF  27
0235:  CALL   202
0236:  MOVF   77,W
0237:  MOVWF  24
0238:  MOVF   78,W
0239:  MOVLW  30
023A:  BTFSS  03.2
023B:  GOTO   242
023C:  BTFSC  25.3
023D:  GOTO   246
023E:  BTFSS  25.0
023F:  GOTO   246
0240:  BTFSC  25.4
0241:  MOVLW  20
0242:  ADDWF  78,F
0243:  MOVF   78,W
0244:  MOVWF  27
0245:  CALL   1D6
0246:  MOVLW  30
0247:  ADDWF  24,F
0248:  MOVF   24,W
0249:  MOVWF  27
024A:  CALL   1D6
024B:  RETURN
024C:  MOVF   0B,W
024D:  MOVWF  24
024E:  BCF    0B.7
024F:  BSF    03.5
0250:  BSF    03.6
0251:  BSF    0C.7
0252:  BSF    0C.0
0253:  NOP
0254:  NOP
0255:  BCF    03.5
0256:  BCF    03.6
0257:  BTFSC  24.7
0258:  BSF    0B.7
0259:  BSF    03.6
025A:  MOVF   0C,W
025B:  ANDLW  7F
025C:  BTFSC  03.2
025D:  GOTO   2A0
025E:  BCF    03.6
025F:  MOVWF  24
0260:  BSF    03.6
0261:  MOVF   0D,W
0262:  BCF    03.6
0263:  MOVWF  25
0264:  BSF    03.6
0265:  MOVF   0F,W
0266:  BCF    03.6
0267:  MOVWF  26
0268:  MOVF   24,W
0269:  MOVWF  27
026A:  CALL   1D6
026B:  MOVF   25,W
026C:  BSF    03.6
026D:  MOVWF  0D
026E:  BCF    03.6
026F:  MOVF   26,W
0270:  BSF    03.6
0271:  MOVWF  0F
0272:  BCF    03.6
0273:  MOVF   0B,W
0274:  MOVWF  27
0275:  BCF    0B.7
0276:  BSF    03.5
0277:  BSF    03.6
0278:  BSF    0C.7
0279:  BSF    0C.0
027A:  NOP
027B:  NOP
027C:  BCF    03.5
027D:  BCF    03.6
027E:  BTFSC  27.7
027F:  BSF    0B.7
0280:  BSF    03.6
0281:  RLF    0C,W
0282:  RLF    0E,W
0283:  ANDLW  7F
0284:  BTFSC  03.2
0285:  GOTO   2A0
0286:  BCF    03.6
0287:  MOVWF  24
0288:  BSF    03.6
0289:  MOVF   0D,W
028A:  BCF    03.6
028B:  MOVWF  25
028C:  BSF    03.6
028D:  MOVF   0F,W
028E:  BCF    03.6
028F:  MOVWF  26
0290:  MOVF   24,W
0291:  MOVWF  27
0292:  CALL   1D6
0293:  MOVF   25,W
0294:  BSF    03.6
0295:  MOVWF  0D
0296:  BCF    03.6
0297:  MOVF   26,W
0298:  BSF    03.6
0299:  MOVWF  0F
029A:  INCF   0D,F
029B:  BTFSC  03.2
029C:  INCF   0F,F
029D:  BCF    03.6
029E:  GOTO   24C
029F:  BSF    03.6
02A0:  BCF    03.6
02A1:  RETURN
.................... 
.................... #list
.................... 
.................... #device ADC=10
.................... #fuses INTRC_IO
.................... #use delay(CLOCK=8MHz)
*
0019:  MOVLW  29
001A:  MOVWF  04
001B:  BCF    03.7
001C:  MOVF   00,W
001D:  BTFSC  03.2
001E:  GOTO   02C
001F:  MOVLW  02
0020:  MOVWF  78
0021:  CLRF   77
0022:  DECFSZ 77,F
0023:  GOTO   022
0024:  DECFSZ 78,F
0025:  GOTO   021
0026:  MOVLW  97
0027:  MOVWF  77
0028:  DECFSZ 77,F
0029:  GOTO   028
002A:  DECFSZ 00,F
002B:  GOTO   01F
002C:  RETURN
.................... #include <lcd.c>
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////                             LCD.C                                     ////
.................... ////                 Driver for common LCD modules                         ////
.................... ////                                                                       ////
.................... ////  lcd_init()   Must be called before any other function.               ////
.................... ////                                                                       ////
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         ////
.................... ////                 \a  Set cursor position to upper left                 ////
.................... ////                 \f  Clear display, set cursor to upper left           ////
.................... ////                 \n  Go to start of second line                        ////
.................... ////                 \b  Move back one position                            ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     ////
.................... ////              will erase all remanining characters on the current      ////
.................... ////              line, and move the cursor to the beginning of the next   ////
.................... ////              line.                                                    ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     ////
.................... ////              will move the cursor to the start of the current         ////
.................... ////              line.                                                    ////
.................... ////                                                                       ////
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        ////
.................... ////                                                                       ////
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             ////
.................... ////                                                                       ////
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         ////
.................... ////              (on=FALSE).                                              ////
.................... ////                                                                       ////
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   ////
.................... ////                                                                       ////
.................... ////                                                                       ////
.................... ////  CONFIGURATION                                                        ////
.................... ////  The LCD can be configured in one of two ways: a.) port access or     ////
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     ////
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     ////
.................... ////  connected to sequential pins on the GPIO.  Pin access                ////
.................... ////  has no requirements, all 7 bits of the control interface can         ////
.................... ////  can be connected to any GPIO using several ports.                    ////
.................... ////                                                                       ////
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     ////
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    ////
.................... ////  of this file to configure the pin order.  If you are using a         ////
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  ////
.................... ////  be defined.                                                          ////
.................... ////                                                                       ////
.................... ////  Example of port access:                                              ////
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         ////
.................... ////                                                                       ////
.................... ////  To use pin access, the following pins must be defined:               ////
.................... ////     LCD_ENABLE_PIN                                                    ////
.................... ////     LCD_RS_PIN                                                        ////
.................... ////     LCD_RW_PIN                                                        ////
.................... ////     LCD_DATA4                                                         ////
.................... ////     LCD_DATA5                                                         ////
.................... ////     LCD_DATA6                                                         ////
.................... ////     LCD_DATA7                                                         ////
.................... ////                                                                       ////
.................... ////  Example of pin access:                                               ////
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    ////
.................... ////     #define LCD_RS_PIN      PIN_E1                                    ////
.................... ////     #define LCD_RW_PIN      PIN_E2                                    ////
.................... ////     #define LCD_DATA4       PIN_D4                                    ////
.................... ////     #define LCD_DATA5       PIN_D5                                    ////
.................... ////     #define LCD_DATA6       PIN_D6                                    ////
.................... ////     #define LCD_DATA7       PIN_D7                                    ////
.................... ////                                                                       ////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef __LCD_C__
.................... #define __LCD_C__
.................... 
.................... // define the pinout.
.................... // only required if port access is being used.
.................... typedef struct  
.................... {                            // This structure is overlayed
....................    int1 enable;           // on to an I/O port to gain
....................    int1 rs;               // access to the LCD pins.
....................    int1 rw;               // The bits are allocated from
....................    int1 unused;           // low order up.  ENABLE will
....................    unsigned int     data : 4;         // be LSB pin of that port.
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT.
....................    unsigned int    reserved: 8;
....................   #endif
.................... } LCD_PIN_MAP;
.................... 
.................... // this is to improve compatability with previous LCD drivers that accepted
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B.
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE))
....................  #define LCD_DATA_PORT getenv("SFR:PORTB")
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    // these definitions only need to be modified for baseline PICs.
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions.
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0};
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF};
.................... #endif
.................... 
.................... ////////////////////// END CONFIGURATION ///////////////////////////////////
.................... 
.................... #ifndef LCD_ENABLE_PIN
....................    #define lcd_output_enable(x) lcdlat.enable=x
....................    #define lcd_enable_tris()   lcdtris.enable=0
.................... #else
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x)
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RS_PIN
....................    #define lcd_output_rs(x) lcdlat.rs=x
....................    #define lcd_rs_tris()   lcdtris.rs=0
.................... #else
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x)
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RW_PIN
....................    #define lcd_output_rw(x) lcdlat.rw=x
....................    #define lcd_rw_tris()   lcdtris.rw=0
.................... #else
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x)
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN)
.................... #endif
.................... 
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4,
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver
.................... // compatible with any code written for the original library
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7))
....................    #define  LCD_DATA4    LCD_DATA0
....................    #define  LCD_DATA5    LCD_DATA1
....................    #define  LCD_DATA6    LCD_DATA2
....................    #define  LCD_DATA7    LCD_DATA3
.................... #endif
.................... 
.................... #ifndef LCD_DATA4
.................... #ifndef LCD_DATA_PORT
....................    #if defined(__PCB__)
....................       #define LCD_DATA_PORT      0x06     //portb
....................       #define set_tris_lcd(x)   set_tris_b(x)
....................    #else
....................      #if defined(PIN_D0)
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd
....................      #else
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb
....................      #endif
....................    #endif   
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    LCD_PIN_MAP lcd, lcdlat;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
.................... #elif defined(__PCM__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
....................    #byte lcdtris = LCD_DATA_PORT+0x80
.................... #elif defined(__PCH__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT+9
....................    #byte lcdtris = LCD_DATA_PORT+0x12
.................... #elif defined(__PCD__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #word lcd = LCD_DATA_PORT
....................    #word lcdlat = LCD_DATA_PORT+2
....................    #word lcdtris = LCD_DATA_PORT-0x02
.................... #endif
.................... #endif   //LCD_DATA4 not defined
.................... 
.................... #ifndef LCD_TYPE
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines
.................... #endif
.................... 
.................... #ifndef LCD_LINE_TWO
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line
.................... #endif
.................... 
.................... #ifndef LCD_LINE_LENGTH
....................    #define LCD_LINE_LENGTH 20
.................... #endif
.................... 
.................... unsigned int8 lcd_read_nibble(void);
.................... 
.................... unsigned int8 lcd_read_byte(void)
.................... {
....................    unsigned int8 low,high;
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_INPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_float(LCD_DATA4);
....................    output_float(LCD_DATA5);
....................    output_float(LCD_DATA6);
....................    output_float(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0xF;
*
0046:  MOVLW  0F
0047:  BSF    03.5
0048:  ANDWF  08,W
0049:  IORLW  F0
004A:  MOVWF  08
....................   #endif
....................  #endif
....................         
....................    lcd_output_rw(1);
004B:  BCF    03.5
004C:  BSF    08.2
....................    delay_cycles(1);
004D:  NOP
....................    lcd_output_enable(1);
004E:  BSF    08.0
....................    delay_cycles(1);
004F:  NOP
....................    high = lcd_read_nibble();
0050:  CALL   03A
0051:  MOVF   78,W
0052:  MOVWF  2F
....................       
....................    lcd_output_enable(0);
0053:  BCF    08.0
....................    delay_cycles(1);
0054:  NOP
....................    lcd_output_enable(1);
0055:  BSF    08.0
....................    delay_us(1);
0056:  GOTO   057
....................    low = lcd_read_nibble();
0057:  CALL   03A
0058:  MOVF   78,W
0059:  MOVWF  2E
....................       
....................    lcd_output_enable(0);
005A:  BCF    08.0
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
....................    output_drive(LCD_DATA5);
....................    output_drive(LCD_DATA6);
....................    output_drive(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0x0;
005B:  MOVLW  0F
005C:  BSF    03.5
005D:  ANDWF  08,W
005E:  MOVWF  08
....................   #endif
....................  #endif
.................... 
....................    return( (high<<4) | low);
005F:  BCF    03.5
0060:  SWAPF  2F,W
0061:  MOVWF  77
0062:  MOVLW  F0
0063:  ANDWF  77,F
0064:  MOVF   77,W
0065:  IORWF  2E,W
0066:  MOVWF  78
.................... }
.................... 
.................... unsigned int8 lcd_read_nibble(void)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    unsigned int8 n = 0x00;
.................... 
....................    /* Read the data port */
....................    n |= input(LCD_DATA4);
....................    n |= input(LCD_DATA5) << 1;
....................    n |= input(LCD_DATA6) << 2;
....................    n |= input(LCD_DATA7) << 3;
....................    
....................    return(n);
....................   #else
....................    return(lcd.data);
*
003A:  MOVF   08,W
003B:  MOVWF  77
003C:  SWAPF  08,W
003D:  ANDLW  0F
003E:  MOVWF  78
....................   #endif
003F:  RETURN
.................... }
.................... 
.................... void lcd_send_nibble(unsigned int8 n)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    /* Write to the data port */
....................    output_bit(LCD_DATA4, bit_test(n, 0));
....................    output_bit(LCD_DATA5, bit_test(n, 1));
....................    output_bit(LCD_DATA6, bit_test(n, 2));
....................    output_bit(LCD_DATA7, bit_test(n, 3));
....................   #else      
....................    lcdlat.data = n;
*
002D:  SWAPF  2F,W
002E:  ANDLW  F0
002F:  MOVWF  77
0030:  MOVLW  0F
0031:  ANDWF  08,W
0032:  IORWF  77,W
0033:  MOVWF  08
....................   #endif
....................       
....................    delay_cycles(1);
0034:  NOP
....................    lcd_output_enable(1);
0035:  BSF    08.0
....................    delay_us(2);
0036:  GOTO   037
0037:  GOTO   038
....................    lcd_output_enable(0);
0038:  BCF    08.0
0039:  RETURN
.................... }
.................... 
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n)
.................... {
....................   #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................   #else
....................    lcd_enable_tris();
*
0040:  BSF    03.5
0041:  BCF    08.0
....................    lcd_rs_tris();
0042:  BCF    08.1
....................    lcd_rw_tris();
0043:  BCF    08.2
....................   #endif
.................... 
....................    lcd_output_rs(0);
0044:  BCF    03.5
0045:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ;
*
0067:  MOVF   78,W
0068:  MOVWF  2E
0069:  BTFSC  2E.7
006A:  GOTO   046
....................    lcd_output_rs(address);
006B:  BTFSS  2C.0
006C:  BCF    08.1
006D:  BTFSC  2C.0
006E:  BSF    08.1
....................    delay_cycles(1);
006F:  NOP
....................    lcd_output_rw(0);
0070:  BCF    08.2
....................    delay_cycles(1);
0071:  NOP
....................    lcd_output_enable(0);
0072:  BCF    08.0
....................    lcd_send_nibble(n >> 4);
0073:  SWAPF  2D,W
0074:  MOVWF  2E
0075:  MOVLW  0F
0076:  ANDWF  2E,F
0077:  MOVF   2E,W
0078:  MOVWF  2F
0079:  CALL   02D
....................    lcd_send_nibble(n & 0xf);
007A:  MOVF   2D,W
007B:  ANDLW  0F
007C:  MOVWF  2E
007D:  MOVWF  2F
007E:  CALL   02D
007F:  RETURN
.................... }
.................... 
.................... #if defined(LCD_EXTENDED_NEWLINE)
.................... unsigned int8 g_LcdX, g_LcdY;
.................... #endif
.................... 
.................... void lcd_init(void) 
.................... {
....................    unsigned int8 i;
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6};
0080:  MOVLW  28
0081:  MOVWF  25
0082:  MOVLW  0C
0083:  MOVWF  26
0084:  MOVLW  01
0085:  MOVWF  27
0086:  MOVLW  06
0087:  MOVWF  28
....................                              // These bytes need to be sent to the LCD
....................                              // to start it up.
....................    
.................... 
....................    lcd_output_enable(0);
0088:  BCF    08.0
....................    lcd_output_rs(0);
0089:  BCF    08.1
....................    lcd_output_rw(0);
008A:  BCF    08.2
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
....................    output_drive(LCD_DATA5);
....................    output_drive(LCD_DATA6);
....................    output_drive(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0x0;
008B:  MOVLW  0F
008C:  BSF    03.5
008D:  ANDWF  08,W
008E:  MOVWF  08
....................   #endif
....................    lcd_enable_tris();
008F:  BCF    08.0
....................    lcd_rs_tris();
0090:  BCF    08.1
....................    lcd_rw_tris();
0091:  BCF    08.2
....................  #endif
....................     
....................    delay_ms(15);
0092:  MOVLW  0F
0093:  BCF    03.5
0094:  MOVWF  29
0095:  CALL   019
....................    for(i=1;i<=3;++i)
0096:  MOVLW  01
0097:  MOVWF  24
0098:  MOVF   24,W
0099:  SUBLW  03
009A:  BTFSS  03.0
009B:  GOTO   0A4
....................    {
....................        lcd_send_nibble(3);
009C:  MOVLW  03
009D:  MOVWF  2F
009E:  CALL   02D
....................        delay_ms(5);
009F:  MOVLW  05
00A0:  MOVWF  29
00A1:  CALL   019
00A2:  INCF   24,F
00A3:  GOTO   098
....................    }
....................    
....................    lcd_send_nibble(2);
00A4:  MOVLW  02
00A5:  MOVWF  2F
00A6:  CALL   02D
....................    delay_ms(5);
00A7:  MOVLW  05
00A8:  MOVWF  29
00A9:  CALL   019
....................    for(i=0;i<=3;++i)
00AA:  CLRF   24
00AB:  MOVF   24,W
00AC:  SUBLW  03
00AD:  BTFSS  03.0
00AE:  GOTO   0BB
....................       lcd_send_byte(0,LCD_INIT_STRING[i]);
00AF:  MOVLW  25
00B0:  ADDWF  24,W
00B1:  MOVWF  04
00B2:  BCF    03.7
00B3:  MOVF   00,W
00B4:  MOVWF  29
00B5:  CLRF   2C
00B6:  MOVF   29,W
00B7:  MOVWF  2D
00B8:  CALL   040
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
00B9:  INCF   24,F
00BA:  GOTO   0AB
00BB:  BCF    0A.3
00BC:  BCF    0A.4
00BD:  GOTO   2D6 (RETURN)
....................    g_LcdX = 0;
....................    g_LcdY = 0;
....................   #endif
.................... }
.................... 
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y)
.................... {
....................    unsigned int8 address;
....................    
....................    if(y!=1)
*
01C4:  DECFSZ 29,W
01C5:  GOTO   1C7
01C6:  GOTO   1CA
....................       address=LCD_LINE_TWO;
01C7:  MOVLW  40
01C8:  MOVWF  2A
01C9:  GOTO   1CB
....................    else
....................       address=0;
01CA:  CLRF   2A
....................      
....................    address+=x-1;
01CB:  MOVLW  01
01CC:  SUBWF  28,W
01CD:  ADDWF  2A,F
....................    lcd_send_byte(0,0x80|address);
01CE:  MOVF   2A,W
01CF:  IORLW  80
01D0:  MOVWF  2B
01D1:  CLRF   2C
01D2:  MOVF   2B,W
01D3:  MOVWF  2D
01D4:  CALL   040
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
01D5:  RETURN
....................    g_LcdX = x - 1;
....................    g_LcdY = y - 1;
....................   #endif
.................... }
.................... 
.................... void lcd_putc(char c)
.................... {
....................    switch (c)
01D6:  MOVF   27,W
01D7:  XORLW  07
01D8:  BTFSC  03.2
01D9:  GOTO   1E4
01DA:  XORLW  0B
01DB:  BTFSC  03.2
01DC:  GOTO   1E9
01DD:  XORLW  06
01DE:  BTFSC  03.2
01DF:  GOTO   1F1
01E0:  XORLW  02
01E1:  BTFSC  03.2
01E2:  GOTO   1F7
01E3:  GOTO   1FC
....................    {
....................       case '\a'   :  lcd_gotoxy(1,1);     break;
01E4:  MOVLW  01
01E5:  MOVWF  28
01E6:  MOVWF  29
01E7:  CALL   1C4
01E8:  GOTO   201
.................... 
....................       case '\f'   :  lcd_send_byte(0,1);
01E9:  CLRF   2C
01EA:  MOVLW  01
01EB:  MOVWF  2D
01EC:  CALL   040
....................                      delay_ms(2);
01ED:  MOVLW  02
01EE:  MOVWF  29
01EF:  CALL   019
....................                     #if defined(LCD_EXTENDED_NEWLINE)
....................                      g_LcdX = 0;
....................                      g_LcdY = 0;
....................                     #endif
....................                      break;
01F0:  GOTO   201
.................... 
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break;
....................       case '\n'   :
....................          while (g_LcdX++ < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, ' ');
....................          }
....................          lcd_gotoxy(1, g_LcdY+2);
....................          break;
....................      #else
....................       case '\n'   : lcd_gotoxy(1,2);        break;
01F1:  MOVLW  01
01F2:  MOVWF  28
01F3:  MOVLW  02
01F4:  MOVWF  29
01F5:  CALL   1C4
01F6:  GOTO   201
....................      #endif
....................      
....................       case '\b'   : lcd_send_byte(0,0x10);  break;
01F7:  CLRF   2C
01F8:  MOVLW  10
01F9:  MOVWF  2D
01FA:  CALL   040
01FB:  GOTO   201
....................      
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       default     : 
....................          if (g_LcdX < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, c);
....................             g_LcdX++;
....................          }
....................          break;
....................      #else
....................       default     : lcd_send_byte(1,c);     break;
01FC:  MOVLW  01
01FD:  MOVWF  2C
01FE:  MOVF   27,W
01FF:  MOVWF  2D
0200:  CALL   040
....................      #endif
....................    }
0201:  RETURN
.................... }
....................  
.................... char lcd_getc(unsigned int8 x, unsigned int8 y)
.................... {
....................    char value;
.................... 
....................    lcd_gotoxy(x,y);
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low
....................    lcd_output_rs(1);
....................    value = lcd_read_byte();
....................    lcd_output_rs(0);
....................    
....................    return(value);
.................... }
.................... 
.................... // write a custom character to the ram
.................... // which is 0-7 and specifies which character array we are modifying.
.................... // ptr points to an array of 8 bytes, where each byte is the next row of
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and
.................... //    usually you will want to leave this byte 0x00.
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr)
.................... {
....................    unsigned int i;
.................... 
....................    which <<= 3;
....................    which &= 0x38;
.................... 
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address
.................... 
....................    for(i=0; i<8; i++)
....................    {
....................       lcd_send_byte(1, *ptr++);
....................    }
....................   
....................    #if defined(LCD_EXTENDED_NEWLINE)
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address
....................    #endif
.................... }
.................... 
.................... void lcd_cursor_on(int1 on)
.................... {
....................    if (on)
....................    {
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON
....................    }
....................    else
....................    {
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF
....................    }
.................... }
.................... 
.................... #endif
.................... 
.................... 
.................... unsigned int8 T1 ; 
.................... unsigned int8 T2 ; 
.................... 
.................... void main(){ 
*
02A2:  MOVF   03,W
02A3:  ANDLW  1F
02A4:  MOVWF  03
02A5:  MOVLW  71
02A6:  BSF    03.5
02A7:  MOVWF  0F
02A8:  CLRF   10
02A9:  MOVF   0F,W
02AA:  BCF    03.5
02AB:  CLRF   23
02AC:  CLRF   22
02AD:  BSF    03.5
02AE:  BSF    03.6
02AF:  MOVF   09,W
02B0:  ANDLW  C0
02B1:  MOVWF  09
02B2:  BCF    03.6
02B3:  BCF    1F.4
02B4:  BCF    1F.5
02B5:  MOVLW  00
02B6:  BSF    03.6
02B7:  MOVWF  08
02B8:  BCF    03.5
02B9:  CLRF   07
02BA:  CLRF   08
02BB:  CLRF   09
02BC:  BCF    03.7
....................    set_tris_a(0xff) ; 
02BD:  MOVLW  FF
02BE:  BSF    03.5
02BF:  BCF    03.6
02C0:  MOVWF  05
....................    
....................    setup_adc(adc_clock_internal);
02C1:  BCF    03.5
02C2:  BSF    1F.6
02C3:  BSF    1F.7
02C4:  BSF    03.5
02C5:  BSF    1F.7
02C6:  BCF    03.5
02C7:  BSF    1F.0
....................    setup_adc_ports(SAN1|SAN2|VSS_VDD);
02C8:  BSF    03.5
02C9:  BSF    03.6
02CA:  MOVF   09,W
02CB:  ANDLW  C0
02CC:  MOVWF  09
02CD:  BCF    03.6
02CE:  BCF    1F.4
02CF:  BCF    1F.5
02D0:  MOVLW  06
02D1:  BSF    03.6
02D2:  MOVWF  08
....................    
....................    lcd_init();
02D3:  BCF    03.5
02D4:  BCF    03.6
02D5:  GOTO   080
.................... 
.................... 
.................... while(true){
....................    set_adc_channel(1);
02D6:  MOVLW  04
02D7:  MOVWF  78
02D8:  MOVF   1F,W
02D9:  ANDLW  C3
02DA:  IORWF  78,W
02DB:  MOVWF  1F
....................    T1 = read_adc()/2.046;
02DC:  BSF    1F.1
02DD:  BTFSC  1F.1
02DE:  GOTO   2DD
02DF:  MOVF   1E,W
02E0:  MOVWF  79
02E1:  BSF    03.5
02E2:  MOVF   1E,W
02E3:  MOVWF  78
02E4:  MOVF   79,W
02E5:  BCF    03.5
02E6:  MOVWF  25
02E7:  MOVF   78,W
02E8:  MOVWF  24
02E9:  MOVF   25,W
02EA:  MOVWF  27
02EB:  MOVF   78,W
02EC:  MOVWF  26
02ED:  CALL   0BE
02EE:  MOVF   7A,W
02EF:  MOVWF  29
02F0:  MOVF   79,W
02F1:  MOVWF  28
02F2:  MOVF   78,W
02F3:  MOVWF  27
02F4:  MOVF   77,W
02F5:  MOVWF  26
02F6:  MOVLW  AA
02F7:  MOVWF  2D
02F8:  MOVLW  F1
02F9:  MOVWF  2C
02FA:  MOVLW  02
02FB:  MOVWF  2B
02FC:  MOVLW  80
02FD:  MOVWF  2A
02FE:  CALL   0DB
02FF:  MOVF   7A,W
0300:  MOVWF  27
0301:  MOVF   79,W
0302:  MOVWF  26
0303:  MOVF   78,W
0304:  MOVWF  25
0305:  MOVF   77,W
0306:  MOVWF  24
0307:  CALL   1A5
0308:  MOVF   78,W
0309:  MOVWF  20
....................    set_adc_channel(2);
030A:  MOVLW  08
030B:  MOVWF  78
030C:  MOVF   1F,W
030D:  ANDLW  C3
030E:  IORWF  78,W
030F:  MOVWF  1F
....................    T2= read_adc()/2.046;
0310:  BSF    1F.1
0311:  BTFSC  1F.1
0312:  GOTO   311
0313:  MOVF   1E,W
0314:  MOVWF  79
0315:  BSF    03.5
0316:  MOVF   1E,W
0317:  MOVWF  78
0318:  MOVF   79,W
0319:  BCF    03.5
031A:  MOVWF  25
031B:  MOVF   78,W
031C:  MOVWF  24
031D:  MOVF   25,W
031E:  MOVWF  27
031F:  MOVF   78,W
0320:  MOVWF  26
0321:  CALL   0BE
0322:  MOVF   7A,W
0323:  MOVWF  29
0324:  MOVF   79,W
0325:  MOVWF  28
0326:  MOVF   78,W
0327:  MOVWF  27
0328:  MOVF   77,W
0329:  MOVWF  26
032A:  MOVLW  AA
032B:  MOVWF  2D
032C:  MOVLW  F1
032D:  MOVWF  2C
032E:  MOVLW  02
032F:  MOVWF  2B
0330:  MOVLW  80
0331:  MOVWF  2A
0332:  CALL   0DB
0333:  MOVF   7A,W
0334:  MOVWF  27
0335:  MOVF   79,W
0336:  MOVWF  26
0337:  MOVF   78,W
0338:  MOVWF  25
0339:  MOVF   77,W
033A:  MOVWF  24
033B:  CALL   1A5
033C:  MOVF   78,W
033D:  MOVWF  21
....................    
....................    lcd_gotoxy(1,1);
033E:  MOVLW  01
033F:  MOVWF  28
0340:  MOVWF  29
0341:  CALL   1C4
....................    printf(lcd_putc,"T1=%03u",T1);
0342:  MOVLW  54
0343:  MOVWF  27
0344:  CALL   1D6
0345:  MOVLW  31
0346:  MOVWF  27
0347:  CALL   1D6
0348:  MOVLW  3D
0349:  MOVWF  27
034A:  CALL   1D6
034B:  MOVF   20,W
034C:  MOVWF  24
034D:  MOVLW  03
034E:  MOVWF  25
034F:  CALL   217
....................    lcd_putc(223);
0350:  MOVLW  DF
0351:  MOVWF  27
0352:  CALL   1D6
....................    lcd_putc('C');
0353:  MOVLW  43
0354:  MOVWF  27
0355:  CALL   1D6
....................    
....................    lcd_gotoxy(9,1);
0356:  MOVLW  09
0357:  MOVWF  28
0358:  MOVLW  01
0359:  MOVWF  29
035A:  CALL   1C4
....................    printf(lcd_putc,"T2=%03u",T2);
035B:  MOVLW  54
035C:  MOVWF  27
035D:  CALL   1D6
035E:  MOVLW  32
035F:  MOVWF  27
0360:  CALL   1D6
0361:  MOVLW  3D
0362:  MOVWF  27
0363:  CALL   1D6
0364:  MOVF   21,W
0365:  MOVWF  24
0366:  MOVLW  03
0367:  MOVWF  25
0368:  CALL   217
....................    lcd_putc(223);
0369:  MOVLW  DF
036A:  MOVWF  27
036B:  CALL   1D6
....................    lcd_putc('C');
036C:  MOVLW  43
036D:  MOVWF  27
036E:  CALL   1D6
....................    
....................    if(T1>60 && T2<60) {
036F:  MOVF   20,W
0370:  SUBLW  3C
0371:  BTFSC  03.0
0372:  GOTO   384
0373:  MOVF   21,W
0374:  SUBLW  3B
0375:  BTFSS  03.0
0376:  GOTO   384
....................       lcd_gotoxy(3,2);
0377:  MOVLW  03
0378:  MOVWF  28
0379:  MOVLW  02
037A:  MOVWF  29
037B:  CALL   1C4
....................       lcd_putc("QUA NHIET K1");
037C:  MOVLW  04
037D:  BSF    03.6
037E:  MOVWF  0D
037F:  MOVLW  00
0380:  MOVWF  0F
0381:  BCF    03.6
0382:  CALL   24C
....................    }
0383:  GOTO   3AD
....................    else if(T2>60 && T1<60) {
0384:  MOVF   21,W
0385:  SUBLW  3C
0386:  BTFSC  03.0
0387:  GOTO   399
0388:  MOVF   20,W
0389:  SUBLW  3B
038A:  BTFSS  03.0
038B:  GOTO   399
....................       lcd_gotoxy(3,2);
038C:  MOVLW  03
038D:  MOVWF  28
038E:  MOVLW  02
038F:  MOVWF  29
0390:  CALL   1C4
....................       lcd_putc("QUA NHIET K2");
0391:  MOVLW  0B
0392:  BSF    03.6
0393:  MOVWF  0D
0394:  MOVLW  00
0395:  MOVWF  0F
0396:  BCF    03.6
0397:  CALL   24C
....................    } 
0398:  GOTO   3AD
....................    else if(T1>60 && T2>60){
0399:  MOVF   20,W
039A:  SUBLW  3C
039B:  BTFSC  03.0
039C:  GOTO   3AD
039D:  MOVF   21,W
039E:  SUBLW  3C
039F:  BTFSC  03.0
03A0:  GOTO   3AD
....................       lcd_gotoxy(3,2);
03A1:  MOVLW  03
03A2:  MOVWF  28
03A3:  MOVLW  02
03A4:  MOVWF  29
03A5:  CALL   1C4
....................       lcd_putc("QUA NHIET 2K");
03A6:  MOVLW  12
03A7:  BSF    03.6
03A8:  MOVWF  0D
03A9:  MOVLW  00
03AA:  MOVWF  0F
03AB:  BCF    03.6
03AC:  CALL   24C
....................    } 
03AD:  GOTO   2D6
....................    
.................... }
.................... 
.................... }
03AE:  SLEEP

Configuration Fuses:
   Word  1: 2FE4   INTRC_IO NOWDT PUT MCLR NOPROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
