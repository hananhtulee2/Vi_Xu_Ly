CCS PCM C Compiler, Version 5.109, 43599               24-Mar-23 19:59

               Filename:   E:\PIC 16F887\Code\dieukhienled7doan\dieukhienled7doan.lst

               ROM used:   139 words (2%)
                           Largest free fragment is 2048
               RAM used:   17 (5%) at main() level
                           17 (5%) worst case
               Stack used: 0 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   018
0003:  NOP
.................... #include <16F887.h>
.................... //////////// Standard Header file for the PIC16F887 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F887
.................... 
.................... #list
.................... 
.................... #fuses INTRC 
.................... #use delay(clock = 8 MHZ)
0004:  MOVLW  2B
0005:  MOVWF  04
0006:  BCF    03.7
0007:  MOVF   00,W
0008:  BTFSC  03.2
0009:  GOTO   017
000A:  MOVLW  02
000B:  MOVWF  78
000C:  CLRF   77
000D:  DECFSZ 77,F
000E:  GOTO   00D
000F:  DECFSZ 78,F
0010:  GOTO   00C
0011:  MOVLW  97
0012:  MOVWF  77
0013:  DECFSZ 77,F
0014:  GOTO   013
0015:  DECFSZ 00,F
0016:  GOTO   00A
0017:  RETURN
.................... #define btnADJ PIN_B0 
.................... #define btnCLR PIN_B1
.................... 
.................... unsigned int8 aryCode7seg[10]={0xc0,0xf9,0xa4,0xb0,0x99,0x92,0x82,0xf8,0x80,0x90} ;
*
002F:  MOVLW  C0
0030:  BCF    03.6
0031:  MOVWF  20
0032:  MOVLW  F9
0033:  MOVWF  21
0034:  MOVLW  A4
0035:  MOVWF  22
0036:  MOVLW  B0
0037:  MOVWF  23
0038:  MOVLW  99
0039:  MOVWF  24
003A:  MOVLW  92
003B:  MOVWF  25
003C:  MOVLW  82
003D:  MOVWF  26
003E:  MOVLW  F8
003F:  MOVWF  27
0040:  MOVLW  80
0041:  MOVWF  28
0042:  MOVLW  90
0043:  MOVWF  29
.................... unsigned int8 varCount ; 
.................... 
.................... void main(){
*
0018:  MOVF   03,W
0019:  ANDLW  1F
001A:  MOVWF  03
001B:  MOVLW  71
001C:  BSF    03.5
001D:  MOVWF  0F
001E:  CLRF   10
001F:  MOVF   0F,W
0020:  BSF    03.6
0021:  MOVF   09,W
0022:  ANDLW  C0
0023:  MOVWF  09
0024:  BCF    03.6
0025:  BCF    1F.4
0026:  BCF    1F.5
0027:  MOVLW  00
0028:  BSF    03.6
0029:  MOVWF  08
002A:  BCF    03.5
002B:  CLRF   07
002C:  CLRF   08
002D:  CLRF   09
002E:  BCF    03.7
.................... 
.................... set_tris_b(0b00000011) ;
*
0044:  MOVLW  03
0045:  BSF    03.5
0046:  MOVWF  06
.................... set_tris_d(0b00000000) ; 
0047:  MOVLW  00
0048:  MOVWF  08
.................... 
.................... 
.................... varCount = 0 ; 
0049:  BCF    03.5
004A:  CLRF   2A
.................... output_d(aryCode7seg[varCount]) ; 
004B:  MOVLW  20
004C:  ADDWF  2A,W
004D:  MOVWF  04
004E:  BCF    03.7
004F:  MOVF   00,W
0050:  MOVWF  2B
0051:  BSF    03.5
0052:  CLRF   08
0053:  BCF    03.5
0054:  MOVF   2B,W
0055:  MOVWF  08
.................... 
.................... WHILE(TRUE)
.................... {
....................    if(input(btnADJ) == 0)
0056:  BSF    03.5
0057:  BSF    06.0
0058:  BCF    03.5
0059:  BTFSC  06.0
005A:  GOTO   078
....................    {
....................       delay_ms(50); 
005B:  MOVLW  32
005C:  MOVWF  2B
005D:  CALL   004
....................       varCount++ ; 
005E:  INCF   2A,F
....................       if(varCount == 10)
005F:  MOVF   2A,W
0060:  SUBLW  0A
0061:  BTFSS  03.2
0062:  GOTO   064
....................          varCount = 0 ; 
0063:  CLRF   2A
....................       else ;  
....................       output_d(aryCode7seg[varCount]);
0064:  MOVLW  20
0065:  ADDWF  2A,W
0066:  MOVWF  04
0067:  BCF    03.7
0068:  MOVF   00,W
0069:  MOVWF  2B
006A:  BSF    03.5
006B:  CLRF   08
006C:  BCF    03.5
006D:  MOVF   2B,W
006E:  MOVWF  08
....................       while(input(btnADJ) == 0) ;
006F:  BSF    03.5
0070:  BSF    06.0
0071:  BCF    03.5
0072:  BTFSS  06.0
0073:  GOTO   06F
....................          delay_ms(50);
0074:  MOVLW  32
0075:  MOVWF  2B
0076:  CALL   004
....................    }
0077:  GOTO   089
....................    else if(input(btnCLR) == 0)
0078:  BSF    03.5
0079:  BSF    06.1
007A:  BCF    03.5
007B:  BTFSC  06.1
007C:  GOTO   089
....................       {
....................          varCount = 0 ;
007D:  CLRF   2A
....................          output_d(aryCode7seg[varCount]) ; 
007E:  MOVLW  20
007F:  ADDWF  2A,W
0080:  MOVWF  04
0081:  BCF    03.7
0082:  MOVF   00,W
0083:  MOVWF  2B
0084:  BSF    03.5
0085:  CLRF   08
0086:  BCF    03.5
0087:  MOVF   2B,W
0088:  MOVWF  08
....................       }
....................    else ; 
0089:  GOTO   056
....................   
....................    
....................       
.................... }
.................... }
008A:  SLEEP

Configuration Fuses:
   Word  1: 2FE5   INTRC NOWDT PUT MCLR NOPROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
