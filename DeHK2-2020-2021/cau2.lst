CCS PCM C Compiler, Version 5.109, 43599               29-May-23 12:43

               Filename:   E:\PIC 16F887\Code\DeHK2-2020-2021\cau2.lst

               ROM used:   262 words (3%)
                           Largest free fragment is 2048
               RAM used:   26 (7%) at main() level
                           28 (8%) worst case
               Stack used: 1 locations (0 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   060
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  BTFSS  0B.4
0018:  GOTO   01B
0019:  BTFSC  0B.1
001A:  GOTO   02C
001B:  MOVF   22,W
001C:  MOVWF  04
001D:  MOVF   23,W
001E:  MOVWF  77
001F:  MOVF   24,W
0020:  MOVWF  78
0021:  MOVF   25,W
0022:  MOVWF  79
0023:  MOVF   26,W
0024:  MOVWF  7A
0025:  MOVF   20,W
0026:  MOVWF  0A
0027:  SWAPF  21,W
0028:  MOVWF  03
0029:  SWAPF  7F,F
002A:  SWAPF  7F,W
002B:  RETFIE
002C:  BCF    0A.3
002D:  BCF    0A.4
002E:  GOTO   02F
.................... #include <16F887.h>
.................... //////////// Standard Header file for the PIC16F887 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F887
*
0037:  MOVF   35,W
0038:  CLRF   78
0039:  SUBWF  34,W
003A:  BTFSC  03.0
003B:  GOTO   03F
003C:  MOVF   34,W
003D:  MOVWF  77
003E:  GOTO   04B
003F:  CLRF   77
0040:  MOVLW  08
0041:  MOVWF  36
0042:  RLF    34,F
0043:  RLF    77,F
0044:  MOVF   35,W
0045:  SUBWF  77,W
0046:  BTFSC  03.0
0047:  MOVWF  77
0048:  RLF    78,F
0049:  DECFSZ 36,F
004A:  GOTO   042
004B:  RETURN
.................... 
.................... #list
.................... 
.................... #fuses INTRC_IO
.................... #use delay(CLOCK=8MHz)
004C:  MOVLW  35
004D:  MOVWF  04
004E:  BCF    03.7
004F:  MOVF   00,W
0050:  BTFSC  03.2
0051:  GOTO   05F
0052:  MOVLW  02
0053:  MOVWF  78
0054:  CLRF   77
0055:  DECFSZ 77,F
0056:  GOTO   055
0057:  DECFSZ 78,F
0058:  GOTO   054
0059:  MOVLW  97
005A:  MOVWF  77
005B:  DECFSZ 77,F
005C:  GOTO   05B
005D:  DECFSZ 00,F
005E:  GOTO   052
005F:  RETURN
.................... 
.................... #define ON   Pin_B1 
.................... #define LED  Pin_E1
.................... #define PULSE  Pin_E0
.................... #bit TMR1IF = 0x0b.0
.................... 
.................... #int_ext 
.................... void ngat_ngoai(){
....................    output_low(LED);
*
002F:  BSF    03.5
0030:  BCF    09.1
0031:  BCF    03.5
0032:  BCF    09.1
0033:  BCF    0B.1
0034:  BCF    0A.3
0035:  BCF    0A.4
0036:  GOTO   01B
.................... }
.................... 
.................... unsigned int8 product = 0 ; 
.................... unsigned int8 box = 0 ;  
.................... char Code7Seg[10]={0xC0,0xF9,0xA4,0xB0,0x99,0x92,0x82,0xF8,0x80,0x90};
*
007D:  MOVLW  C0
007E:  BCF    03.6
007F:  MOVWF  29
0080:  MOVLW  F9
0081:  MOVWF  2A
0082:  MOVLW  A4
0083:  MOVWF  2B
0084:  MOVLW  B0
0085:  MOVWF  2C
0086:  MOVLW  99
0087:  MOVWF  2D
0088:  MOVLW  92
0089:  MOVWF  2E
008A:  MOVLW  82
008B:  MOVWF  2F
008C:  MOVLW  F8
008D:  MOVWF  30
008E:  MOVLW  80
008F:  MOVWF  31
0090:  MOVLW  90
0091:  MOVWF  32
.................... 
.................... void main(){
*
0060:  MOVF   03,W
0061:  ANDLW  1F
0062:  MOVWF  03
0063:  MOVLW  71
0064:  BSF    03.5
0065:  MOVWF  0F
0066:  CLRF   10
0067:  MOVF   0F,W
0068:  BCF    03.5
0069:  CLRF   27
006A:  CLRF   28
006B:  MOVLW  FF
006C:  MOVWF  33
006D:  BSF    03.5
006E:  BSF    03.6
006F:  MOVF   09,W
0070:  ANDLW  C0
0071:  MOVWF  09
0072:  BCF    03.6
0073:  BCF    1F.4
0074:  BCF    1F.5
0075:  MOVLW  00
0076:  BSF    03.6
0077:  MOVWF  08
0078:  BCF    03.5
0079:  CLRF   07
007A:  CLRF   08
007B:  CLRF   09
007C:  BCF    03.7
.................... 
.................... set_tris_a(0xff);
*
0092:  MOVLW  FF
0093:  BSF    03.5
0094:  MOVWF  05
.................... set_tris_c(0x00);
0095:  MOVLW  00
0096:  MOVWF  07
0097:  BCF    03.5
0098:  MOVWF  33
.................... set_tris_d(0x00); 
0099:  BSF    03.5
009A:  MOVWF  08
.................... set_tris_e(0b0011);
009B:  BSF    09.0
009C:  BSF    09.1
009D:  BCF    09.2
009E:  BCF    09.3
.................... set_tris_b(0x00);
009F:  MOVWF  06
.................... 
.................... setup_timer_0(RTCC_DIV_1|RTCC_EXT_H_TO_L);
00A0:  MOVF   01,W
00A1:  ANDLW  C7
00A2:  IORLW  38
00A3:  MOVWF  01
.................... set_timer0(0);  
00A4:  BCF    03.5
00A5:  CLRF   01
.................... setup_timer_1(t1_internal|t1_div_by_8);
00A6:  MOVLW  35
00A7:  MOVWF  10
.................... set_timer1(65535);
00A8:  CLRF   0E
00A9:  MOVLW  FF
00AA:  MOVWF  0F
00AB:  MOVWF  0E
00AC:  NOP
.................... 
.................... enable_interrupts(global);
00AD:  MOVLW  C0
00AE:  IORWF  0B,F
.................... enable_interrupts(int_ext);
00AF:  BSF    0B.4
.................... ext_int_edge(H_TO_L) ; 
00B0:  BSF    03.5
00B1:  BCF    01.6
.................... 
.................... while(true){
....................    product = get_timer0() ;
00B2:  BCF    03.5
00B3:  MOVF   01,W
00B4:  MOVWF  27
....................    if(Product==25) 
00B5:  MOVF   27,W
00B6:  SUBLW  19
00B7:  BTFSS  03.2
00B8:  GOTO   0BD
....................    {
....................       set_timer0(1);
00B9:  MOVLW  01
00BA:  MOVWF  01
....................       product=1;
00BB:  MOVWF  27
....................       box++;
00BC:  INCF   28,F
....................    }
....................    
....................    //xuat san pham ra led 7 doan 
....................    output_c(Code7Seg[product/10]);
00BD:  MOVF   27,W
00BE:  MOVWF  34
00BF:  MOVLW  0A
00C0:  MOVWF  35
00C1:  CALL   037
00C2:  MOVLW  29
00C3:  ADDWF  78,W
00C4:  MOVWF  04
00C5:  BCF    03.7
00C6:  MOVF   00,W
00C7:  MOVWF  34
00C8:  MOVLW  00
00C9:  MOVWF  33
00CA:  BSF    03.5
00CB:  CLRF   07
00CC:  BCF    03.5
00CD:  MOVF   34,W
00CE:  MOVWF  07
....................    output_d(Code7Seg[product%10]);
00CF:  MOVF   27,W
00D0:  MOVWF  34
00D1:  MOVLW  0A
00D2:  MOVWF  35
00D3:  CALL   037
00D4:  MOVLW  29
00D5:  ADDWF  77,W
00D6:  MOVWF  04
00D7:  BCF    03.7
00D8:  MOVF   00,W
00D9:  MOVWF  34
00DA:  BSF    03.5
00DB:  CLRF   08
00DC:  BCF    03.5
00DD:  MOVF   34,W
00DE:  MOVWF  08
....................    
....................    if(TMR1IF == 1){
00DF:  BTFSS  0B.0
00E0:  GOTO   0EC
....................       output_toggle(PULSE) ; 
00E1:  BSF    03.5
00E2:  BCF    09.0
00E3:  MOVLW  01
00E4:  BCF    03.5
00E5:  XORWF  09,F
....................       set_timer1(65535);
00E6:  CLRF   0E
00E7:  MOVLW  FF
00E8:  MOVWF  0F
00E9:  MOVWF  0E
00EA:  NOP
....................       TMR1IF = 0 ; 
00EB:  BCF    0B.0
....................    }
....................    if(input(ON)==0) {
00EC:  BSF    03.5
00ED:  BSF    06.1
00EE:  BCF    03.5
00EF:  BTFSC  06.1
00F0:  GOTO   104
....................       delay_ms(3000);
00F1:  MOVLW  0C
00F2:  MOVWF  34
00F3:  MOVLW  FA
00F4:  MOVWF  35
00F5:  CALL   04C
00F6:  DECFSZ 34,F
00F7:  GOTO   0F3
....................       output_toggle(LED);
00F8:  BSF    03.5
00F9:  BCF    09.1
00FA:  MOVLW  02
00FB:  BCF    03.5
00FC:  XORWF  09,F
....................       delay_ms(3000);
00FD:  MOVLW  0C
00FE:  MOVWF  34
00FF:  MOVLW  FA
0100:  MOVWF  35
0101:  CALL   04C
0102:  DECFSZ 34,F
0103:  GOTO   0FF
....................    }
....................    else ;
0104:  GOTO   0B3
.................... 
.................... }
.................... }
.................... 
0105:  SLEEP

Configuration Fuses:
   Word  1: 2FE4   INTRC_IO NOWDT PUT MCLR NOPROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
