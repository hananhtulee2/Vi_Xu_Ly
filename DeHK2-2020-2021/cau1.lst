CCS PCM C Compiler, Version 5.109, 43599               29-May-23 11:12

               Filename:   E:\PIC 16F887\Code\DeHK2-2020-2021\cau1.lst

               ROM used:   1408 words (17%)
                           Largest free fragment is 2048
               RAM used:   16 (4%) at main() level
                           30 (8%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  03
0001:  MOVWF  0A
0002:  GOTO   3A3
0003:  NOP
.................... #include <16F887.h>
.................... //////////// Standard Header file for the PIC16F887 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F887
0004:  DATA C4,24
0005:  DATA D2,1E
0006:  DATA C6,2B
0007:  DATA 20,10
0008:  DATA 20,10
0009:  DATA 00,00
000A:  DATA C4,24
000B:  DATA D2,1E
000C:  DATA D2,22
000D:  DATA 56,10
000E:  DATA 00,01
000F:  DATA C4,24
0010:  DATA D2,1E
0011:  DATA 53,2A
0012:  DATA 4F,28
0013:  DATA 00,01
0014:  DATA C4,2A
0015:  DATA D4,2C
0016:  DATA BD,18
0017:  DATA 30,18
0018:  DATA 00,01
0019:  DATA 25,00
001A:  DATA C4,2A
001B:  DATA D4,2C
001C:  DATA BD,12
001D:  DATA B2,3A
001E:  DATA 80,00
001F:  DATA 25,00
*
00C5:  MOVLW  8E
00C6:  MOVWF  77
00C7:  MOVF   2C,W
00C8:  MOVWF  78
00C9:  MOVF   2B,W
00CA:  MOVWF  79
00CB:  CLRF   7A
00CC:  MOVF   78,F
00CD:  BTFSS  03.2
00CE:  GOTO   0D9
00CF:  MOVF   79,W
00D0:  MOVWF  78
00D1:  CLRF   79
00D2:  MOVLW  08
00D3:  SUBWF  77,F
00D4:  MOVF   78,F
00D5:  BTFSS  03.2
00D6:  GOTO   0D9
00D7:  CLRF   77
00D8:  GOTO   0E1
00D9:  BCF    03.0
00DA:  BTFSC  78.7
00DB:  GOTO   0E0
00DC:  RLF    79,F
00DD:  RLF    78,F
00DE:  DECF   77,F
00DF:  GOTO   0D9
00E0:  BCF    78.7
00E1:  BCF    0A.3
00E2:  BCF    0A.4
00E3:  GOTO   422 (RETURN)
00E4:  MOVF   2B,W
00E5:  BTFSC  03.2
00E6:  GOTO   1A9
00E7:  MOVWF  37
00E8:  MOVF   2F,W
00E9:  BTFSC  03.2
00EA:  GOTO   1A9
00EB:  SUBWF  37,F
00EC:  BTFSS  03.0
00ED:  GOTO   0F3
00EE:  MOVLW  7F
00EF:  ADDWF  37,F
00F0:  BTFSC  03.0
00F1:  GOTO   1A9
00F2:  GOTO   0F9
00F3:  MOVLW  81
00F4:  SUBWF  37,F
00F5:  BTFSS  03.0
00F6:  GOTO   1A9
00F7:  BTFSC  03.2
00F8:  GOTO   1A9
00F9:  MOVF   37,W
00FA:  MOVWF  77
00FB:  CLRF   78
00FC:  CLRF   79
00FD:  CLRF   7A
00FE:  CLRF   36
00FF:  MOVF   2C,W
0100:  MOVWF  35
0101:  BSF    35.7
0102:  MOVF   2D,W
0103:  MOVWF  34
0104:  MOVF   2E,W
0105:  MOVWF  33
0106:  MOVLW  19
0107:  MOVWF  37
0108:  MOVF   32,W
0109:  SUBWF  33,F
010A:  BTFSC  03.0
010B:  GOTO   11C
010C:  MOVLW  01
010D:  SUBWF  34,F
010E:  BTFSC  03.0
010F:  GOTO   11C
0110:  SUBWF  35,F
0111:  BTFSC  03.0
0112:  GOTO   11C
0113:  SUBWF  36,F
0114:  BTFSC  03.0
0115:  GOTO   11C
0116:  INCF   36,F
0117:  INCF   35,F
0118:  INCF   34,F
0119:  MOVF   32,W
011A:  ADDWF  33,F
011B:  GOTO   14E
011C:  MOVF   31,W
011D:  SUBWF  34,F
011E:  BTFSC  03.0
011F:  GOTO   137
0120:  MOVLW  01
0121:  SUBWF  35,F
0122:  BTFSC  03.0
0123:  GOTO   137
0124:  SUBWF  36,F
0125:  BTFSC  03.0
0126:  GOTO   137
0127:  INCF   36,F
0128:  INCF   35,F
0129:  MOVF   31,W
012A:  ADDWF  34,F
012B:  MOVF   32,W
012C:  ADDWF  33,F
012D:  BTFSS  03.0
012E:  GOTO   14E
012F:  INCF   34,F
0130:  BTFSS  03.2
0131:  GOTO   14E
0132:  INCF   35,F
0133:  BTFSS  03.2
0134:  GOTO   14E
0135:  INCF   36,F
0136:  GOTO   14E
0137:  MOVF   30,W
0138:  IORLW  80
0139:  SUBWF  35,F
013A:  BTFSC  03.0
013B:  GOTO   14D
013C:  MOVLW  01
013D:  SUBWF  36,F
013E:  BTFSC  03.0
013F:  GOTO   14D
0140:  INCF   36,F
0141:  MOVF   30,W
0142:  IORLW  80
0143:  ADDWF  35,F
0144:  MOVF   31,W
0145:  ADDWF  34,F
0146:  BTFSS  03.0
0147:  GOTO   12B
0148:  INCF   35,F
0149:  BTFSS  03.2
014A:  GOTO   12B
014B:  INCF   36,F
014C:  GOTO   12B
014D:  BSF    7A.0
014E:  DECFSZ 37,F
014F:  GOTO   151
0150:  GOTO   15C
0151:  BCF    03.0
0152:  RLF    33,F
0153:  RLF    34,F
0154:  RLF    35,F
0155:  RLF    36,F
0156:  BCF    03.0
0157:  RLF    7A,F
0158:  RLF    79,F
0159:  RLF    78,F
015A:  RLF    38,F
015B:  GOTO   108
015C:  BTFSS  38.0
015D:  GOTO   164
015E:  BCF    03.0
015F:  RRF    78,F
0160:  RRF    79,F
0161:  RRF    7A,F
0162:  RRF    38,F
0163:  GOTO   167
0164:  DECF   77,F
0165:  BTFSC  03.2
0166:  GOTO   1A9
0167:  BTFSC  38.7
0168:  GOTO   190
0169:  BCF    03.0
016A:  RLF    33,F
016B:  RLF    34,F
016C:  RLF    35,F
016D:  RLF    36,F
016E:  MOVF   32,W
016F:  SUBWF  33,F
0170:  BTFSC  03.0
0171:  GOTO   17C
0172:  MOVLW  01
0173:  SUBWF  34,F
0174:  BTFSC  03.0
0175:  GOTO   17C
0176:  SUBWF  35,F
0177:  BTFSC  03.0
0178:  GOTO   17C
0179:  SUBWF  36,F
017A:  BTFSS  03.0
017B:  GOTO   19F
017C:  MOVF   31,W
017D:  SUBWF  34,F
017E:  BTFSC  03.0
017F:  GOTO   187
0180:  MOVLW  01
0181:  SUBWF  35,F
0182:  BTFSC  03.0
0183:  GOTO   187
0184:  SUBWF  36,F
0185:  BTFSS  03.0
0186:  GOTO   19F
0187:  MOVF   30,W
0188:  IORLW  80
0189:  SUBWF  35,F
018A:  BTFSC  03.0
018B:  GOTO   190
018C:  MOVLW  01
018D:  SUBWF  36,F
018E:  BTFSS  03.0
018F:  GOTO   19F
0190:  INCF   7A,F
0191:  BTFSS  03.2
0192:  GOTO   19F
0193:  INCF   79,F
0194:  BTFSS  03.2
0195:  GOTO   19F
0196:  INCF   78,F
0197:  BTFSS  03.2
0198:  GOTO   19F
0199:  INCF   77,F
019A:  BTFSC  03.2
019B:  GOTO   1A9
019C:  RRF    78,F
019D:  RRF    79,F
019E:  RRF    7A,F
019F:  MOVF   2C,W
01A0:  MOVWF  37
01A1:  MOVF   30,W
01A2:  XORWF  37,F
01A3:  BTFSS  37.7
01A4:  GOTO   1A7
01A5:  BSF    78.7
01A6:  GOTO   1AD
01A7:  BCF    78.7
01A8:  GOTO   1AD
01A9:  CLRF   77
01AA:  CLRF   78
01AB:  CLRF   79
01AC:  CLRF   7A
01AD:  BCF    0A.3
01AE:  BCF    0A.4
01AF:  GOTO   433 (RETURN)
01B0:  MOVLW  8E
01B1:  MOVWF  77
01B2:  MOVF   29,W
01B3:  SUBWF  77,F
01B4:  MOVF   2A,W
01B5:  MOVWF  79
01B6:  MOVF   2B,W
01B7:  MOVWF  78
01B8:  BSF    79.7
01B9:  MOVF   77,F
01BA:  BTFSC  03.2
01BB:  GOTO   1C7
01BC:  BCF    03.0
01BD:  MOVF   79,F
01BE:  BTFSS  03.2
01BF:  GOTO   1C3
01C0:  MOVF   78,F
01C1:  BTFSC  03.2
01C2:  GOTO   1C7
01C3:  RRF    79,F
01C4:  RRF    78,F
01C5:  DECFSZ 77,F
01C6:  GOTO   1BC
01C7:  BTFSS  2A.7
01C8:  GOTO   1CE
01C9:  COMF   78,F
01CA:  COMF   79,F
01CB:  INCF   78,F
01CC:  BTFSC  03.2
01CD:  INCF   79,F
01CE:  BCF    0A.3
01CF:  BCF    0A.4
01D0:  GOTO   43C (RETURN)
*
020F:  MOVF   2D,W
0210:  CLRF   78
0211:  SUBWF  2C,W
0212:  BTFSC  03.0
0213:  GOTO   217
0214:  MOVF   2C,W
0215:  MOVWF  77
0216:  GOTO   223
0217:  CLRF   77
0218:  MOVLW  08
0219:  MOVWF  2E
021A:  RLF    2C,F
021B:  RLF    77,F
021C:  MOVF   2D,W
021D:  SUBWF  77,W
021E:  BTFSC  03.0
021F:  MOVWF  77
0220:  RLF    78,F
0221:  DECFSZ 2E,F
0222:  GOTO   21A
0223:  RETURN
0224:  MOVF   78,W
0225:  MOVF   2A,W
0226:  MOVWF  2C
0227:  MOVLW  64
0228:  MOVWF  2D
0229:  CALL   20F
022A:  MOVF   77,W
022B:  MOVWF  2A
022C:  MOVF   78,W
022D:  MOVLW  30
022E:  BTFSS  03.2
022F:  GOTO   237
0230:  BTFSS  2B.1
0231:  GOTO   23E
0232:  BTFSC  2B.3
0233:  GOTO   23E
0234:  BTFSC  2B.4
0235:  MOVLW  20
0236:  GOTO   23A
0237:  BCF    2B.3
0238:  BCF    2B.4
0239:  BSF    2B.0
023A:  ADDWF  78,F
023B:  MOVF   78,W
023C:  MOVWF  2E
023D:  CALL   1E3
023E:  MOVF   2A,W
023F:  MOVWF  2C
0240:  MOVLW  0A
0241:  MOVWF  2D
0242:  CALL   20F
0243:  MOVF   77,W
0244:  MOVWF  2A
0245:  MOVF   78,W
0246:  MOVLW  30
0247:  BTFSS  03.2
0248:  GOTO   24F
0249:  BTFSC  2B.3
024A:  GOTO   253
024B:  BTFSS  2B.0
024C:  GOTO   253
024D:  BTFSC  2B.4
024E:  MOVLW  20
024F:  ADDWF  78,F
0250:  MOVF   78,W
0251:  MOVWF  2E
0252:  CALL   1E3
0253:  MOVLW  30
0254:  ADDWF  2A,F
0255:  MOVF   2A,W
0256:  MOVWF  2E
0257:  CALL   1E3
0258:  RETURN
0259:  MOVLW  10
025A:  MOVWF  2D
025B:  CLRF   77
025C:  CLRF   7A
025D:  RRF    2A,F
025E:  RRF    29,F
025F:  BTFSS  03.0
0260:  GOTO   267
0261:  MOVF   2B,W
0262:  ADDWF  77,F
0263:  BTFSC  03.0
0264:  INCF   7A,F
0265:  MOVF   2C,W
0266:  ADDWF  7A,F
0267:  RRF    7A,F
0268:  RRF    77,F
0269:  RRF    79,F
026A:  RRF    78,F
026B:  DECFSZ 2D,F
026C:  GOTO   25D
026D:  RETURN
026E:  CLRF   78
026F:  CLRF   79
0270:  CLRF   77
0271:  CLRF   7A
0272:  MOVF   2E,W
0273:  BTFSS  03.2
0274:  GOTO   278
0275:  MOVF   2D,W
0276:  BTFSC  03.2
0277:  GOTO   292
0278:  MOVLW  10
0279:  MOVWF  2F
027A:  BCF    03.0
027B:  RLF    2B,F
027C:  RLF    2C,F
027D:  RLF    77,F
027E:  RLF    7A,F
027F:  MOVF   2E,W
0280:  SUBWF  7A,W
0281:  BTFSS  03.2
0282:  GOTO   285
0283:  MOVF   2D,W
0284:  SUBWF  77,W
0285:  BTFSS  03.0
0286:  GOTO   28E
0287:  MOVF   2D,W
0288:  SUBWF  77,F
0289:  BTFSS  03.0
028A:  DECF   7A,F
028B:  MOVF   2E,W
028C:  SUBWF  7A,F
028D:  BSF    03.0
028E:  RLF    78,F
028F:  RLF    79,F
0290:  DECFSZ 2F,F
0291:  GOTO   27A
0292:  RETURN
0293:  MOVF   0B,W
0294:  MOVWF  29
0295:  BCF    0B.7
0296:  BSF    03.5
0297:  BSF    03.6
0298:  BSF    0C.7
0299:  BSF    0C.0
029A:  NOP
029B:  NOP
029C:  BCF    03.5
029D:  BCF    03.6
029E:  BTFSC  29.7
029F:  BSF    0B.7
02A0:  BSF    03.6
02A1:  MOVF   0C,W
02A2:  ANDLW  7F
02A3:  BTFSC  03.2
02A4:  GOTO   2E7
02A5:  BCF    03.6
02A6:  MOVWF  29
02A7:  BSF    03.6
02A8:  MOVF   0D,W
02A9:  BCF    03.6
02AA:  MOVWF  2A
02AB:  BSF    03.6
02AC:  MOVF   0F,W
02AD:  BCF    03.6
02AE:  MOVWF  2B
02AF:  MOVF   29,W
02B0:  MOVWF  2E
02B1:  CALL   1E3
02B2:  MOVF   2A,W
02B3:  BSF    03.6
02B4:  MOVWF  0D
02B5:  BCF    03.6
02B6:  MOVF   2B,W
02B7:  BSF    03.6
02B8:  MOVWF  0F
02B9:  BCF    03.6
02BA:  MOVF   0B,W
02BB:  MOVWF  2C
02BC:  BCF    0B.7
02BD:  BSF    03.5
02BE:  BSF    03.6
02BF:  BSF    0C.7
02C0:  BSF    0C.0
02C1:  NOP
02C2:  NOP
02C3:  BCF    03.5
02C4:  BCF    03.6
02C5:  BTFSC  2C.7
02C6:  BSF    0B.7
02C7:  BSF    03.6
02C8:  RLF    0C,W
02C9:  RLF    0E,W
02CA:  ANDLW  7F
02CB:  BTFSC  03.2
02CC:  GOTO   2E7
02CD:  BCF    03.6
02CE:  MOVWF  29
02CF:  BSF    03.6
02D0:  MOVF   0D,W
02D1:  BCF    03.6
02D2:  MOVWF  2A
02D3:  BSF    03.6
02D4:  MOVF   0F,W
02D5:  BCF    03.6
02D6:  MOVWF  2B
02D7:  MOVF   29,W
02D8:  MOVWF  2E
02D9:  CALL   1E3
02DA:  MOVF   2A,W
02DB:  BSF    03.6
02DC:  MOVWF  0D
02DD:  BCF    03.6
02DE:  MOVF   2B,W
02DF:  BSF    03.6
02E0:  MOVWF  0F
02E1:  INCF   0D,F
02E2:  BTFSC  03.2
02E3:  INCF   0F,F
02E4:  BCF    03.6
02E5:  GOTO   293
02E6:  BSF    03.6
02E7:  BCF    03.6
02E8:  RETURN
02E9:  CLRF   77
02EA:  CLRF   78
02EB:  MOVF   29,W
02EC:  BCF    03.0
02ED:  BTFSC  2A.0
02EE:  ADDWF  77,F
02EF:  RRF    77,F
02F0:  RRF    78,F
02F1:  BTFSC  2A.1
02F2:  ADDWF  77,F
02F3:  RRF    77,F
02F4:  RRF    78,F
02F5:  BTFSC  2A.2
02F6:  ADDWF  77,F
02F7:  RRF    77,F
02F8:  RRF    78,F
02F9:  BTFSC  2A.3
02FA:  ADDWF  77,F
02FB:  RRF    77,F
02FC:  RRF    78,F
02FD:  BTFSC  2A.4
02FE:  ADDWF  77,F
02FF:  RRF    77,F
0300:  RRF    78,F
0301:  BTFSC  2A.5
0302:  ADDWF  77,F
0303:  RRF    77,F
0304:  RRF    78,F
0305:  BTFSC  2A.6
0306:  ADDWF  77,F
0307:  RRF    77,F
0308:  RRF    78,F
0309:  BTFSC  2A.7
030A:  ADDWF  77,F
030B:  RRF    77,F
030C:  RRF    78,F
030D:  BCF    0A.3
030E:  BCF    0A.4
030F:  GOTO   54B (RETURN)
0310:  MOVF   0B,W
0311:  MOVWF  2B
0312:  BCF    0B.7
0313:  BSF    03.5
0314:  BSF    03.6
0315:  BSF    0C.7
0316:  BSF    0C.0
0317:  NOP
0318:  NOP
0319:  BCF    03.5
031A:  BCF    03.6
031B:  BTFSC  2B.7
031C:  BSF    0B.7
031D:  BTFSC  03.0
031E:  GOTO   347
031F:  BSF    03.6
0320:  MOVF   0C,W
0321:  ANDLW  7F
0322:  BCF    03.6
0323:  MOVWF  2B
0324:  BSF    03.6
0325:  MOVF   0D,W
0326:  BCF    03.6
0327:  MOVWF  2C
0328:  BSF    03.6
0329:  MOVF   0F,W
032A:  BCF    03.6
032B:  MOVWF  2D
032C:  MOVF   2B,W
032D:  MOVWF  2E
032E:  CALL   1E3
032F:  MOVF   2C,W
0330:  BSF    03.6
0331:  MOVWF  0D
0332:  BCF    03.6
0333:  MOVF   2D,W
0334:  BSF    03.6
0335:  MOVWF  0F
0336:  BCF    03.6
0337:  MOVF   0B,W
0338:  MOVWF  2E
0339:  BCF    0B.7
033A:  BSF    03.5
033B:  BSF    03.6
033C:  BSF    0C.7
033D:  BSF    0C.0
033E:  NOP
033F:  NOP
0340:  BCF    03.5
0341:  BCF    03.6
0342:  BTFSC  2E.7
0343:  BSF    0B.7
0344:  DECFSZ 2A,F
0345:  GOTO   347
0346:  GOTO   366
0347:  BSF    03.6
0348:  RLF    0C,W
0349:  RLF    0E,W
034A:  ANDLW  7F
034B:  BCF    03.6
034C:  MOVWF  2B
034D:  BSF    03.6
034E:  MOVF   0D,W
034F:  BCF    03.6
0350:  MOVWF  2C
0351:  BSF    03.6
0352:  MOVF   0F,W
0353:  BCF    03.6
0354:  MOVWF  2D
0355:  MOVF   2B,W
0356:  MOVWF  2E
0357:  CALL   1E3
0358:  MOVF   2C,W
0359:  BSF    03.6
035A:  MOVWF  0D
035B:  BCF    03.6
035C:  MOVF   2D,W
035D:  BSF    03.6
035E:  MOVWF  0F
035F:  INCF   0D,F
0360:  BTFSC  03.2
0361:  INCF   0F,F
0362:  BCF    03.0
0363:  BCF    03.6
0364:  DECFSZ 2A,F
0365:  GOTO   310
0366:  BCF    0A.3
0367:  BCF    0A.4
0368:  GOTO   557 (RETURN)
0369:  MOVF   78,W
036A:  MOVF   29,W
036B:  MOVWF  2C
036C:  MOVLW  64
036D:  MOVWF  2D
036E:  CALL   20F
036F:  MOVF   77,W
0370:  MOVWF  29
0371:  MOVF   78,W
0372:  MOVLW  30
0373:  BTFSS  03.2
0374:  GOTO   37C
0375:  BTFSS  2A.1
0376:  GOTO   384
0377:  BTFSC  2A.3
0378:  GOTO   384
0379:  BTFSC  2A.4
037A:  MOVLW  20
037B:  GOTO   37F
037C:  BCF    2A.3
037D:  BCF    2A.4
037E:  BSF    2A.0
037F:  ADDWF  78,F
0380:  MOVF   78,W
0381:  BTFSS  0C.4
0382:  GOTO   381
0383:  MOVWF  19
0384:  MOVF   29,W
0385:  MOVWF  2C
0386:  MOVLW  0A
0387:  MOVWF  2D
0388:  CALL   20F
0389:  MOVF   77,W
038A:  MOVWF  29
038B:  MOVF   78,W
038C:  MOVLW  30
038D:  BTFSS  03.2
038E:  GOTO   395
038F:  BTFSC  2A.3
0390:  GOTO   39A
0391:  BTFSS  2A.0
0392:  GOTO   39A
0393:  BTFSC  2A.4
0394:  MOVLW  20
0395:  ADDWF  78,F
0396:  MOVF   78,W
0397:  BTFSS  0C.4
0398:  GOTO   397
0399:  MOVWF  19
039A:  MOVLW  30
039B:  ADDWF  29,F
039C:  MOVF   29,W
039D:  BTFSS  0C.4
039E:  GOTO   39D
039F:  MOVWF  19
03A0:  BCF    0A.3
03A1:  BCF    0A.4
03A2:  GOTO   574 (RETURN)
.................... 
.................... #list
.................... 
.................... #device ADC=10
.................... #fuses INTRC_IO
.................... #use delay(CLOCK=8MHz)
*
0020:  MOVLW  2F
0021:  MOVWF  04
0022:  BCF    03.7
0023:  MOVF   00,W
0024:  BTFSC  03.2
0025:  GOTO   033
0026:  MOVLW  02
0027:  MOVWF  78
0028:  CLRF   77
0029:  DECFSZ 77,F
002A:  GOTO   029
002B:  DECFSZ 78,F
002C:  GOTO   028
002D:  MOVLW  97
002E:  MOVWF  77
002F:  DECFSZ 77,F
0030:  GOTO   02F
0031:  DECFSZ 00,F
0032:  GOTO   026
0033:  RETURN
.................... #include <lcd.c>
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////                             LCD.C                                     ////
.................... ////                 Driver for common LCD modules                         ////
.................... ////                                                                       ////
.................... ////  lcd_init()   Must be called before any other function.               ////
.................... ////                                                                       ////
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         ////
.................... ////                 \a  Set cursor position to upper left                 ////
.................... ////                 \f  Clear display, set cursor to upper left           ////
.................... ////                 \n  Go to start of second line                        ////
.................... ////                 \b  Move back one position                            ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     ////
.................... ////              will erase all remanining characters on the current      ////
.................... ////              line, and move the cursor to the beginning of the next   ////
.................... ////              line.                                                    ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     ////
.................... ////              will move the cursor to the start of the current         ////
.................... ////              line.                                                    ////
.................... ////                                                                       ////
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        ////
.................... ////                                                                       ////
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             ////
.................... ////                                                                       ////
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         ////
.................... ////              (on=FALSE).                                              ////
.................... ////                                                                       ////
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   ////
.................... ////                                                                       ////
.................... ////                                                                       ////
.................... ////  CONFIGURATION                                                        ////
.................... ////  The LCD can be configured in one of two ways: a.) port access or     ////
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     ////
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     ////
.................... ////  connected to sequential pins on the GPIO.  Pin access                ////
.................... ////  has no requirements, all 7 bits of the control interface can         ////
.................... ////  can be connected to any GPIO using several ports.                    ////
.................... ////                                                                       ////
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     ////
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    ////
.................... ////  of this file to configure the pin order.  If you are using a         ////
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  ////
.................... ////  be defined.                                                          ////
.................... ////                                                                       ////
.................... ////  Example of port access:                                              ////
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         ////
.................... ////                                                                       ////
.................... ////  To use pin access, the following pins must be defined:               ////
.................... ////     LCD_ENABLE_PIN                                                    ////
.................... ////     LCD_RS_PIN                                                        ////
.................... ////     LCD_RW_PIN                                                        ////
.................... ////     LCD_DATA4                                                         ////
.................... ////     LCD_DATA5                                                         ////
.................... ////     LCD_DATA6                                                         ////
.................... ////     LCD_DATA7                                                         ////
.................... ////                                                                       ////
.................... ////  Example of pin access:                                               ////
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    ////
.................... ////     #define LCD_RS_PIN      PIN_E1                                    ////
.................... ////     #define LCD_RW_PIN      PIN_E2                                    ////
.................... ////     #define LCD_DATA4       PIN_D4                                    ////
.................... ////     #define LCD_DATA5       PIN_D5                                    ////
.................... ////     #define LCD_DATA6       PIN_D6                                    ////
.................... ////     #define LCD_DATA7       PIN_D7                                    ////
.................... ////                                                                       ////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef __LCD_C__
.................... #define __LCD_C__
.................... 
.................... // define the pinout.
.................... // only required if port access is being used.
.................... typedef struct  
.................... {                            // This structure is overlayed
....................    int1 enable;           // on to an I/O port to gain
....................    int1 rs;               // access to the LCD pins.
....................    int1 rw;               // The bits are allocated from
....................    int1 unused;           // low order up.  ENABLE will
....................    unsigned int     data : 4;         // be LSB pin of that port.
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT.
....................    unsigned int    reserved: 8;
....................   #endif
.................... } LCD_PIN_MAP;
.................... 
.................... // this is to improve compatability with previous LCD drivers that accepted
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B.
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE))
....................  #define LCD_DATA_PORT getenv("SFR:PORTB")
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    // these definitions only need to be modified for baseline PICs.
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions.
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0};
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF};
.................... #endif
.................... 
.................... ////////////////////// END CONFIGURATION ///////////////////////////////////
.................... 
.................... #ifndef LCD_ENABLE_PIN
....................    #define lcd_output_enable(x) lcdlat.enable=x
....................    #define lcd_enable_tris()   lcdtris.enable=0
.................... #else
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x)
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RS_PIN
....................    #define lcd_output_rs(x) lcdlat.rs=x
....................    #define lcd_rs_tris()   lcdtris.rs=0
.................... #else
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x)
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RW_PIN
....................    #define lcd_output_rw(x) lcdlat.rw=x
....................    #define lcd_rw_tris()   lcdtris.rw=0
.................... #else
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x)
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN)
.................... #endif
.................... 
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4,
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver
.................... // compatible with any code written for the original library
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7))
....................    #define  LCD_DATA4    LCD_DATA0
....................    #define  LCD_DATA5    LCD_DATA1
....................    #define  LCD_DATA6    LCD_DATA2
....................    #define  LCD_DATA7    LCD_DATA3
.................... #endif
.................... 
.................... #ifndef LCD_DATA4
.................... #ifndef LCD_DATA_PORT
....................    #if defined(__PCB__)
....................       #define LCD_DATA_PORT      0x06     //portb
....................       #define set_tris_lcd(x)   set_tris_b(x)
....................    #else
....................      #if defined(PIN_D0)
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd
....................      #else
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb
....................      #endif
....................    #endif   
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    LCD_PIN_MAP lcd, lcdlat;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
.................... #elif defined(__PCM__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
....................    #byte lcdtris = LCD_DATA_PORT+0x80
.................... #elif defined(__PCH__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT+9
....................    #byte lcdtris = LCD_DATA_PORT+0x12
.................... #elif defined(__PCD__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #word lcd = LCD_DATA_PORT
....................    #word lcdlat = LCD_DATA_PORT+2
....................    #word lcdtris = LCD_DATA_PORT-0x02
.................... #endif
.................... #endif   //LCD_DATA4 not defined
.................... 
.................... #ifndef LCD_TYPE
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines
.................... #endif
.................... 
.................... #ifndef LCD_LINE_TWO
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line
.................... #endif
.................... 
.................... #ifndef LCD_LINE_LENGTH
....................    #define LCD_LINE_LENGTH 20
.................... #endif
.................... 
.................... unsigned int8 lcd_read_nibble(void);
.................... 
.................... unsigned int8 lcd_read_byte(void)
.................... {
....................    unsigned int8 low,high;
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_INPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_float(LCD_DATA4);
....................    output_float(LCD_DATA5);
....................    output_float(LCD_DATA6);
....................    output_float(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0xF;
*
004D:  MOVLW  0F
004E:  BSF    03.5
004F:  ANDWF  08,W
0050:  IORLW  F0
0051:  MOVWF  08
....................   #endif
....................  #endif
....................         
....................    lcd_output_rw(1);
0052:  BCF    03.5
0053:  BSF    08.2
....................    delay_cycles(1);
0054:  NOP
....................    lcd_output_enable(1);
0055:  BSF    08.0
....................    delay_cycles(1);
0056:  NOP
....................    high = lcd_read_nibble();
0057:  CALL   041
0058:  MOVF   78,W
0059:  MOVWF  36
....................       
....................    lcd_output_enable(0);
005A:  BCF    08.0
....................    delay_cycles(1);
005B:  NOP
....................    lcd_output_enable(1);
005C:  BSF    08.0
....................    delay_us(1);
005D:  GOTO   05E
....................    low = lcd_read_nibble();
005E:  CALL   041
005F:  MOVF   78,W
0060:  MOVWF  35
....................       
....................    lcd_output_enable(0);
0061:  BCF    08.0
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
....................    output_drive(LCD_DATA5);
....................    output_drive(LCD_DATA6);
....................    output_drive(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0x0;
0062:  MOVLW  0F
0063:  BSF    03.5
0064:  ANDWF  08,W
0065:  MOVWF  08
....................   #endif
....................  #endif
.................... 
....................    return( (high<<4) | low);
0066:  BCF    03.5
0067:  SWAPF  36,W
0068:  MOVWF  77
0069:  MOVLW  F0
006A:  ANDWF  77,F
006B:  MOVF   77,W
006C:  IORWF  35,W
006D:  MOVWF  78
.................... }
.................... 
.................... unsigned int8 lcd_read_nibble(void)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    unsigned int8 n = 0x00;
.................... 
....................    /* Read the data port */
....................    n |= input(LCD_DATA4);
....................    n |= input(LCD_DATA5) << 1;
....................    n |= input(LCD_DATA6) << 2;
....................    n |= input(LCD_DATA7) << 3;
....................    
....................    return(n);
....................   #else
....................    return(lcd.data);
*
0041:  MOVF   08,W
0042:  MOVWF  77
0043:  SWAPF  08,W
0044:  ANDLW  0F
0045:  MOVWF  78
....................   #endif
0046:  RETURN
.................... }
.................... 
.................... void lcd_send_nibble(unsigned int8 n)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    /* Write to the data port */
....................    output_bit(LCD_DATA4, bit_test(n, 0));
....................    output_bit(LCD_DATA5, bit_test(n, 1));
....................    output_bit(LCD_DATA6, bit_test(n, 2));
....................    output_bit(LCD_DATA7, bit_test(n, 3));
....................   #else      
....................    lcdlat.data = n;
*
0034:  SWAPF  36,W
0035:  ANDLW  F0
0036:  MOVWF  77
0037:  MOVLW  0F
0038:  ANDWF  08,W
0039:  IORWF  77,W
003A:  MOVWF  08
....................   #endif
....................       
....................    delay_cycles(1);
003B:  NOP
....................    lcd_output_enable(1);
003C:  BSF    08.0
....................    delay_us(2);
003D:  GOTO   03E
003E:  GOTO   03F
....................    lcd_output_enable(0);
003F:  BCF    08.0
0040:  RETURN
.................... }
.................... 
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n)
.................... {
....................   #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................   #else
....................    lcd_enable_tris();
*
0047:  BSF    03.5
0048:  BCF    08.0
....................    lcd_rs_tris();
0049:  BCF    08.1
....................    lcd_rw_tris();
004A:  BCF    08.2
....................   #endif
.................... 
....................    lcd_output_rs(0);
004B:  BCF    03.5
004C:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ;
*
006E:  MOVF   78,W
006F:  MOVWF  35
0070:  BTFSC  35.7
0071:  GOTO   04D
....................    lcd_output_rs(address);
0072:  BTFSS  33.0
0073:  BCF    08.1
0074:  BTFSC  33.0
0075:  BSF    08.1
....................    delay_cycles(1);
0076:  NOP
....................    lcd_output_rw(0);
0077:  BCF    08.2
....................    delay_cycles(1);
0078:  NOP
....................    lcd_output_enable(0);
0079:  BCF    08.0
....................    lcd_send_nibble(n >> 4);
007A:  SWAPF  34,W
007B:  MOVWF  35
007C:  MOVLW  0F
007D:  ANDWF  35,F
007E:  MOVF   35,W
007F:  MOVWF  36
0080:  CALL   034
....................    lcd_send_nibble(n & 0xf);
0081:  MOVF   34,W
0082:  ANDLW  0F
0083:  MOVWF  35
0084:  MOVWF  36
0085:  CALL   034
0086:  RETURN
.................... }
.................... 
.................... #if defined(LCD_EXTENDED_NEWLINE)
.................... unsigned int8 g_LcdX, g_LcdY;
.................... #endif
.................... 
.................... void lcd_init(void) 
.................... {
....................    unsigned int8 i;
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6};
0087:  MOVLW  28
0088:  MOVWF  2A
0089:  MOVLW  0C
008A:  MOVWF  2B
008B:  MOVLW  01
008C:  MOVWF  2C
008D:  MOVLW  06
008E:  MOVWF  2D
....................                              // These bytes need to be sent to the LCD
....................                              // to start it up.
....................    
.................... 
....................    lcd_output_enable(0);
008F:  BCF    08.0
....................    lcd_output_rs(0);
0090:  BCF    08.1
....................    lcd_output_rw(0);
0091:  BCF    08.2
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
....................    output_drive(LCD_DATA5);
....................    output_drive(LCD_DATA6);
....................    output_drive(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0x0;
0092:  MOVLW  0F
0093:  BSF    03.5
0094:  ANDWF  08,W
0095:  MOVWF  08
....................   #endif
....................    lcd_enable_tris();
0096:  BCF    08.0
....................    lcd_rs_tris();
0097:  BCF    08.1
....................    lcd_rw_tris();
0098:  BCF    08.2
....................  #endif
....................     
....................    delay_ms(15);
0099:  MOVLW  0F
009A:  BCF    03.5
009B:  MOVWF  2F
009C:  CALL   020
....................    for(i=1;i<=3;++i)
009D:  MOVLW  01
009E:  MOVWF  29
009F:  MOVF   29,W
00A0:  SUBLW  03
00A1:  BTFSS  03.0
00A2:  GOTO   0AB
....................    {
....................        lcd_send_nibble(3);
00A3:  MOVLW  03
00A4:  MOVWF  36
00A5:  CALL   034
....................        delay_ms(5);
00A6:  MOVLW  05
00A7:  MOVWF  2F
00A8:  CALL   020
00A9:  INCF   29,F
00AA:  GOTO   09F
....................    }
....................    
....................    lcd_send_nibble(2);
00AB:  MOVLW  02
00AC:  MOVWF  36
00AD:  CALL   034
....................    delay_ms(5);
00AE:  MOVLW  05
00AF:  MOVWF  2F
00B0:  CALL   020
....................    for(i=0;i<=3;++i)
00B1:  CLRF   29
00B2:  MOVF   29,W
00B3:  SUBLW  03
00B4:  BTFSS  03.0
00B5:  GOTO   0C2
....................       lcd_send_byte(0,LCD_INIT_STRING[i]);
00B6:  MOVLW  2A
00B7:  ADDWF  29,W
00B8:  MOVWF  04
00B9:  BCF    03.7
00BA:  MOVF   00,W
00BB:  MOVWF  2E
00BC:  CLRF   33
00BD:  MOVF   2E,W
00BE:  MOVWF  34
00BF:  CALL   047
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
00C0:  INCF   29,F
00C1:  GOTO   0B2
00C2:  BCF    0A.3
00C3:  BCF    0A.4
00C4:  GOTO   40A (RETURN)
....................    g_LcdX = 0;
....................    g_LcdY = 0;
....................   #endif
.................... }
.................... 
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y)
.................... {
....................    unsigned int8 address;
....................    
....................    if(y!=1)
*
01D1:  DECFSZ 30,W
01D2:  GOTO   1D4
01D3:  GOTO   1D7
....................       address=LCD_LINE_TWO;
01D4:  MOVLW  40
01D5:  MOVWF  31
01D6:  GOTO   1D8
....................    else
....................       address=0;
01D7:  CLRF   31
....................      
....................    address+=x-1;
01D8:  MOVLW  01
01D9:  SUBWF  2F,W
01DA:  ADDWF  31,F
....................    lcd_send_byte(0,0x80|address);
01DB:  MOVF   31,W
01DC:  IORLW  80
01DD:  MOVWF  32
01DE:  CLRF   33
01DF:  MOVF   32,W
01E0:  MOVWF  34
01E1:  CALL   047
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
01E2:  RETURN
....................    g_LcdX = x - 1;
....................    g_LcdY = y - 1;
....................   #endif
.................... }
.................... 
.................... void lcd_putc(char c)
.................... {
....................    switch (c)
01E3:  MOVF   2E,W
01E4:  XORLW  07
01E5:  BTFSC  03.2
01E6:  GOTO   1F1
01E7:  XORLW  0B
01E8:  BTFSC  03.2
01E9:  GOTO   1F6
01EA:  XORLW  06
01EB:  BTFSC  03.2
01EC:  GOTO   1FE
01ED:  XORLW  02
01EE:  BTFSC  03.2
01EF:  GOTO   204
01F0:  GOTO   209
....................    {
....................       case '\a'   :  lcd_gotoxy(1,1);     break;
01F1:  MOVLW  01
01F2:  MOVWF  2F
01F3:  MOVWF  30
01F4:  CALL   1D1
01F5:  GOTO   20E
.................... 
....................       case '\f'   :  lcd_send_byte(0,1);
01F6:  CLRF   33
01F7:  MOVLW  01
01F8:  MOVWF  34
01F9:  CALL   047
....................                      delay_ms(2);
01FA:  MOVLW  02
01FB:  MOVWF  2F
01FC:  CALL   020
....................                     #if defined(LCD_EXTENDED_NEWLINE)
....................                      g_LcdX = 0;
....................                      g_LcdY = 0;
....................                     #endif
....................                      break;
01FD:  GOTO   20E
.................... 
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break;
....................       case '\n'   :
....................          while (g_LcdX++ < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, ' ');
....................          }
....................          lcd_gotoxy(1, g_LcdY+2);
....................          break;
....................      #else
....................       case '\n'   : lcd_gotoxy(1,2);        break;
01FE:  MOVLW  01
01FF:  MOVWF  2F
0200:  MOVLW  02
0201:  MOVWF  30
0202:  CALL   1D1
0203:  GOTO   20E
....................      #endif
....................      
....................       case '\b'   : lcd_send_byte(0,0x10);  break;
0204:  CLRF   33
0205:  MOVLW  10
0206:  MOVWF  34
0207:  CALL   047
0208:  GOTO   20E
....................      
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       default     : 
....................          if (g_LcdX < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, c);
....................             g_LcdX++;
....................          }
....................          break;
....................      #else
....................       default     : lcd_send_byte(1,c);     break;
0209:  MOVLW  01
020A:  MOVWF  33
020B:  MOVF   2E,W
020C:  MOVWF  34
020D:  CALL   047
....................      #endif
....................    }
020E:  RETURN
.................... }
....................  
.................... char lcd_getc(unsigned int8 x, unsigned int8 y)
.................... {
....................    char value;
.................... 
....................    lcd_gotoxy(x,y);
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low
....................    lcd_output_rs(1);
....................    value = lcd_read_byte();
....................    lcd_output_rs(0);
....................    
....................    return(value);
.................... }
.................... 
.................... // write a custom character to the ram
.................... // which is 0-7 and specifies which character array we are modifying.
.................... // ptr points to an array of 8 bytes, where each byte is the next row of
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and
.................... //    usually you will want to leave this byte 0x00.
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr)
.................... {
....................    unsigned int i;
.................... 
....................    which <<= 3;
....................    which &= 0x38;
.................... 
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address
.................... 
....................    for(i=0; i<8; i++)
....................    {
....................       lcd_send_byte(1, *ptr++);
....................    }
....................   
....................    #if defined(LCD_EXTENDED_NEWLINE)
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address
....................    #endif
.................... }
.................... 
.................... void lcd_cursor_on(int1 on)
.................... {
....................    if (on)
....................    {
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON
....................    }
....................    else
....................    {
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF
....................    }
.................... }
.................... 
.................... #endif
.................... 
.................... #use rs232(BAUD=9600,BITS=8,STOP=1,PARITY=N,RCV=PIN_C7,XMIT=PIN_C6)
.................... 
.................... unsigned int8 speed ; 
.................... unsigned int8 rxdata ; 
.................... unsigned int8 temp ,prev_temp ; 
.................... int1 FULL = 0 ;
.................... int1 STOP = 0;
.................... int1 FW = 0 ; 
.................... int1 REV = 0 ; 
.................... unsigned int8 MAXDUTY = 500; 
.................... 
.................... void main(){
*
03A3:  MOVF   03,W
03A4:  ANDLW  1F
03A5:  MOVWF  03
03A6:  MOVLW  71
03A7:  BSF    03.5
03A8:  MOVWF  0F
03A9:  CLRF   10
03AA:  MOVF   0F,W
03AB:  BSF    03.6
03AC:  BCF    07.3
03AD:  MOVLW  0C
03AE:  BCF    03.6
03AF:  MOVWF  19
03B0:  MOVLW  A2
03B1:  MOVWF  18
03B2:  MOVLW  90
03B3:  BCF    03.5
03B4:  MOVWF  18
03B5:  BCF    24.0
03B6:  BCF    24.1
03B7:  BCF    24.2
03B8:  BCF    24.3
03B9:  MOVLW  F4
03BA:  MOVWF  25
03BB:  MOVLW  FF
03BC:  MOVWF  26
03BD:  CLRF   28
03BE:  CLRF   27
03BF:  BSF    03.5
03C0:  BSF    03.6
03C1:  MOVF   09,W
03C2:  ANDLW  C0
03C3:  MOVWF  09
03C4:  BCF    03.6
03C5:  BCF    1F.4
03C6:  BCF    1F.5
03C7:  MOVLW  00
03C8:  BSF    03.6
03C9:  MOVWF  08
03CA:  BCF    03.5
03CB:  CLRF   07
03CC:  CLRF   08
03CD:  CLRF   09
03CE:  BCF    03.7
....................    
....................    set_tris_d(0x00);
03CF:  MOVLW  00
03D0:  BSF    03.5
03D1:  BCF    03.6
03D2:  MOVWF  08
....................    set_tris_c(0x80); 
03D3:  MOVLW  80
03D4:  MOVWF  07
03D5:  BCF    03.5
03D6:  MOVWF  26
....................    set_tris_e(0b0001);
03D7:  BSF    03.5
03D8:  BSF    09.0
03D9:  BCF    09.1
03DA:  BCF    09.2
03DB:  BCF    09.3
....................    
....................    setup_ccp2(ccp_off); output_low(pin_C1);
03DC:  MOVLW  F0
03DD:  BCF    03.5
03DE:  ANDWF  1D,F
03DF:  BCF    26.1
03E0:  MOVF   26,W
03E1:  BSF    03.5
03E2:  MOVWF  07
03E3:  BCF    03.5
03E4:  BCF    07.1
....................    setup_ccp1(ccp_off); output_low(pin_C2);
03E5:  MOVLW  F0
03E6:  ANDWF  17,F
03E7:  BCF    26.2
03E8:  MOVF   26,W
03E9:  BSF    03.5
03EA:  MOVWF  07
03EB:  BCF    03.5
03EC:  BCF    07.2
....................    
....................    setup_timer_2(T2_DIV_BY_16,124,1);
03ED:  MOVLW  00
03EE:  MOVWF  78
03EF:  IORLW  06
03F0:  MOVWF  12
03F1:  MOVLW  7C
03F2:  BSF    03.5
03F3:  MOVWF  12
....................    set_timer2(0);
03F4:  BCF    03.5
03F5:  CLRF   11
....................    
....................    setup_adc(adc_clock_internal);
03F6:  BSF    1F.6
03F7:  BSF    1F.7
03F8:  BSF    03.5
03F9:  BSF    1F.7
03FA:  BCF    03.5
03FB:  BSF    1F.0
....................    setup_adc_ports(SAN5|VSS_VDD);
03FC:  BSF    03.5
03FD:  BSF    03.6
03FE:  MOVF   09,W
03FF:  ANDLW  C0
0400:  MOVWF  09
0401:  BCF    03.6
0402:  BCF    1F.4
0403:  BCF    1F.5
0404:  MOVLW  20
0405:  BSF    03.6
0406:  MOVWF  08
....................    
....................    lcd_init();
0407:  BCF    03.5
0408:  BCF    03.6
0409:  GOTO   087
....................    
....................    
....................    while(true){
....................       
....................       set_adc_channel(5);
040A:  MOVLW  14
040B:  MOVWF  78
040C:  MOVF   1F,W
040D:  ANDLW  C3
040E:  IORWF  78,W
040F:  MOVWF  1F
....................       temp = read_adc()/2.046 ; 
0410:  BSF    1F.1
0411:  BTFSC  1F.1
0412:  GOTO   411
0413:  MOVF   1E,W
0414:  MOVWF  79
0415:  BSF    03.5
0416:  MOVF   1E,W
0417:  MOVWF  78
0418:  MOVF   79,W
0419:  BCF    03.5
041A:  MOVWF  2A
041B:  MOVF   78,W
041C:  MOVWF  29
041D:  MOVF   2A,W
041E:  MOVWF  2C
041F:  MOVF   78,W
0420:  MOVWF  2B
0421:  GOTO   0C5
0422:  MOVF   7A,W
0423:  MOVWF  2E
0424:  MOVF   79,W
0425:  MOVWF  2D
0426:  MOVF   78,W
0427:  MOVWF  2C
0428:  MOVF   77,W
0429:  MOVWF  2B
042A:  MOVLW  AA
042B:  MOVWF  32
042C:  MOVLW  F1
042D:  MOVWF  31
042E:  MOVLW  02
042F:  MOVWF  30
0430:  MOVLW  80
0431:  MOVWF  2F
0432:  GOTO   0E4
0433:  MOVF   7A,W
0434:  MOVWF  2C
0435:  MOVF   79,W
0436:  MOVWF  2B
0437:  MOVF   78,W
0438:  MOVWF  2A
0439:  MOVF   77,W
043A:  MOVWF  29
043B:  GOTO   1B0
043C:  MOVF   78,W
043D:  MOVWF  22
....................       lcd_gotoxy(1,1); printf(lcd_putc,"T=%03u",temp);
043E:  MOVLW  01
043F:  MOVWF  2F
0440:  MOVWF  30
0441:  CALL   1D1
0442:  MOVLW  54
0443:  MOVWF  2E
0444:  CALL   1E3
0445:  MOVLW  3D
0446:  MOVWF  2E
0447:  CALL   1E3
0448:  MOVF   22,W
0449:  MOVWF  2A
044A:  MOVLW  03
044B:  MOVWF  2B
044C:  CALL   224
....................       
....................       if (temp == 50){
044D:  MOVF   22,W
044E:  SUBLW  32
044F:  BTFSS  03.2
0450:  GOTO   455
....................          STOP  = 1 ; 
0451:  BSF    24.1
....................          FW = 0 ;
0452:  BCF    24.2
....................          REV = 0 ; 
0453:  BCF    24.3
....................       } else if ( temp > 50){
0454:  GOTO   464
0455:  MOVF   22,W
0456:  SUBLW  32
0457:  BTFSC  03.0
0458:  GOTO   45D
....................          FW = 1 ;
0459:  BSF    24.2
....................          STOP  = 0 ;
045A:  BCF    24.1
....................          REV = 0 ;  
045B:  BCF    24.3
....................       } else if ( temp < 50 ){
045C:  GOTO   464
045D:  MOVF   22,W
045E:  SUBLW  31
045F:  BTFSS  03.0
0460:  GOTO   464
....................          REV = 1 ; 
0461:  BSF    24.3
....................          STOP = 0 ; 
0462:  BCF    24.1
....................          FW  = 0 ; 
0463:  BCF    24.2
....................       }
....................       else ; 
....................       if ( kbhit() == 1 ){
0464:  MOVLW  00
0465:  BTFSC  0C.5
0466:  MOVLW  01
0467:  SUBLW  01
0468:  BTFSS  03.2
0469:  GOTO   46E
....................          rxdata = getc(); 
046A:  BTFSS  0C.5
046B:  GOTO   46A
046C:  MOVF   1A,W
046D:  MOVWF  21
....................          
....................       }
....................       if (rxdata >= '1' && rxdata <= '9' ){
046E:  MOVF   21,W
046F:  SUBLW  30
0470:  BTFSC  03.0
0471:  GOTO   47A
0472:  MOVF   21,W
0473:  SUBLW  39
0474:  BTFSS  03.0
0475:  GOTO   47A
....................          speed = rxdata -0x30 ; 
0476:  MOVLW  30
0477:  SUBWF  21,W
0478:  MOVWF  20
....................       }
0479:  GOTO   481
....................       else if (rxdata == 'F'){
047A:  MOVF   21,W
047B:  SUBLW  46
047C:  BTFSS  03.2
047D:  GOTO   481
....................          FULL = 1 ; 
047E:  BSF    24.0
....................          speed = 10 ; 
047F:  MOVLW  0A
0480:  MOVWF  20
....................          
....................       } else ; 
....................       
....................     if(FW == 1){
0481:  BTFSS  24.2
0482:  GOTO   4C6
....................       setup_ccp2(ccp_pwm); set_pwm2_duty(500*speed/10) ; 
0483:  BCF    26.1
0484:  MOVF   26,W
0485:  BSF    03.5
0486:  MOVWF  07
0487:  BCF    03.5
0488:  BCF    07.1
0489:  MOVLW  0C
048A:  MOVWF  1D
048B:  MOVLW  01
048C:  MOVWF  2A
048D:  MOVLW  F4
048E:  MOVWF  29
048F:  CLRF   2C
0490:  MOVF   20,W
0491:  MOVWF  2B
0492:  CALL   259
0493:  MOVF   79,W
0494:  MOVWF  2A
0495:  MOVF   78,W
0496:  MOVWF  29
0497:  MOVF   79,W
0498:  MOVWF  2C
0499:  MOVF   78,W
049A:  MOVWF  2B
049B:  CLRF   2E
049C:  MOVLW  0A
049D:  MOVWF  2D
049E:  CALL   26E
049F:  MOVF   79,W
04A0:  MOVWF  2A
04A1:  MOVF   78,W
04A2:  MOVWF  29
04A3:  RRF    2A,F
04A4:  RRF    29,F
04A5:  RRF    2A,F
04A6:  RRF    29,F
04A7:  RRF    2A,F
04A8:  MOVF   29,W
04A9:  MOVWF  1B
04AA:  RRF    2A,F
04AB:  RRF    2A,W
04AC:  ANDLW  30
04AD:  MOVWF  77
04AE:  MOVF   1D,W
04AF:  ANDLW  CF
04B0:  IORWF  77,W
04B1:  MOVWF  1D
....................       setup_ccp1(ccp_off); output_low(pin_C2);
04B2:  MOVLW  F0
04B3:  ANDWF  17,F
04B4:  BCF    26.2
04B5:  MOVF   26,W
04B6:  BSF    03.5
04B7:  MOVWF  07
04B8:  BCF    03.5
04B9:  BCF    07.2
....................       lcd_gotoxy(1,2); lcd_putc("DIR=FW    "); 
04BA:  MOVLW  01
04BB:  MOVWF  2F
04BC:  MOVLW  02
04BD:  MOVWF  30
04BE:  CALL   1D1
04BF:  MOVLW  04
04C0:  BSF    03.6
04C1:  MOVWF  0D
04C2:  MOVLW  00
04C3:  MOVWF  0F
04C4:  BCF    03.6
04C5:  CALL   293
....................    }
....................     if(REV == 1){
04C6:  BTFSS  24.3
04C7:  GOTO   510
....................       setup_ccp1(ccp_pwm); set_pwm1_duty(500*speed/10) ; 
04C8:  BCF    26.2
04C9:  MOVF   26,W
04CA:  BSF    03.5
04CB:  MOVWF  07
04CC:  BCF    03.5
04CD:  BCF    07.2
04CE:  MOVLW  0C
04CF:  MOVWF  17
04D0:  BSF    03.5
04D1:  CLRF   1B
04D2:  CLRF   1C
04D3:  MOVLW  01
04D4:  MOVWF  1D
04D5:  BCF    03.5
04D6:  MOVWF  2A
04D7:  MOVLW  F4
04D8:  MOVWF  29
04D9:  CLRF   2C
04DA:  MOVF   20,W
04DB:  MOVWF  2B
04DC:  CALL   259
04DD:  MOVF   79,W
04DE:  MOVWF  2A
04DF:  MOVF   78,W
04E0:  MOVWF  29
04E1:  MOVF   79,W
04E2:  MOVWF  2C
04E3:  MOVF   78,W
04E4:  MOVWF  2B
04E5:  CLRF   2E
04E6:  MOVLW  0A
04E7:  MOVWF  2D
04E8:  CALL   26E
04E9:  MOVF   79,W
04EA:  MOVWF  2A
04EB:  MOVF   78,W
04EC:  MOVWF  29
04ED:  RRF    2A,F
04EE:  RRF    29,F
04EF:  RRF    2A,F
04F0:  RRF    29,F
04F1:  RRF    2A,F
04F2:  MOVF   29,W
04F3:  MOVWF  15
04F4:  RRF    2A,F
04F5:  RRF    2A,W
04F6:  ANDLW  30
04F7:  MOVWF  77
04F8:  MOVF   17,W
04F9:  ANDLW  CF
04FA:  IORWF  77,W
04FB:  MOVWF  17
....................       setup_ccp2(ccp_off); output_low(pin_C1);
04FC:  MOVLW  F0
04FD:  ANDWF  1D,F
04FE:  BCF    26.1
04FF:  MOVF   26,W
0500:  BSF    03.5
0501:  MOVWF  07
0502:  BCF    03.5
0503:  BCF    07.1
....................       lcd_gotoxy(1,2); lcd_putc("DIR=REV ");  
0504:  MOVLW  01
0505:  MOVWF  2F
0506:  MOVLW  02
0507:  MOVWF  30
0508:  CALL   1D1
0509:  MOVLW  0A
050A:  BSF    03.6
050B:  MOVWF  0D
050C:  MOVLW  00
050D:  MOVWF  0F
050E:  BCF    03.6
050F:  CALL   293
....................    }
....................     if(STOP == 1){
0510:  BTFSS  24.1
0511:  GOTO   52E
....................       setup_ccp2(ccp_off); output_low(pin_C1);
0512:  MOVLW  F0
0513:  ANDWF  1D,F
0514:  BCF    26.1
0515:  MOVF   26,W
0516:  BSF    03.5
0517:  MOVWF  07
0518:  BCF    03.5
0519:  BCF    07.1
....................       setup_ccp1(ccp_off); output_low(pin_C2);
051A:  MOVLW  F0
051B:  ANDWF  17,F
051C:  BCF    26.2
051D:  MOVF   26,W
051E:  BSF    03.5
051F:  MOVWF  07
0520:  BCF    03.5
0521:  BCF    07.2
....................       lcd_gotoxy(1,2); lcd_putc("DIR=STOP");  
0522:  MOVLW  01
0523:  MOVWF  2F
0524:  MOVLW  02
0525:  MOVWF  30
0526:  CALL   1D1
0527:  MOVLW  0F
0528:  BSF    03.6
0529:  MOVWF  0D
052A:  MOVLW  00
052B:  MOVWF  0F
052C:  BCF    03.6
052D:  CALL   293
....................     }
.................... 
....................       
....................     lcd_gotoxy(9,2);
052E:  MOVLW  09
052F:  MOVWF  2F
0530:  MOVLW  02
0531:  MOVWF  30
0532:  CALL   1D1
....................     if(speed == MAXDUTY){
0533:  MOVF   25,W
0534:  SUBWF  20,W
0535:  BTFSS  03.2
0536:  GOTO   546
....................       lcd_putc("DUTY=100");lcd_putc("%");
0537:  MOVLW  14
0538:  BSF    03.6
0539:  MOVWF  0D
053A:  MOVLW  00
053B:  MOVWF  0F
053C:  BCF    03.6
053D:  CALL   293
053E:  MOVLW  19
053F:  BSF    03.6
0540:  MOVWF  0D
0541:  MOVLW  00
0542:  MOVWF  0F
0543:  BCF    03.6
0544:  CALL   293
....................     }else{
0545:  GOTO   563
....................     printf(lcd_putc,"DUTY=%2u",(speed*10));lcd_putc("%");
0546:  MOVF   20,W
0547:  MOVWF  29
0548:  MOVLW  0A
0549:  MOVWF  2A
054A:  GOTO   2E9
054B:  MOVF   78,W
054C:  MOVWF  29
054D:  MOVLW  1A
054E:  BSF    03.6
054F:  MOVWF  0D
0550:  MOVLW  00
0551:  MOVWF  0F
0552:  BCF    03.0
0553:  MOVLW  05
0554:  BCF    03.6
0555:  MOVWF  2A
0556:  GOTO   310
0557:  MOVF   29,W
0558:  MOVWF  2A
0559:  MOVLW  11
055A:  MOVWF  2B
055B:  CALL   224
055C:  MOVLW  1F
055D:  BSF    03.6
055E:  MOVWF  0D
055F:  MOVLW  00
0560:  MOVWF  0F
0561:  BCF    03.6
0562:  CALL   293
....................     }
....................     
....................      //goi len may tinh
....................         if(temp!=prev_temp) {
0563:  MOVF   23,W
0564:  SUBWF  22,W
0565:  BTFSC  03.2
0566:  GOTO   57E
....................             printf("T=%3u\r\n",temp); 
0567:  MOVLW  54
0568:  BTFSS  0C.4
0569:  GOTO   568
056A:  MOVWF  19
056B:  MOVLW  3D
056C:  BTFSS  0C.4
056D:  GOTO   56C
056E:  MOVWF  19
056F:  MOVF   22,W
0570:  MOVWF  29
0571:  MOVLW  13
0572:  MOVWF  2A
0573:  GOTO   369
0574:  MOVLW  0D
0575:  BTFSS  0C.4
0576:  GOTO   575
0577:  MOVWF  19
0578:  MOVLW  0A
0579:  BTFSS  0C.4
057A:  GOTO   579
057B:  MOVWF  19
....................             prev_temp = temp;
057C:  MOVF   22,W
057D:  MOVWF  23
....................         }       
057E:  GOTO   40A
....................    
....................    }
.................... 
.................... }
057F:  SLEEP

Configuration Fuses:
   Word  1: 2FE4   INTRC_IO NOWDT PUT MCLR NOPROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
