CCS PCM C Compiler, Version 5.109, 43599               30-May-23 15:46

               Filename:   E:\PIC 16F887\Code\DeHK2-2018-2019\cau1.lst

               ROM used:   311 words (4%)
                           Largest free fragment is 2048
               RAM used:   18 (5%) at main() level
                           19 (5%) worst case
               Stack used: 1 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   029
0003:  NOP
.................... #include <16F887.h>
.................... //////////// Standard Header file for the PIC16F887 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F887
.................... 
.................... #list
.................... 
.................... #fuses INTRC_IO
.................... #use delay(CLOCK=8MHz)
0004:  MOVLW  2C
0005:  MOVWF  04
0006:  BCF    03.7
0007:  MOVF   00,W
0008:  BTFSC  03.2
0009:  GOTO   017
000A:  MOVLW  02
000B:  MOVWF  78
000C:  CLRF   77
000D:  DECFSZ 77,F
000E:  GOTO   00D
000F:  DECFSZ 78,F
0010:  GOTO   00C
0011:  MOVLW  97
0012:  MOVWF  77
0013:  DECFSZ 77,F
0014:  GOTO   013
0015:  DECFSZ 00,F
0016:  GOTO   00A
0017:  RETURN
0018:  MOVLW  08
0019:  SUBWF  2D,F
001A:  BTFSS  03.0
001B:  GOTO   028
001C:  MOVLW  2D
001D:  MOVWF  04
001E:  BCF    03.7
001F:  BCF    03.0
0020:  RRF    00,F
0021:  MOVF   00,W
0022:  BTFSC  03.2
0023:  GOTO   028
0024:  GOTO   026
0025:  NOP
0026:  DECFSZ 00,F
0027:  GOTO   025
0028:  RETURN
.................... 
.................... #define  P1       PIN_B1
.................... #define  P2       PIN_B2
.................... #define  P3       PIN_B3
.................... #define  STOP     PIN_B4
.................... #define  PulseOut PIN_C2
.................... #bit     TMR1IF = 0x0b.0
.................... 
.................... 
.................... unsigned int8 mode = 0 ; 
.................... char Code7Seg[10]={0xC0,0xF9,0xA4,0xB0,0x99,0x92,0x82,0xF8,0x80,0x90};
*
0045:  MOVLW  C0
0046:  BCF    03.6
0047:  MOVWF  21
0048:  MOVLW  F9
0049:  MOVWF  22
004A:  MOVLW  A4
004B:  MOVWF  23
004C:  MOVLW  B0
004D:  MOVWF  24
004E:  MOVLW  99
004F:  MOVWF  25
0050:  MOVLW  92
0051:  MOVWF  26
0052:  MOVLW  82
0053:  MOVWF  27
0054:  MOVLW  F8
0055:  MOVWF  28
0056:  MOVLW  80
0057:  MOVWF  29
0058:  MOVLW  90
0059:  MOVWF  2A
.................... 
.................... void main(){
*
0029:  MOVF   03,W
002A:  ANDLW  1F
002B:  MOVWF  03
002C:  MOVLW  71
002D:  BSF    03.5
002E:  MOVWF  0F
002F:  CLRF   10
0030:  MOVF   0F,W
0031:  BCF    03.5
0032:  CLRF   20
0033:  MOVLW  FF
0034:  MOVWF  2B
0035:  BSF    03.5
0036:  BSF    03.6
0037:  MOVF   09,W
0038:  ANDLW  C0
0039:  MOVWF  09
003A:  BCF    03.6
003B:  BCF    1F.4
003C:  BCF    1F.5
003D:  MOVLW  00
003E:  BSF    03.6
003F:  MOVWF  08
0040:  BCF    03.5
0041:  CLRF   07
0042:  CLRF   08
0043:  CLRF   09
0044:  BCF    03.7
....................    set_tris_b(0xff);
*
005A:  MOVLW  FF
005B:  BSF    03.5
005C:  MOVWF  06
....................    set_tris_d(0x00);
005D:  MOVLW  00
005E:  MOVWF  08
....................    set_tris_c(0x00);
005F:  MOVWF  07
0060:  BCF    03.5
0061:  MOVWF  2B
....................    set_tris_a(0xff);
0062:  MOVLW  FF
0063:  BSF    03.5
0064:  MOVWF  05
.................... 
....................    setup_ccp1(ccp_off); output_low(PulseOut);
0065:  MOVLW  F0
0066:  BCF    03.5
0067:  ANDWF  17,F
0068:  BCF    2B.2
0069:  MOVF   2B,W
006A:  BSF    03.5
006B:  MOVWF  07
006C:  BCF    03.5
006D:  BCF    07.2
....................    
.................... 
.................... while(true){
....................    
....................    if(input(P1) == 0 ){
006E:  BSF    03.5
006F:  BSF    06.1
0070:  BCF    03.5
0071:  BTFSC  06.1
0072:  GOTO   081
....................          delay_ms(50);
0073:  MOVLW  32
0074:  MOVWF  2C
0075:  CALL   004
....................          mode = 1 ;
0076:  MOVLW  01
0077:  MOVWF  20
....................          while(input(P1)==0);
0078:  BSF    03.5
0079:  BSF    06.1
007A:  BCF    03.5
007B:  BTFSS  06.1
007C:  GOTO   078
....................          delay_ms(50);
007D:  MOVLW  32
007E:  MOVWF  2C
007F:  CALL   004
....................    } else if(input(P2) == 0 ){
0080:  GOTO   0B8
0081:  BSF    03.5
0082:  BSF    06.2
0083:  BCF    03.5
0084:  BTFSC  06.2
0085:  GOTO   094
....................          delay_ms(50);
0086:  MOVLW  32
0087:  MOVWF  2C
0088:  CALL   004
....................          mode = 2 ;
0089:  MOVLW  02
008A:  MOVWF  20
....................          while(input(P2)==0);
008B:  BSF    03.5
008C:  BSF    06.2
008D:  BCF    03.5
008E:  BTFSS  06.2
008F:  GOTO   08B
....................          delay_ms(50);
0090:  MOVLW  32
0091:  MOVWF  2C
0092:  CALL   004
....................    } else if(input(P3) == 0 ){
0093:  GOTO   0B8
0094:  BSF    03.5
0095:  BSF    06.3
0096:  BCF    03.5
0097:  BTFSC  06.3
0098:  GOTO   0A7
....................          delay_ms(50);
0099:  MOVLW  32
009A:  MOVWF  2C
009B:  CALL   004
....................          mode = 3 ;
009C:  MOVLW  03
009D:  MOVWF  20
....................          while(input(P3)==0);
009E:  BSF    03.5
009F:  BSF    06.3
00A0:  BCF    03.5
00A1:  BTFSS  06.3
00A2:  GOTO   09E
....................          delay_ms(50);
00A3:  MOVLW  32
00A4:  MOVWF  2C
00A5:  CALL   004
....................    } else if(input(STOP) == 0 ){
00A6:  GOTO   0B8
00A7:  BSF    03.5
00A8:  BSF    06.4
00A9:  BCF    03.5
00AA:  BTFSC  06.4
00AB:  GOTO   0B8
....................          delay_ms(50);
00AC:  MOVLW  32
00AD:  MOVWF  2C
00AE:  CALL   004
....................          mode = 0 ;
00AF:  CLRF   20
....................          while(input(STOP)==0);
00B0:  BSF    03.5
00B1:  BSF    06.4
00B2:  BCF    03.5
00B3:  BTFSS  06.4
00B4:  GOTO   0B0
....................          delay_ms(50);
00B5:  MOVLW  32
00B6:  MOVWF  2C
00B7:  CALL   004
....................    }else ;    
....................      
....................      if (mode == 1){
00B8:  DECFSZ 20,W
00B9:  GOTO   0D8
....................         output_high(PulseOut);
00BA:  BCF    2B.2
00BB:  MOVF   2B,W
00BC:  BSF    03.5
00BD:  MOVWF  07
00BE:  BCF    03.5
00BF:  BSF    07.2
....................         delay_us(1500);
00C0:  MOVLW  01
00C1:  MOVWF  2C
00C2:  CALL   004
00C3:  MOVLW  02
00C4:  MOVWF  2C
00C5:  MOVLW  F8
00C6:  MOVWF  2D
00C7:  CALL   018
00C8:  DECFSZ 2C,F
00C9:  GOTO   0C5
....................         output_low(PulseOut);
00CA:  BCF    2B.2
00CB:  MOVF   2B,W
00CC:  BSF    03.5
00CD:  MOVWF  07
00CE:  BCF    03.5
00CF:  BCF    07.2
....................         delay_us(500);
00D0:  MOVLW  02
00D1:  MOVWF  2C
00D2:  MOVLW  F8
00D3:  MOVWF  2D
00D4:  CALL   018
00D5:  DECFSZ 2C,F
00D6:  GOTO   0D2
....................      }else if (mode == 2){
00D7:  GOTO   12A
00D8:  MOVF   20,W
00D9:  SUBLW  02
00DA:  BTFSS  03.2
00DB:  GOTO   0FF
....................        // Xu ly muc cao 1,5ms 
....................         output_high(PulseOut);
00DC:  BCF    2B.2
00DD:  MOVF   2B,W
00DE:  BSF    03.5
00DF:  MOVWF  07
00E0:  BCF    03.5
00E1:  BSF    07.2
....................         TMR1IF = 0 ; 
00E2:  BCF    0B.0
....................         setup_timer_1(t1_internal|t1_div_by_8);
00E3:  MOVLW  35
00E4:  MOVWF  10
....................         set_timer1(65161);
00E5:  CLRF   0E
00E6:  MOVLW  FE
00E7:  MOVWF  0F
00E8:  MOVLW  89
00E9:  MOVWF  0E
00EA:  NOP
....................         while(TMR1IF == 0) ; 
00EB:  BTFSS  0B.0
00EC:  GOTO   0EB
....................        
....................        // Xu ly muc thap 0,5ms
....................         output_low(PulseOut); 
00ED:  BCF    2B.2
00EE:  MOVF   2B,W
00EF:  BSF    03.5
00F0:  MOVWF  07
00F1:  BCF    03.5
00F2:  BCF    07.2
....................         TMR1IF = 0 ; 
00F3:  BCF    0B.0
....................         setup_timer_1(t1_internal|t1_div_by_8);
00F4:  MOVLW  35
00F5:  MOVWF  10
....................         set_timer1(65411);
00F6:  CLRF   0E
00F7:  MOVLW  FF
00F8:  MOVWF  0F
00F9:  MOVLW  83
00FA:  MOVWF  0E
00FB:  NOP
....................         while(TMR1IF == 0) ; 
00FC:  BTFSS  0B.0
00FD:  GOTO   0FC
....................      }else if (mode == 3){
00FE:  GOTO   12A
00FF:  MOVF   20,W
0100:  SUBLW  03
0101:  BTFSS  03.2
0102:  GOTO   121
....................         
....................         setup_timer_2(T2_DIV_BY_16,249,1);
0103:  MOVLW  00
0104:  MOVWF  78
0105:  IORLW  06
0106:  MOVWF  12
0107:  MOVLW  F9
0108:  BSF    03.5
0109:  MOVWF  12
....................         set_timer2(0);
010A:  BCF    03.5
010B:  CLRF   11
....................         
....................         setup_ccp1(ccp_pwm);
010C:  BCF    2B.2
010D:  MOVF   2B,W
010E:  BSF    03.5
010F:  MOVWF  07
0110:  BCF    03.5
0111:  BCF    07.2
0112:  MOVLW  0C
0113:  MOVWF  17
0114:  BSF    03.5
0115:  CLRF   1B
0116:  CLRF   1C
0117:  MOVLW  01
0118:  MOVWF  1D
....................         set_pwm1_duty(375) ; 
0119:  MOVLW  5D
011A:  BCF    03.5
011B:  MOVWF  15
011C:  MOVF   17,W
011D:  ANDLW  CF
011E:  IORLW  30
011F:  MOVWF  17
....................      }else if (mode== 0){
0120:  GOTO   12A
0121:  MOVF   20,F
0122:  BTFSS  03.2
0123:  GOTO   12A
....................          output_low(PulseOut);
0124:  BCF    2B.2
0125:  MOVF   2B,W
0126:  BSF    03.5
0127:  MOVWF  07
0128:  BCF    03.5
0129:  BCF    07.2
....................      }else ; 
....................    
....................    
....................    //xuat ra led7seg 
....................     output_d(Code7Seg[mode]) ; 
012A:  MOVLW  21
012B:  ADDWF  20,W
012C:  MOVWF  04
012D:  BCF    03.7
012E:  MOVF   00,W
012F:  MOVWF  2C
0130:  BSF    03.5
0131:  CLRF   08
0132:  BCF    03.5
0133:  MOVF   2C,W
0134:  MOVWF  08
0135:  GOTO   06E
.................... 
.................... }
.................... 
.................... }
0136:  SLEEP

Configuration Fuses:
   Word  1: 2FE4   INTRC_IO NOWDT PUT MCLR NOPROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
