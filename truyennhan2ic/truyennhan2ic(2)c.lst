CCS PCM C Compiler, Version 5.109, 43599               14-May-23 00:27

               Filename:   E:\PIC 16F887\Code\truyennhan2ic(2)c.lst

               ROM used:   623 words (8%)
                           Largest free fragment is 2048
               RAM used:   10 (3%) at main() level
                           23 (6%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   1F7
0003:  NOP
.................... #include <16F887.h>
.................... //////////// Standard Header file for the PIC16F887 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F887
0004:  DATA CC,22
0005:  DATA 44,10
0006:  DATA C4,20
0007:  DATA CE,23
0008:  DATA A0,29
0009:  DATA 41,27
000A:  DATA 47,00
000B:  DATA CC,22
000C:  DATA 44,10
000D:  DATA C4,20
000E:  DATA CE,23
000F:  DATA 20,2A
0010:  DATA 41,2A
0011:  DATA 00,01
0012:  DATA 4E,24
0013:  DATA C9,22
0014:  DATA 54,10
0015:  DATA C4,27
0016:  DATA 3A,10
0017:  DATA A5,3A
0018:  DATA 20,00
*
00FC:  MOVF   0B,W
00FD:  MOVWF  24
00FE:  BCF    0B.7
00FF:  BSF    03.5
0100:  BSF    03.6
0101:  BSF    0C.7
0102:  BSF    0C.0
0103:  NOP
0104:  NOP
0105:  BCF    03.5
0106:  BCF    03.6
0107:  BTFSC  24.7
0108:  BSF    0B.7
0109:  BSF    03.6
010A:  MOVF   0C,W
010B:  ANDLW  7F
010C:  BTFSC  03.2
010D:  GOTO   150
010E:  BCF    03.6
010F:  MOVWF  24
0110:  BSF    03.6
0111:  MOVF   0D,W
0112:  BCF    03.6
0113:  MOVWF  25
0114:  BSF    03.6
0115:  MOVF   0F,W
0116:  BCF    03.6
0117:  MOVWF  26
0118:  MOVF   24,W
0119:  MOVWF  28
011A:  CALL   0D0
011B:  MOVF   25,W
011C:  BSF    03.6
011D:  MOVWF  0D
011E:  BCF    03.6
011F:  MOVF   26,W
0120:  BSF    03.6
0121:  MOVWF  0F
0122:  BCF    03.6
0123:  MOVF   0B,W
0124:  MOVWF  27
0125:  BCF    0B.7
0126:  BSF    03.5
0127:  BSF    03.6
0128:  BSF    0C.7
0129:  BSF    0C.0
012A:  NOP
012B:  NOP
012C:  BCF    03.5
012D:  BCF    03.6
012E:  BTFSC  27.7
012F:  BSF    0B.7
0130:  BSF    03.6
0131:  RLF    0C,W
0132:  RLF    0E,W
0133:  ANDLW  7F
0134:  BTFSC  03.2
0135:  GOTO   150
0136:  BCF    03.6
0137:  MOVWF  24
0138:  BSF    03.6
0139:  MOVF   0D,W
013A:  BCF    03.6
013B:  MOVWF  25
013C:  BSF    03.6
013D:  MOVF   0F,W
013E:  BCF    03.6
013F:  MOVWF  26
0140:  MOVF   24,W
0141:  MOVWF  28
0142:  CALL   0D0
0143:  MOVF   25,W
0144:  BSF    03.6
0145:  MOVWF  0D
0146:  BCF    03.6
0147:  MOVF   26,W
0148:  BSF    03.6
0149:  MOVWF  0F
014A:  INCF   0D,F
014B:  BTFSC  03.2
014C:  INCF   0F,F
014D:  BCF    03.6
014E:  GOTO   0FC
014F:  BSF    03.6
0150:  BCF    03.6
0151:  RETURN
0152:  MOVF   0B,W
0153:  MOVWF  25
0154:  BCF    0B.7
0155:  BSF    03.5
0156:  BSF    03.6
0157:  BSF    0C.7
0158:  BSF    0C.0
0159:  NOP
015A:  NOP
015B:  BCF    03.5
015C:  BCF    03.6
015D:  BTFSC  25.7
015E:  BSF    0B.7
015F:  BTFSC  03.0
0160:  GOTO   189
0161:  BSF    03.6
0162:  MOVF   0C,W
0163:  ANDLW  7F
0164:  BCF    03.6
0165:  MOVWF  25
0166:  BSF    03.6
0167:  MOVF   0D,W
0168:  BCF    03.6
0169:  MOVWF  26
016A:  BSF    03.6
016B:  MOVF   0F,W
016C:  BCF    03.6
016D:  MOVWF  27
016E:  MOVF   25,W
016F:  MOVWF  28
0170:  CALL   0D0
0171:  MOVF   26,W
0172:  BSF    03.6
0173:  MOVWF  0D
0174:  BCF    03.6
0175:  MOVF   27,W
0176:  BSF    03.6
0177:  MOVWF  0F
0178:  BCF    03.6
0179:  MOVF   0B,W
017A:  MOVWF  28
017B:  BCF    0B.7
017C:  BSF    03.5
017D:  BSF    03.6
017E:  BSF    0C.7
017F:  BSF    0C.0
0180:  NOP
0181:  NOP
0182:  BCF    03.5
0183:  BCF    03.6
0184:  BTFSC  28.7
0185:  BSF    0B.7
0186:  DECFSZ 24,F
0187:  GOTO   189
0188:  GOTO   1A8
0189:  BSF    03.6
018A:  RLF    0C,W
018B:  RLF    0E,W
018C:  ANDLW  7F
018D:  BCF    03.6
018E:  MOVWF  25
018F:  BSF    03.6
0190:  MOVF   0D,W
0191:  BCF    03.6
0192:  MOVWF  26
0193:  BSF    03.6
0194:  MOVF   0F,W
0195:  BCF    03.6
0196:  MOVWF  27
0197:  MOVF   25,W
0198:  MOVWF  28
0199:  CALL   0D0
019A:  MOVF   26,W
019B:  BSF    03.6
019C:  MOVWF  0D
019D:  BCF    03.6
019E:  MOVF   27,W
019F:  BSF    03.6
01A0:  MOVWF  0F
01A1:  INCF   0D,F
01A2:  BTFSC  03.2
01A3:  INCF   0F,F
01A4:  BCF    03.0
01A5:  BCF    03.6
01A6:  DECFSZ 24,F
01A7:  GOTO   152
01A8:  BCF    0A.3
01A9:  BCF    0A.4
01AA:  GOTO   25F (RETURN)
01AB:  MOVF   27,W
01AC:  CLRF   78
01AD:  SUBWF  26,W
01AE:  BTFSC  03.0
01AF:  GOTO   1B3
01B0:  MOVF   26,W
01B1:  MOVWF  77
01B2:  GOTO   1BF
01B3:  CLRF   77
01B4:  MOVLW  08
01B5:  MOVWF  28
01B6:  RLF    26,F
01B7:  RLF    77,F
01B8:  MOVF   27,W
01B9:  SUBWF  77,W
01BA:  BTFSC  03.0
01BB:  MOVWF  77
01BC:  RLF    78,F
01BD:  DECFSZ 28,F
01BE:  GOTO   1B6
01BF:  RETURN
01C0:  MOVF   78,W
01C1:  MOVF   24,W
01C2:  MOVWF  26
01C3:  MOVLW  64
01C4:  MOVWF  27
01C5:  CALL   1AB
01C6:  MOVF   77,W
01C7:  MOVWF  24
01C8:  MOVF   78,W
01C9:  MOVLW  30
01CA:  BTFSS  03.2
01CB:  GOTO   1D3
01CC:  BTFSS  25.1
01CD:  GOTO   1DA
01CE:  BTFSC  25.3
01CF:  GOTO   1DA
01D0:  BTFSC  25.4
01D1:  MOVLW  20
01D2:  GOTO   1D6
01D3:  BCF    25.3
01D4:  BCF    25.4
01D5:  BSF    25.0
01D6:  ADDWF  78,F
01D7:  MOVF   78,W
01D8:  MOVWF  28
01D9:  CALL   0D0
01DA:  MOVF   24,W
01DB:  MOVWF  26
01DC:  MOVLW  0A
01DD:  MOVWF  27
01DE:  CALL   1AB
01DF:  MOVF   77,W
01E0:  MOVWF  24
01E1:  MOVF   78,W
01E2:  MOVLW  30
01E3:  BTFSS  03.2
01E4:  GOTO   1EB
01E5:  BTFSC  25.3
01E6:  GOTO   1EF
01E7:  BTFSS  25.0
01E8:  GOTO   1EF
01E9:  BTFSC  25.4
01EA:  MOVLW  20
01EB:  ADDWF  78,F
01EC:  MOVF   78,W
01ED:  MOVWF  28
01EE:  CALL   0D0
01EF:  MOVLW  30
01F0:  ADDWF  24,F
01F1:  MOVF   24,W
01F2:  MOVWF  28
01F3:  CALL   0D0
01F4:  BCF    0A.3
01F5:  BCF    0A.4
01F6:  GOTO   264 (RETURN)
.................... 
.................... #list
.................... 
.................... 
.................... #fuses INTRC_IO
.................... #use delay(CLOCK=8MHz)
*
0019:  MOVLW  29
001A:  MOVWF  04
001B:  BCF    03.7
001C:  MOVF   00,W
001D:  BTFSC  03.2
001E:  GOTO   02C
001F:  MOVLW  02
0020:  MOVWF  78
0021:  CLRF   77
0022:  DECFSZ 77,F
0023:  GOTO   022
0024:  DECFSZ 78,F
0025:  GOTO   021
0026:  MOVLW  97
0027:  MOVWF  77
0028:  DECFSZ 77,F
0029:  GOTO   028
002A:  DECFSZ 00,F
002B:  GOTO   01F
002C:  RETURN
.................... #use RS232(BAUD=9600,BITS=8,STOP=1,PARITY=N,xmit=PIN_C6,rcv=PIN_C7)
.................... #include <lcd.c>
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////                             LCD.C                                     ////
.................... ////                 Driver for common LCD modules                         ////
.................... ////                                                                       ////
.................... ////  lcd_init()   Must be called before any other function.               ////
.................... ////                                                                       ////
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         ////
.................... ////                 \a  Set cursor position to upper left                 ////
.................... ////                 \f  Clear display, set cursor to upper left           ////
.................... ////                 \n  Go to start of second line                        ////
.................... ////                 \b  Move back one position                            ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     ////
.................... ////              will erase all remanining characters on the current      ////
.................... ////              line, and move the cursor to the beginning of the next   ////
.................... ////              line.                                                    ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     ////
.................... ////              will move the cursor to the start of the current         ////
.................... ////              line.                                                    ////
.................... ////                                                                       ////
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        ////
.................... ////                                                                       ////
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             ////
.................... ////                                                                       ////
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         ////
.................... ////              (on=FALSE).                                              ////
.................... ////                                                                       ////
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   ////
.................... ////                                                                       ////
.................... ////                                                                       ////
.................... ////  CONFIGURATION                                                        ////
.................... ////  The LCD can be configured in one of two ways: a.) port access or     ////
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     ////
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     ////
.................... ////  connected to sequential pins on the GPIO.  Pin access                ////
.................... ////  has no requirements, all 7 bits of the control interface can         ////
.................... ////  can be connected to any GPIO using several ports.                    ////
.................... ////                                                                       ////
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     ////
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    ////
.................... ////  of this file to configure the pin order.  If you are using a         ////
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  ////
.................... ////  be defined.                                                          ////
.................... ////                                                                       ////
.................... ////  Example of port access:                                              ////
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         ////
.................... ////                                                                       ////
.................... ////  To use pin access, the following pins must be defined:               ////
.................... ////     LCD_ENABLE_PIN                                                    ////
.................... ////     LCD_RS_PIN                                                        ////
.................... ////     LCD_RW_PIN                                                        ////
.................... ////     LCD_DATA4                                                         ////
.................... ////     LCD_DATA5                                                         ////
.................... ////     LCD_DATA6                                                         ////
.................... ////     LCD_DATA7                                                         ////
.................... ////                                                                       ////
.................... ////  Example of pin access:                                               ////
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    ////
.................... ////     #define LCD_RS_PIN      PIN_E1                                    ////
.................... ////     #define LCD_RW_PIN      PIN_E2                                    ////
.................... ////     #define LCD_DATA4       PIN_D4                                    ////
.................... ////     #define LCD_DATA5       PIN_D5                                    ////
.................... ////     #define LCD_DATA6       PIN_D6                                    ////
.................... ////     #define LCD_DATA7       PIN_D7                                    ////
.................... ////                                                                       ////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef __LCD_C__
.................... #define __LCD_C__
.................... 
.................... // define the pinout.
.................... // only required if port access is being used.
.................... typedef struct  
.................... {                            // This structure is overlayed
....................    int1 enable;           // on to an I/O port to gain
....................    int1 rs;               // access to the LCD pins.
....................    int1 rw;               // The bits are allocated from
....................    int1 unused;           // low order up.  ENABLE will
....................    unsigned int     data : 4;         // be LSB pin of that port.
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT.
....................    unsigned int    reserved: 8;
....................   #endif
.................... } LCD_PIN_MAP;
.................... 
.................... // this is to improve compatability with previous LCD drivers that accepted
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B.
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE))
....................  #define LCD_DATA_PORT getenv("SFR:PORTB")
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    // these definitions only need to be modified for baseline PICs.
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions.
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0};
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF};
.................... #endif
.................... 
.................... ////////////////////// END CONFIGURATION ///////////////////////////////////
.................... 
.................... #ifndef LCD_ENABLE_PIN
....................    #define lcd_output_enable(x) lcdlat.enable=x
....................    #define lcd_enable_tris()   lcdtris.enable=0
.................... #else
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x)
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RS_PIN
....................    #define lcd_output_rs(x) lcdlat.rs=x
....................    #define lcd_rs_tris()   lcdtris.rs=0
.................... #else
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x)
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RW_PIN
....................    #define lcd_output_rw(x) lcdlat.rw=x
....................    #define lcd_rw_tris()   lcdtris.rw=0
.................... #else
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x)
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN)
.................... #endif
.................... 
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4,
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver
.................... // compatible with any code written for the original library
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7))
....................    #define  LCD_DATA4    LCD_DATA0
....................    #define  LCD_DATA5    LCD_DATA1
....................    #define  LCD_DATA6    LCD_DATA2
....................    #define  LCD_DATA7    LCD_DATA3
.................... #endif
.................... 
.................... #ifndef LCD_DATA4
.................... #ifndef LCD_DATA_PORT
....................    #if defined(__PCB__)
....................       #define LCD_DATA_PORT      0x06     //portb
....................       #define set_tris_lcd(x)   set_tris_b(x)
....................    #else
....................      #if defined(PIN_D0)
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd
....................      #else
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb
....................      #endif
....................    #endif   
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    LCD_PIN_MAP lcd, lcdlat;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
.................... #elif defined(__PCM__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
....................    #byte lcdtris = LCD_DATA_PORT+0x80
.................... #elif defined(__PCH__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT+9
....................    #byte lcdtris = LCD_DATA_PORT+0x12
.................... #elif defined(__PCD__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #word lcd = LCD_DATA_PORT
....................    #word lcdlat = LCD_DATA_PORT+2
....................    #word lcdtris = LCD_DATA_PORT-0x02
.................... #endif
.................... #endif   //LCD_DATA4 not defined
.................... 
.................... #ifndef LCD_TYPE
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines
.................... #endif
.................... 
.................... #ifndef LCD_LINE_TWO
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line
.................... #endif
.................... 
.................... #ifndef LCD_LINE_LENGTH
....................    #define LCD_LINE_LENGTH 20
.................... #endif
.................... 
.................... unsigned int8 lcd_read_nibble(void);
.................... 
.................... unsigned int8 lcd_read_byte(void)
.................... {
....................    unsigned int8 low,high;
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_INPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_float(LCD_DATA4);
....................    output_float(LCD_DATA5);
....................    output_float(LCD_DATA6);
....................    output_float(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0xF;
*
0046:  MOVLW  0F
0047:  BSF    03.5
0048:  ANDWF  08,W
0049:  IORLW  F0
004A:  MOVWF  08
....................   #endif
....................  #endif
....................         
....................    lcd_output_rw(1);
004B:  BCF    03.5
004C:  BSF    08.2
....................    delay_cycles(1);
004D:  NOP
....................    lcd_output_enable(1);
004E:  BSF    08.0
....................    delay_cycles(1);
004F:  NOP
....................    high = lcd_read_nibble();
0050:  CALL   03A
0051:  MOVF   78,W
0052:  MOVWF  30
....................       
....................    lcd_output_enable(0);
0053:  BCF    08.0
....................    delay_cycles(1);
0054:  NOP
....................    lcd_output_enable(1);
0055:  BSF    08.0
....................    delay_us(1);
0056:  GOTO   057
....................    low = lcd_read_nibble();
0057:  CALL   03A
0058:  MOVF   78,W
0059:  MOVWF  2F
....................       
....................    lcd_output_enable(0);
005A:  BCF    08.0
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
....................    output_drive(LCD_DATA5);
....................    output_drive(LCD_DATA6);
....................    output_drive(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0x0;
005B:  MOVLW  0F
005C:  BSF    03.5
005D:  ANDWF  08,W
005E:  MOVWF  08
....................   #endif
....................  #endif
.................... 
....................    return( (high<<4) | low);
005F:  BCF    03.5
0060:  SWAPF  30,W
0061:  MOVWF  77
0062:  MOVLW  F0
0063:  ANDWF  77,F
0064:  MOVF   77,W
0065:  IORWF  2F,W
0066:  MOVWF  78
.................... }
.................... 
.................... unsigned int8 lcd_read_nibble(void)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    unsigned int8 n = 0x00;
.................... 
....................    /* Read the data port */
....................    n |= input(LCD_DATA4);
....................    n |= input(LCD_DATA5) << 1;
....................    n |= input(LCD_DATA6) << 2;
....................    n |= input(LCD_DATA7) << 3;
....................    
....................    return(n);
....................   #else
....................    return(lcd.data);
*
003A:  MOVF   08,W
003B:  MOVWF  77
003C:  SWAPF  08,W
003D:  ANDLW  0F
003E:  MOVWF  78
....................   #endif
003F:  RETURN
.................... }
.................... 
.................... void lcd_send_nibble(unsigned int8 n)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    /* Write to the data port */
....................    output_bit(LCD_DATA4, bit_test(n, 0));
....................    output_bit(LCD_DATA5, bit_test(n, 1));
....................    output_bit(LCD_DATA6, bit_test(n, 2));
....................    output_bit(LCD_DATA7, bit_test(n, 3));
....................   #else      
....................    lcdlat.data = n;
*
002D:  SWAPF  30,W
002E:  ANDLW  F0
002F:  MOVWF  77
0030:  MOVLW  0F
0031:  ANDWF  08,W
0032:  IORWF  77,W
0033:  MOVWF  08
....................   #endif
....................       
....................    delay_cycles(1);
0034:  NOP
....................    lcd_output_enable(1);
0035:  BSF    08.0
....................    delay_us(2);
0036:  GOTO   037
0037:  GOTO   038
....................    lcd_output_enable(0);
0038:  BCF    08.0
0039:  RETURN
.................... }
.................... 
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n)
.................... {
....................   #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................   #else
....................    lcd_enable_tris();
*
0040:  BSF    03.5
0041:  BCF    08.0
....................    lcd_rs_tris();
0042:  BCF    08.1
....................    lcd_rw_tris();
0043:  BCF    08.2
....................   #endif
.................... 
....................    lcd_output_rs(0);
0044:  BCF    03.5
0045:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ;
*
0067:  MOVF   78,W
0068:  MOVWF  2F
0069:  BTFSC  2F.7
006A:  GOTO   046
....................    lcd_output_rs(address);
006B:  BTFSS  2D.0
006C:  BCF    08.1
006D:  BTFSC  2D.0
006E:  BSF    08.1
....................    delay_cycles(1);
006F:  NOP
....................    lcd_output_rw(0);
0070:  BCF    08.2
....................    delay_cycles(1);
0071:  NOP
....................    lcd_output_enable(0);
0072:  BCF    08.0
....................    lcd_send_nibble(n >> 4);
0073:  SWAPF  2E,W
0074:  MOVWF  2F
0075:  MOVLW  0F
0076:  ANDWF  2F,F
0077:  MOVF   2F,W
0078:  MOVWF  30
0079:  CALL   02D
....................    lcd_send_nibble(n & 0xf);
007A:  MOVF   2E,W
007B:  ANDLW  0F
007C:  MOVWF  2F
007D:  MOVWF  30
007E:  CALL   02D
007F:  RETURN
.................... }
.................... 
.................... #if defined(LCD_EXTENDED_NEWLINE)
.................... unsigned int8 g_LcdX, g_LcdY;
.................... #endif
.................... 
.................... void lcd_init(void) 
.................... {
....................    unsigned int8 i;
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6};
0080:  MOVLW  28
0081:  MOVWF  25
0082:  MOVLW  0C
0083:  MOVWF  26
0084:  MOVLW  01
0085:  MOVWF  27
0086:  MOVLW  06
0087:  MOVWF  28
....................                              // These bytes need to be sent to the LCD
....................                              // to start it up.
....................    
.................... 
....................    lcd_output_enable(0);
0088:  BCF    08.0
....................    lcd_output_rs(0);
0089:  BCF    08.1
....................    lcd_output_rw(0);
008A:  BCF    08.2
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
....................    output_drive(LCD_DATA5);
....................    output_drive(LCD_DATA6);
....................    output_drive(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0x0;
008B:  MOVLW  0F
008C:  BSF    03.5
008D:  ANDWF  08,W
008E:  MOVWF  08
....................   #endif
....................    lcd_enable_tris();
008F:  BCF    08.0
....................    lcd_rs_tris();
0090:  BCF    08.1
....................    lcd_rw_tris();
0091:  BCF    08.2
....................  #endif
....................     
....................    delay_ms(15);
0092:  MOVLW  0F
0093:  BCF    03.5
0094:  MOVWF  29
0095:  CALL   019
....................    for(i=1;i<=3;++i)
0096:  MOVLW  01
0097:  MOVWF  24
0098:  MOVF   24,W
0099:  SUBLW  03
009A:  BTFSS  03.0
009B:  GOTO   0A4
....................    {
....................        lcd_send_nibble(3);
009C:  MOVLW  03
009D:  MOVWF  30
009E:  CALL   02D
....................        delay_ms(5);
009F:  MOVLW  05
00A0:  MOVWF  29
00A1:  CALL   019
00A2:  INCF   24,F
00A3:  GOTO   098
....................    }
....................    
....................    lcd_send_nibble(2);
00A4:  MOVLW  02
00A5:  MOVWF  30
00A6:  CALL   02D
....................    delay_ms(5);
00A7:  MOVLW  05
00A8:  MOVWF  29
00A9:  CALL   019
....................    for(i=0;i<=3;++i)
00AA:  CLRF   24
00AB:  MOVF   24,W
00AC:  SUBLW  03
00AD:  BTFSS  03.0
00AE:  GOTO   0BB
....................       lcd_send_byte(0,LCD_INIT_STRING[i]);
00AF:  MOVLW  25
00B0:  ADDWF  24,W
00B1:  MOVWF  04
00B2:  BCF    03.7
00B3:  MOVF   00,W
00B4:  MOVWF  29
00B5:  CLRF   2D
00B6:  MOVF   29,W
00B7:  MOVWF  2E
00B8:  CALL   040
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
00B9:  INCF   24,F
00BA:  GOTO   0AB
00BB:  BCF    0A.3
00BC:  BCF    0A.4
00BD:  GOTO   225 (RETURN)
....................    g_LcdX = 0;
....................    g_LcdY = 0;
....................   #endif
.................... }
.................... 
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y)
.................... {
....................    unsigned int8 address;
....................    
....................    if(y!=1)
00BE:  DECFSZ 2A,W
00BF:  GOTO   0C1
00C0:  GOTO   0C4
....................       address=LCD_LINE_TWO;
00C1:  MOVLW  40
00C2:  MOVWF  2B
00C3:  GOTO   0C5
....................    else
....................       address=0;
00C4:  CLRF   2B
....................      
....................    address+=x-1;
00C5:  MOVLW  01
00C6:  SUBWF  29,W
00C7:  ADDWF  2B,F
....................    lcd_send_byte(0,0x80|address);
00C8:  MOVF   2B,W
00C9:  IORLW  80
00CA:  MOVWF  2C
00CB:  CLRF   2D
00CC:  MOVF   2C,W
00CD:  MOVWF  2E
00CE:  CALL   040
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
00CF:  RETURN
....................    g_LcdX = x - 1;
....................    g_LcdY = y - 1;
....................   #endif
.................... }
.................... 
.................... void lcd_putc(char c)
.................... {
....................    switch (c)
00D0:  MOVF   28,W
00D1:  XORLW  07
00D2:  BTFSC  03.2
00D3:  GOTO   0DE
00D4:  XORLW  0B
00D5:  BTFSC  03.2
00D6:  GOTO   0E3
00D7:  XORLW  06
00D8:  BTFSC  03.2
00D9:  GOTO   0EB
00DA:  XORLW  02
00DB:  BTFSC  03.2
00DC:  GOTO   0F1
00DD:  GOTO   0F6
....................    {
....................       case '\a'   :  lcd_gotoxy(1,1);     break;
00DE:  MOVLW  01
00DF:  MOVWF  29
00E0:  MOVWF  2A
00E1:  CALL   0BE
00E2:  GOTO   0FB
.................... 
....................       case '\f'   :  lcd_send_byte(0,1);
00E3:  CLRF   2D
00E4:  MOVLW  01
00E5:  MOVWF  2E
00E6:  CALL   040
....................                      delay_ms(2);
00E7:  MOVLW  02
00E8:  MOVWF  29
00E9:  CALL   019
....................                     #if defined(LCD_EXTENDED_NEWLINE)
....................                      g_LcdX = 0;
....................                      g_LcdY = 0;
....................                     #endif
....................                      break;
00EA:  GOTO   0FB
.................... 
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break;
....................       case '\n'   :
....................          while (g_LcdX++ < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, ' ');
....................          }
....................          lcd_gotoxy(1, g_LcdY+2);
....................          break;
....................      #else
....................       case '\n'   : lcd_gotoxy(1,2);        break;
00EB:  MOVLW  01
00EC:  MOVWF  29
00ED:  MOVLW  02
00EE:  MOVWF  2A
00EF:  CALL   0BE
00F0:  GOTO   0FB
....................      #endif
....................      
....................       case '\b'   : lcd_send_byte(0,0x10);  break;
00F1:  CLRF   2D
00F2:  MOVLW  10
00F3:  MOVWF  2E
00F4:  CALL   040
00F5:  GOTO   0FB
....................      
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       default     : 
....................          if (g_LcdX < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, c);
....................             g_LcdX++;
....................          }
....................          break;
....................      #else
....................       default     : lcd_send_byte(1,c);     break;
00F6:  MOVLW  01
00F7:  MOVWF  2D
00F8:  MOVF   28,W
00F9:  MOVWF  2E
00FA:  CALL   040
....................      #endif
....................    }
00FB:  RETURN
.................... }
....................  
.................... char lcd_getc(unsigned int8 x, unsigned int8 y)
.................... {
....................    char value;
.................... 
....................    lcd_gotoxy(x,y);
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low
....................    lcd_output_rs(1);
....................    value = lcd_read_byte();
....................    lcd_output_rs(0);
....................    
....................    return(value);
.................... }
.................... 
.................... // write a custom character to the ram
.................... // which is 0-7 and specifies which character array we are modifying.
.................... // ptr points to an array of 8 bytes, where each byte is the next row of
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and
.................... //    usually you will want to leave this byte 0x00.
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr)
.................... {
....................    unsigned int i;
.................... 
....................    which <<= 3;
....................    which &= 0x38;
.................... 
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address
.................... 
....................    for(i=0; i<8; i++)
....................    {
....................       lcd_send_byte(1, *ptr++);
....................    }
....................   
....................    #if defined(LCD_EXTENDED_NEWLINE)
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address
....................    #endif
.................... }
.................... 
.................... void lcd_cursor_on(int1 on)
.................... {
....................    if (on)
....................    {
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON
....................    }
....................    else
....................    {
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF
....................    }
.................... }
.................... 
.................... #endif
.................... 
.................... #define LED PIN_B1 
.................... unsigned int8 tam  ;
.................... unsigned int8 ND = 0;
.................... 
.................... void main()
*
01F7:  MOVF   03,W
01F8:  ANDLW  1F
01F9:  MOVWF  03
01FA:  MOVLW  71
01FB:  BSF    03.5
01FC:  MOVWF  0F
01FD:  CLRF   10
01FE:  MOVF   0F,W
01FF:  BSF    03.6
0200:  BCF    07.3
0201:  MOVLW  0C
0202:  BCF    03.6
0203:  MOVWF  19
0204:  MOVLW  A2
0205:  MOVWF  18
0206:  MOVLW  90
0207:  BCF    03.5
0208:  MOVWF  18
0209:  CLRF   21
020A:  CLRF   23
020B:  CLRF   22
020C:  BSF    03.5
020D:  BSF    03.6
020E:  MOVF   09,W
020F:  ANDLW  C0
0210:  MOVWF  09
0211:  BCF    03.6
0212:  BCF    1F.4
0213:  BCF    1F.5
0214:  MOVLW  00
0215:  BSF    03.6
0216:  MOVWF  08
0217:  BCF    03.5
0218:  CLRF   07
0219:  CLRF   08
021A:  CLRF   09
021B:  BCF    03.7
.................... {
....................    set_tris_b(0x00);
021C:  MOVLW  00
021D:  BSF    03.5
021E:  BCF    03.6
021F:  MOVWF  06
....................    set_tris_d(0x00);
0220:  MOVWF  08
....................    output_low(LED);
0221:  BCF    06.1
0222:  BCF    03.5
0223:  BCF    06.1
....................    lcd_init(); 
0224:  GOTO   080
....................    while (TRUE){
....................       if (kbhit() ==1 )
0225:  MOVLW  00
0226:  BTFSC  0C.5
0227:  MOVLW  01
0228:  SUBLW  01
0229:  BTFSS  03.2
022A:  GOTO   23B
....................       {
....................          tam = getc() ;
022B:  BTFSS  0C.5
022C:  GOTO   22B
022D:  MOVF   1A,W
022E:  MOVWF  20
....................          if (tam == 'L')
022F:  MOVF   20,W
0230:  SUBLW  4C
0231:  BTFSS  03.2
0232:  GOTO   239
....................             output_toggle(LED);
0233:  BSF    03.5
0234:  BCF    06.1
0235:  MOVLW  02
0236:  BCF    03.5
0237:  XORWF  06,F
0238:  GOTO   23B
....................          else ND = tam; 
0239:  MOVF   20,W
023A:  MOVWF  21
....................               
....................       }
....................       lcd_gotoxy(1,1); 
023B:  MOVLW  01
023C:  MOVWF  29
023D:  MOVWF  2A
023E:  CALL   0BE
....................       if(input_state(LED) == 1) 
023F:  BTFSS  06.1
0240:  GOTO   249
....................          printf(lcd_putc,"LED DANG SANG") ;
0241:  MOVLW  04
0242:  BSF    03.6
0243:  MOVWF  0D
0244:  MOVLW  00
0245:  MOVWF  0F
0246:  BCF    03.6
0247:  CALL   0FC
0248:  GOTO   250
....................       else printf(lcd_putc,"LED DANG TAT") ;
0249:  MOVLW  0B
024A:  BSF    03.6
024B:  MOVWF  0D
024C:  MOVLW  00
024D:  MOVWF  0F
024E:  BCF    03.6
024F:  CALL   0FC
....................       lcd_gotoxy(1,2); 
0250:  MOVLW  01
0251:  MOVWF  29
0252:  MOVLW  02
0253:  MOVWF  2A
0254:  CALL   0BE
....................       printf(lcd_putc,"NHIET DO: %u ", ND) ;
0255:  MOVLW  12
0256:  BSF    03.6
0257:  MOVWF  0D
0258:  MOVLW  00
0259:  MOVWF  0F
025A:  BCF    03.0
025B:  MOVLW  0A
025C:  BCF    03.6
025D:  MOVWF  24
025E:  GOTO   152
025F:  MOVF   21,W
0260:  MOVWF  24
0261:  MOVLW  1B
0262:  MOVWF  25
0263:  GOTO   1C0
0264:  MOVLW  20
0265:  MOVWF  28
0266:  CALL   0D0
....................       lcd_putc(0xdf);
0267:  MOVLW  DF
0268:  MOVWF  28
0269:  CALL   0D0
....................       lcd_putc('C');
026A:  MOVLW  43
026B:  MOVWF  28
026C:  CALL   0D0
026D:  GOTO   225
....................       
....................    }
.................... }
026E:  SLEEP

Configuration Fuses:
   Word  1: 2FE4   INTRC_IO NOWDT PUT MCLR NOPROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
