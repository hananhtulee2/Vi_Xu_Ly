CCS PCM C Compiler, Version 5.109, 43599               03-Apr-23 21:59

               Filename:   E:\PIC 16F887\Code\ktrabai1\lcd-adc.lst

               ROM used:   922 words (11%)
                           Largest free fragment is 2048
               RAM used:   9 (2%) at main() level
                           26 (7%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  02
0001:  MOVWF  0A
0002:  GOTO   2B7
0003:  NOP
.................... #include <16F887.h>
.................... //////////// Standard Header file for the PIC16F887 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F887
0004:  DATA 41,18
0005:  DATA B0,1E
0006:  DATA 25,18
0007:  DATA 34,26
0008:  DATA 75,00
0009:  DATA C1,18
000A:  DATA B1,1E
000B:  DATA 25,18
000C:  DATA 34,26
000D:  DATA 75,00
*
00F1:  MOVF   0B,W
00F2:  MOVWF  23
00F3:  BCF    0B.7
00F4:  BSF    03.5
00F5:  BSF    03.6
00F6:  BSF    0C.7
00F7:  BSF    0C.0
00F8:  NOP
00F9:  NOP
00FA:  BCF    03.5
00FB:  BCF    03.6
00FC:  BTFSC  23.7
00FD:  BSF    0B.7
00FE:  BTFSC  03.0
00FF:  GOTO   128
0100:  BSF    03.6
0101:  MOVF   0C,W
0102:  ANDLW  7F
0103:  BCF    03.6
0104:  MOVWF  23
0105:  BSF    03.6
0106:  MOVF   0D,W
0107:  BCF    03.6
0108:  MOVWF  24
0109:  BSF    03.6
010A:  MOVF   0F,W
010B:  BCF    03.6
010C:  MOVWF  25
010D:  MOVF   23,W
010E:  MOVWF  2B
010F:  CALL   0C5
0110:  MOVF   24,W
0111:  BSF    03.6
0112:  MOVWF  0D
0113:  BCF    03.6
0114:  MOVF   25,W
0115:  BSF    03.6
0116:  MOVWF  0F
0117:  BCF    03.6
0118:  MOVF   0B,W
0119:  MOVWF  26
011A:  BCF    0B.7
011B:  BSF    03.5
011C:  BSF    03.6
011D:  BSF    0C.7
011E:  BSF    0C.0
011F:  NOP
0120:  NOP
0121:  BCF    03.5
0122:  BCF    03.6
0123:  BTFSC  26.7
0124:  BSF    0B.7
0125:  DECFSZ 22,F
0126:  GOTO   128
0127:  GOTO   147
0128:  BSF    03.6
0129:  RLF    0C,W
012A:  RLF    0E,W
012B:  ANDLW  7F
012C:  BCF    03.6
012D:  MOVWF  23
012E:  BSF    03.6
012F:  MOVF   0D,W
0130:  BCF    03.6
0131:  MOVWF  24
0132:  BSF    03.6
0133:  MOVF   0F,W
0134:  BCF    03.6
0135:  MOVWF  25
0136:  MOVF   23,W
0137:  MOVWF  2B
0138:  CALL   0C5
0139:  MOVF   24,W
013A:  BSF    03.6
013B:  MOVWF  0D
013C:  BCF    03.6
013D:  MOVF   25,W
013E:  BSF    03.6
013F:  MOVWF  0F
0140:  INCF   0D,F
0141:  BTFSC  03.2
0142:  INCF   0F,F
0143:  BCF    03.0
0144:  BCF    03.6
0145:  DECFSZ 22,F
0146:  GOTO   0F1
0147:  RETURN
0148:  CLRF   2A
0149:  MOVF   04,W
014A:  MOVWF  29
014B:  BCF    2A.0
014C:  BTFSC  03.7
014D:  BSF    2A.0
014E:  SWAPF  23,W
014F:  IORLW  F0
0150:  MOVWF  25
0151:  ADDWF  25,F
0152:  ADDLW  E2
0153:  MOVWF  26
0154:  ADDLW  32
0155:  MOVWF  28
0156:  MOVF   23,W
0157:  ANDLW  0F
0158:  ADDWF  26,F
0159:  ADDWF  26,F
015A:  ADDWF  28,F
015B:  ADDLW  E9
015C:  MOVWF  27
015D:  ADDWF  27,F
015E:  ADDWF  27,F
015F:  SWAPF  22,W
0160:  ANDLW  0F
0161:  ADDWF  27,F
0162:  ADDWF  28,F
0163:  RLF    27,F
0164:  RLF    28,F
0165:  COMF   28,F
0166:  RLF    28,F
0167:  MOVF   22,W
0168:  ANDLW  0F
0169:  ADDWF  28,F
016A:  RLF    25,F
016B:  MOVLW  07
016C:  MOVWF  24
016D:  MOVLW  0A
016E:  ADDWF  28,F
016F:  DECF   27,F
0170:  BTFSS  03.0
0171:  GOTO   16E
0172:  ADDWF  27,F
0173:  DECF   26,F
0174:  BTFSS  03.0
0175:  GOTO   172
0176:  ADDWF  26,F
0177:  DECF   25,F
0178:  BTFSS  03.0
0179:  GOTO   176
017A:  ADDWF  25,F
017B:  DECF   24,F
017C:  BTFSS  03.0
017D:  GOTO   17A
017E:  MOVLW  24
017F:  MOVWF  04
0180:  BCF    03.7
0181:  MOVLW  07
0182:  ANDWF  29,W
0183:  BCF    29.6
0184:  ADDWF  04,F
0185:  MOVLW  28
0186:  SUBWF  04,W
0187:  BTFSC  03.2
0188:  BSF    29.6
0189:  MOVF   00,W
018A:  MOVWF  77
018B:  BTFSS  03.2
018C:  GOTO   195
018D:  BTFSC  29.6
018E:  GOTO   195
018F:  BTFSC  29.4
0190:  GOTO   1A7
0191:  BTFSC  29.3
0192:  GOTO   195
0193:  MOVLW  20
0194:  GOTO   198
0195:  BSF    29.3
0196:  BCF    29.4
0197:  MOVLW  30
0198:  ADDWF  77,F
0199:  CLRF   23
019A:  MOVF   04,W
019B:  MOVWF  22
019C:  BCF    23.0
019D:  BTFSC  03.7
019E:  BSF    23.0
019F:  MOVF   77,W
01A0:  MOVWF  2B
01A1:  CALL   0C5
01A2:  MOVF   22,W
01A3:  MOVWF  04
01A4:  BCF    03.7
01A5:  BTFSC  23.0
01A6:  BSF    03.7
01A7:  INCF   04,F
01A8:  BTFSS  29.6
01A9:  GOTO   185
01AA:  RETURN
01AB:  MOVLW  8E
01AC:  MOVWF  77
01AD:  MOVF   25,W
01AE:  MOVWF  78
01AF:  MOVF   24,W
01B0:  MOVWF  79
01B1:  CLRF   7A
01B2:  MOVF   78,F
01B3:  BTFSS  03.2
01B4:  GOTO   1BF
01B5:  MOVF   79,W
01B6:  MOVWF  78
01B7:  CLRF   79
01B8:  MOVLW  08
01B9:  SUBWF  77,F
01BA:  MOVF   78,F
01BB:  BTFSS  03.2
01BC:  GOTO   1BF
01BD:  CLRF   77
01BE:  GOTO   1C7
01BF:  BCF    03.0
01C0:  BTFSC  78.7
01C1:  GOTO   1C6
01C2:  RLF    79,F
01C3:  RLF    78,F
01C4:  DECF   77,F
01C5:  GOTO   1BF
01C6:  BCF    78.7
01C7:  BCF    0A.3
01C8:  BCF    0A.4
01C9:  GOTO   335 (RETURN)
01CA:  MOVF   24,W
01CB:  BTFSC  03.2
01CC:  GOTO   28F
01CD:  MOVWF  30
01CE:  MOVF   28,W
01CF:  BTFSC  03.2
01D0:  GOTO   28F
01D1:  SUBWF  30,F
01D2:  BTFSS  03.0
01D3:  GOTO   1D9
01D4:  MOVLW  7F
01D5:  ADDWF  30,F
01D6:  BTFSC  03.0
01D7:  GOTO   28F
01D8:  GOTO   1DF
01D9:  MOVLW  81
01DA:  SUBWF  30,F
01DB:  BTFSS  03.0
01DC:  GOTO   28F
01DD:  BTFSC  03.2
01DE:  GOTO   28F
01DF:  MOVF   30,W
01E0:  MOVWF  77
01E1:  CLRF   78
01E2:  CLRF   79
01E3:  CLRF   7A
01E4:  CLRF   2F
01E5:  MOVF   25,W
01E6:  MOVWF  2E
01E7:  BSF    2E.7
01E8:  MOVF   26,W
01E9:  MOVWF  2D
01EA:  MOVF   27,W
01EB:  MOVWF  2C
01EC:  MOVLW  19
01ED:  MOVWF  30
01EE:  MOVF   2B,W
01EF:  SUBWF  2C,F
01F0:  BTFSC  03.0
01F1:  GOTO   202
01F2:  MOVLW  01
01F3:  SUBWF  2D,F
01F4:  BTFSC  03.0
01F5:  GOTO   202
01F6:  SUBWF  2E,F
01F7:  BTFSC  03.0
01F8:  GOTO   202
01F9:  SUBWF  2F,F
01FA:  BTFSC  03.0
01FB:  GOTO   202
01FC:  INCF   2F,F
01FD:  INCF   2E,F
01FE:  INCF   2D,F
01FF:  MOVF   2B,W
0200:  ADDWF  2C,F
0201:  GOTO   234
0202:  MOVF   2A,W
0203:  SUBWF  2D,F
0204:  BTFSC  03.0
0205:  GOTO   21D
0206:  MOVLW  01
0207:  SUBWF  2E,F
0208:  BTFSC  03.0
0209:  GOTO   21D
020A:  SUBWF  2F,F
020B:  BTFSC  03.0
020C:  GOTO   21D
020D:  INCF   2F,F
020E:  INCF   2E,F
020F:  MOVF   2A,W
0210:  ADDWF  2D,F
0211:  MOVF   2B,W
0212:  ADDWF  2C,F
0213:  BTFSS  03.0
0214:  GOTO   234
0215:  INCF   2D,F
0216:  BTFSS  03.2
0217:  GOTO   234
0218:  INCF   2E,F
0219:  BTFSS  03.2
021A:  GOTO   234
021B:  INCF   2F,F
021C:  GOTO   234
021D:  MOVF   29,W
021E:  IORLW  80
021F:  SUBWF  2E,F
0220:  BTFSC  03.0
0221:  GOTO   233
0222:  MOVLW  01
0223:  SUBWF  2F,F
0224:  BTFSC  03.0
0225:  GOTO   233
0226:  INCF   2F,F
0227:  MOVF   29,W
0228:  IORLW  80
0229:  ADDWF  2E,F
022A:  MOVF   2A,W
022B:  ADDWF  2D,F
022C:  BTFSS  03.0
022D:  GOTO   211
022E:  INCF   2E,F
022F:  BTFSS  03.2
0230:  GOTO   211
0231:  INCF   2F,F
0232:  GOTO   211
0233:  BSF    7A.0
0234:  DECFSZ 30,F
0235:  GOTO   237
0236:  GOTO   242
0237:  BCF    03.0
0238:  RLF    2C,F
0239:  RLF    2D,F
023A:  RLF    2E,F
023B:  RLF    2F,F
023C:  BCF    03.0
023D:  RLF    7A,F
023E:  RLF    79,F
023F:  RLF    78,F
0240:  RLF    31,F
0241:  GOTO   1EE
0242:  BTFSS  31.0
0243:  GOTO   24A
0244:  BCF    03.0
0245:  RRF    78,F
0246:  RRF    79,F
0247:  RRF    7A,F
0248:  RRF    31,F
0249:  GOTO   24D
024A:  DECF   77,F
024B:  BTFSC  03.2
024C:  GOTO   28F
024D:  BTFSC  31.7
024E:  GOTO   276
024F:  BCF    03.0
0250:  RLF    2C,F
0251:  RLF    2D,F
0252:  RLF    2E,F
0253:  RLF    2F,F
0254:  MOVF   2B,W
0255:  SUBWF  2C,F
0256:  BTFSC  03.0
0257:  GOTO   262
0258:  MOVLW  01
0259:  SUBWF  2D,F
025A:  BTFSC  03.0
025B:  GOTO   262
025C:  SUBWF  2E,F
025D:  BTFSC  03.0
025E:  GOTO   262
025F:  SUBWF  2F,F
0260:  BTFSS  03.0
0261:  GOTO   285
0262:  MOVF   2A,W
0263:  SUBWF  2D,F
0264:  BTFSC  03.0
0265:  GOTO   26D
0266:  MOVLW  01
0267:  SUBWF  2E,F
0268:  BTFSC  03.0
0269:  GOTO   26D
026A:  SUBWF  2F,F
026B:  BTFSS  03.0
026C:  GOTO   285
026D:  MOVF   29,W
026E:  IORLW  80
026F:  SUBWF  2E,F
0270:  BTFSC  03.0
0271:  GOTO   276
0272:  MOVLW  01
0273:  SUBWF  2F,F
0274:  BTFSS  03.0
0275:  GOTO   285
0276:  INCF   7A,F
0277:  BTFSS  03.2
0278:  GOTO   285
0279:  INCF   79,F
027A:  BTFSS  03.2
027B:  GOTO   285
027C:  INCF   78,F
027D:  BTFSS  03.2
027E:  GOTO   285
027F:  INCF   77,F
0280:  BTFSC  03.2
0281:  GOTO   28F
0282:  RRF    78,F
0283:  RRF    79,F
0284:  RRF    7A,F
0285:  MOVF   25,W
0286:  MOVWF  30
0287:  MOVF   29,W
0288:  XORWF  30,F
0289:  BTFSS  30.7
028A:  GOTO   28D
028B:  BSF    78.7
028C:  GOTO   293
028D:  BCF    78.7
028E:  GOTO   293
028F:  CLRF   77
0290:  CLRF   78
0291:  CLRF   79
0292:  CLRF   7A
0293:  BCF    0A.3
0294:  BCF    0A.4
0295:  GOTO   346 (RETURN)
0296:  MOVLW  8E
0297:  MOVWF  77
0298:  MOVF   22,W
0299:  SUBWF  77,F
029A:  MOVF   23,W
029B:  MOVWF  79
029C:  MOVF   24,W
029D:  MOVWF  78
029E:  BSF    79.7
029F:  MOVF   77,F
02A0:  BTFSC  03.2
02A1:  GOTO   2AD
02A2:  BCF    03.0
02A3:  MOVF   79,F
02A4:  BTFSS  03.2
02A5:  GOTO   2A9
02A6:  MOVF   78,F
02A7:  BTFSC  03.2
02A8:  GOTO   2AD
02A9:  RRF    79,F
02AA:  RRF    78,F
02AB:  DECFSZ 77,F
02AC:  GOTO   2A2
02AD:  BTFSS  23.7
02AE:  GOTO   2B4
02AF:  COMF   78,F
02B0:  COMF   79,F
02B1:  INCF   78,F
02B2:  BTFSC  03.2
02B3:  INCF   79,F
02B4:  BCF    0A.3
02B5:  BCF    0A.4
02B6:  GOTO   34F (RETURN)
.................... 
.................... #list
.................... 
.................... #device ADC=10
.................... #fuses INTRC_IO
.................... #use delay(CLOCK=8MHz)
*
000E:  MOVLW  2C
000F:  MOVWF  04
0010:  BCF    03.7
0011:  MOVF   00,W
0012:  BTFSC  03.2
0013:  GOTO   021
0014:  MOVLW  02
0015:  MOVWF  78
0016:  CLRF   77
0017:  DECFSZ 77,F
0018:  GOTO   017
0019:  DECFSZ 78,F
001A:  GOTO   016
001B:  MOVLW  97
001C:  MOVWF  77
001D:  DECFSZ 77,F
001E:  GOTO   01D
001F:  DECFSZ 00,F
0020:  GOTO   014
0021:  RETURN
.................... #include <lcd.c>
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////                             LCD.C                                     ////
.................... ////                 Driver for common LCD modules                         ////
.................... ////                                                                       ////
.................... ////  lcd_init()   Must be called before any other function.               ////
.................... ////                                                                       ////
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         ////
.................... ////                 \a  Set cursor position to upper left                 ////
.................... ////                 \f  Clear display, set cursor to upper left           ////
.................... ////                 \n  Go to start of second line                        ////
.................... ////                 \b  Move back one position                            ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     ////
.................... ////              will erase all remanining characters on the current      ////
.................... ////              line, and move the cursor to the beginning of the next   ////
.................... ////              line.                                                    ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     ////
.................... ////              will move the cursor to the start of the current         ////
.................... ////              line.                                                    ////
.................... ////                                                                       ////
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        ////
.................... ////                                                                       ////
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             ////
.................... ////                                                                       ////
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         ////
.................... ////              (on=FALSE).                                              ////
.................... ////                                                                       ////
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   ////
.................... ////                                                                       ////
.................... ////                                                                       ////
.................... ////  CONFIGURATION                                                        ////
.................... ////  The LCD can be configured in one of two ways: a.) port access or     ////
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     ////
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     ////
.................... ////  connected to sequential pins on the GPIO.  Pin access                ////
.................... ////  has no requirements, all 7 bits of the control interface can         ////
.................... ////  can be connected to any GPIO using several ports.                    ////
.................... ////                                                                       ////
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     ////
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    ////
.................... ////  of this file to configure the pin order.  If you are using a         ////
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  ////
.................... ////  be defined.                                                          ////
.................... ////                                                                       ////
.................... ////  Example of port access:                                              ////
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         ////
.................... ////                                                                       ////
.................... ////  To use pin access, the following pins must be defined:               ////
.................... ////     LCD_ENABLE_PIN                                                    ////
.................... ////     LCD_RS_PIN                                                        ////
.................... ////     LCD_RW_PIN                                                        ////
.................... ////     LCD_DATA4                                                         ////
.................... ////     LCD_DATA5                                                         ////
.................... ////     LCD_DATA6                                                         ////
.................... ////     LCD_DATA7                                                         ////
.................... ////                                                                       ////
.................... ////  Example of pin access:                                               ////
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    ////
.................... ////     #define LCD_RS_PIN      PIN_E1                                    ////
.................... ////     #define LCD_RW_PIN      PIN_E2                                    ////
.................... ////     #define LCD_DATA4       PIN_D4                                    ////
.................... ////     #define LCD_DATA5       PIN_D5                                    ////
.................... ////     #define LCD_DATA6       PIN_D6                                    ////
.................... ////     #define LCD_DATA7       PIN_D7                                    ////
.................... ////                                                                       ////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef __LCD_C__
.................... #define __LCD_C__
.................... 
.................... // define the pinout.
.................... // only required if port access is being used.
.................... typedef struct  
.................... {                            // This structure is overlayed
....................    int1 enable;           // on to an I/O port to gain
....................    int1 rs;               // access to the LCD pins.
....................    int1 rw;               // The bits are allocated from
....................    int1 unused;           // low order up.  ENABLE will
....................    unsigned int     data : 4;         // be LSB pin of that port.
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT.
....................    unsigned int    reserved: 8;
....................   #endif
.................... } LCD_PIN_MAP;
.................... 
.................... // this is to improve compatability with previous LCD drivers that accepted
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B.
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE))
....................  #define LCD_DATA_PORT getenv("SFR:PORTB")
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    // these definitions only need to be modified for baseline PICs.
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions.
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0};
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF};
.................... #endif
.................... 
.................... ////////////////////// END CONFIGURATION ///////////////////////////////////
.................... 
.................... #ifndef LCD_ENABLE_PIN
....................    #define lcd_output_enable(x) lcdlat.enable=x
....................    #define lcd_enable_tris()   lcdtris.enable=0
.................... #else
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x)
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RS_PIN
....................    #define lcd_output_rs(x) lcdlat.rs=x
....................    #define lcd_rs_tris()   lcdtris.rs=0
.................... #else
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x)
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RW_PIN
....................    #define lcd_output_rw(x) lcdlat.rw=x
....................    #define lcd_rw_tris()   lcdtris.rw=0
.................... #else
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x)
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN)
.................... #endif
.................... 
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4,
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver
.................... // compatible with any code written for the original library
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7))
....................    #define  LCD_DATA4    LCD_DATA0
....................    #define  LCD_DATA5    LCD_DATA1
....................    #define  LCD_DATA6    LCD_DATA2
....................    #define  LCD_DATA7    LCD_DATA3
.................... #endif
.................... 
.................... #ifndef LCD_DATA4
.................... #ifndef LCD_DATA_PORT
....................    #if defined(__PCB__)
....................       #define LCD_DATA_PORT      0x06     //portb
....................       #define set_tris_lcd(x)   set_tris_b(x)
....................    #else
....................      #if defined(PIN_D0)
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd
....................      #else
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb
....................      #endif
....................    #endif   
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    LCD_PIN_MAP lcd, lcdlat;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
.................... #elif defined(__PCM__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
....................    #byte lcdtris = LCD_DATA_PORT+0x80
.................... #elif defined(__PCH__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT+9
....................    #byte lcdtris = LCD_DATA_PORT+0x12
.................... #elif defined(__PCD__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #word lcd = LCD_DATA_PORT
....................    #word lcdlat = LCD_DATA_PORT+2
....................    #word lcdtris = LCD_DATA_PORT-0x02
.................... #endif
.................... #endif   //LCD_DATA4 not defined
.................... 
.................... #ifndef LCD_TYPE
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines
.................... #endif
.................... 
.................... #ifndef LCD_LINE_TWO
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line
.................... #endif
.................... 
.................... #ifndef LCD_LINE_LENGTH
....................    #define LCD_LINE_LENGTH 20
.................... #endif
.................... 
.................... unsigned int8 lcd_read_nibble(void);
.................... 
.................... unsigned int8 lcd_read_byte(void)
.................... {
....................    unsigned int8 low,high;
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_INPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_float(LCD_DATA4);
....................    output_float(LCD_DATA5);
....................    output_float(LCD_DATA6);
....................    output_float(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0xF;
*
003B:  MOVLW  0F
003C:  BSF    03.5
003D:  ANDWF  08,W
003E:  IORLW  F0
003F:  MOVWF  08
....................   #endif
....................  #endif
....................         
....................    lcd_output_rw(1);
0040:  BCF    03.5
0041:  BSF    08.2
....................    delay_cycles(1);
0042:  NOP
....................    lcd_output_enable(1);
0043:  BSF    08.0
....................    delay_cycles(1);
0044:  NOP
....................    high = lcd_read_nibble();
0045:  CALL   02F
0046:  MOVF   78,W
0047:  MOVWF  33
....................       
....................    lcd_output_enable(0);
0048:  BCF    08.0
....................    delay_cycles(1);
0049:  NOP
....................    lcd_output_enable(1);
004A:  BSF    08.0
....................    delay_us(1);
004B:  GOTO   04C
....................    low = lcd_read_nibble();
004C:  CALL   02F
004D:  MOVF   78,W
004E:  MOVWF  32
....................       
....................    lcd_output_enable(0);
004F:  BCF    08.0
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
....................    output_drive(LCD_DATA5);
....................    output_drive(LCD_DATA6);
....................    output_drive(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0x0;
0050:  MOVLW  0F
0051:  BSF    03.5
0052:  ANDWF  08,W
0053:  MOVWF  08
....................   #endif
....................  #endif
.................... 
....................    return( (high<<4) | low);
0054:  BCF    03.5
0055:  SWAPF  33,W
0056:  MOVWF  77
0057:  MOVLW  F0
0058:  ANDWF  77,F
0059:  MOVF   77,W
005A:  IORWF  32,W
005B:  MOVWF  78
.................... }
.................... 
.................... unsigned int8 lcd_read_nibble(void)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    unsigned int8 n = 0x00;
.................... 
....................    /* Read the data port */
....................    n |= input(LCD_DATA4);
....................    n |= input(LCD_DATA5) << 1;
....................    n |= input(LCD_DATA6) << 2;
....................    n |= input(LCD_DATA7) << 3;
....................    
....................    return(n);
....................   #else
....................    return(lcd.data);
*
002F:  MOVF   08,W
0030:  MOVWF  77
0031:  SWAPF  08,W
0032:  ANDLW  0F
0033:  MOVWF  78
....................   #endif
0034:  RETURN
.................... }
.................... 
.................... void lcd_send_nibble(unsigned int8 n)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    /* Write to the data port */
....................    output_bit(LCD_DATA4, bit_test(n, 0));
....................    output_bit(LCD_DATA5, bit_test(n, 1));
....................    output_bit(LCD_DATA6, bit_test(n, 2));
....................    output_bit(LCD_DATA7, bit_test(n, 3));
....................   #else      
....................    lcdlat.data = n;
*
0022:  SWAPF  33,W
0023:  ANDLW  F0
0024:  MOVWF  77
0025:  MOVLW  0F
0026:  ANDWF  08,W
0027:  IORWF  77,W
0028:  MOVWF  08
....................   #endif
....................       
....................    delay_cycles(1);
0029:  NOP
....................    lcd_output_enable(1);
002A:  BSF    08.0
....................    delay_us(2);
002B:  GOTO   02C
002C:  GOTO   02D
....................    lcd_output_enable(0);
002D:  BCF    08.0
002E:  RETURN
.................... }
.................... 
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n)
.................... {
....................   #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................   #else
....................    lcd_enable_tris();
*
0035:  BSF    03.5
0036:  BCF    08.0
....................    lcd_rs_tris();
0037:  BCF    08.1
....................    lcd_rw_tris();
0038:  BCF    08.2
....................   #endif
.................... 
....................    lcd_output_rs(0);
0039:  BCF    03.5
003A:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ;
*
005C:  MOVF   78,W
005D:  MOVWF  32
005E:  BTFSC  32.7
005F:  GOTO   03B
....................    lcd_output_rs(address);
0060:  BTFSS  30.0
0061:  BCF    08.1
0062:  BTFSC  30.0
0063:  BSF    08.1
....................    delay_cycles(1);
0064:  NOP
....................    lcd_output_rw(0);
0065:  BCF    08.2
....................    delay_cycles(1);
0066:  NOP
....................    lcd_output_enable(0);
0067:  BCF    08.0
....................    lcd_send_nibble(n >> 4);
0068:  SWAPF  31,W
0069:  MOVWF  32
006A:  MOVLW  0F
006B:  ANDWF  32,F
006C:  MOVF   32,W
006D:  MOVWF  33
006E:  CALL   022
....................    lcd_send_nibble(n & 0xf);
006F:  MOVF   31,W
0070:  ANDLW  0F
0071:  MOVWF  32
0072:  MOVWF  33
0073:  CALL   022
0074:  RETURN
.................... }
.................... 
.................... #if defined(LCD_EXTENDED_NEWLINE)
.................... unsigned int8 g_LcdX, g_LcdY;
.................... #endif
.................... 
.................... void lcd_init(void) 
.................... {
....................    unsigned int8 i;
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6};
0075:  MOVLW  28
0076:  MOVWF  23
0077:  MOVLW  0C
0078:  MOVWF  24
0079:  MOVLW  01
007A:  MOVWF  25
007B:  MOVLW  06
007C:  MOVWF  26
....................                              // These bytes need to be sent to the LCD
....................                              // to start it up.
....................    
.................... 
....................    lcd_output_enable(0);
007D:  BCF    08.0
....................    lcd_output_rs(0);
007E:  BCF    08.1
....................    lcd_output_rw(0);
007F:  BCF    08.2
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
....................    output_drive(LCD_DATA5);
....................    output_drive(LCD_DATA6);
....................    output_drive(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0x0;
0080:  MOVLW  0F
0081:  BSF    03.5
0082:  ANDWF  08,W
0083:  MOVWF  08
....................   #endif
....................    lcd_enable_tris();
0084:  BCF    08.0
....................    lcd_rs_tris();
0085:  BCF    08.1
....................    lcd_rw_tris();
0086:  BCF    08.2
....................  #endif
....................     
....................    delay_ms(15);
0087:  MOVLW  0F
0088:  BCF    03.5
0089:  MOVWF  2C
008A:  CALL   00E
....................    for(i=1;i<=3;++i)
008B:  MOVLW  01
008C:  MOVWF  22
008D:  MOVF   22,W
008E:  SUBLW  03
008F:  BTFSS  03.0
0090:  GOTO   099
....................    {
....................        lcd_send_nibble(3);
0091:  MOVLW  03
0092:  MOVWF  33
0093:  CALL   022
....................        delay_ms(5);
0094:  MOVLW  05
0095:  MOVWF  2C
0096:  CALL   00E
0097:  INCF   22,F
0098:  GOTO   08D
....................    }
....................    
....................    lcd_send_nibble(2);
0099:  MOVLW  02
009A:  MOVWF  33
009B:  CALL   022
....................    delay_ms(5);
009C:  MOVLW  05
009D:  MOVWF  2C
009E:  CALL   00E
....................    for(i=0;i<=3;++i)
009F:  CLRF   22
00A0:  MOVF   22,W
00A1:  SUBLW  03
00A2:  BTFSS  03.0
00A3:  GOTO   0B0
....................       lcd_send_byte(0,LCD_INIT_STRING[i]);
00A4:  MOVLW  23
00A5:  ADDWF  22,W
00A6:  MOVWF  04
00A7:  BCF    03.7
00A8:  MOVF   00,W
00A9:  MOVWF  27
00AA:  CLRF   30
00AB:  MOVF   27,W
00AC:  MOVWF  31
00AD:  CALL   035
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
00AE:  INCF   22,F
00AF:  GOTO   0A0
00B0:  BCF    0A.3
00B1:  BCF    0A.4
00B2:  GOTO   2D9 (RETURN)
....................    g_LcdX = 0;
....................    g_LcdY = 0;
....................   #endif
.................... }
.................... 
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y)
.................... {
....................    unsigned int8 address;
....................    
....................    if(y!=1)
00B3:  DECFSZ 2D,W
00B4:  GOTO   0B6
00B5:  GOTO   0B9
....................       address=LCD_LINE_TWO;
00B6:  MOVLW  40
00B7:  MOVWF  2E
00B8:  GOTO   0BA
....................    else
....................       address=0;
00B9:  CLRF   2E
....................      
....................    address+=x-1;
00BA:  MOVLW  01
00BB:  SUBWF  2C,W
00BC:  ADDWF  2E,F
....................    lcd_send_byte(0,0x80|address);
00BD:  MOVF   2E,W
00BE:  IORLW  80
00BF:  MOVWF  2F
00C0:  CLRF   30
00C1:  MOVF   2F,W
00C2:  MOVWF  31
00C3:  CALL   035
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
00C4:  RETURN
....................    g_LcdX = x - 1;
....................    g_LcdY = y - 1;
....................   #endif
.................... }
.................... 
.................... void lcd_putc(char c)
.................... {
....................    switch (c)
00C5:  MOVF   2B,W
00C6:  XORLW  07
00C7:  BTFSC  03.2
00C8:  GOTO   0D3
00C9:  XORLW  0B
00CA:  BTFSC  03.2
00CB:  GOTO   0D8
00CC:  XORLW  06
00CD:  BTFSC  03.2
00CE:  GOTO   0E0
00CF:  XORLW  02
00D0:  BTFSC  03.2
00D1:  GOTO   0E6
00D2:  GOTO   0EB
....................    {
....................       case '\a'   :  lcd_gotoxy(1,1);     break;
00D3:  MOVLW  01
00D4:  MOVWF  2C
00D5:  MOVWF  2D
00D6:  CALL   0B3
00D7:  GOTO   0F0
.................... 
....................       case '\f'   :  lcd_send_byte(0,1);
00D8:  CLRF   30
00D9:  MOVLW  01
00DA:  MOVWF  31
00DB:  CALL   035
....................                      delay_ms(2);
00DC:  MOVLW  02
00DD:  MOVWF  2C
00DE:  CALL   00E
....................                     #if defined(LCD_EXTENDED_NEWLINE)
....................                      g_LcdX = 0;
....................                      g_LcdY = 0;
....................                     #endif
....................                      break;
00DF:  GOTO   0F0
.................... 
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break;
....................       case '\n'   :
....................          while (g_LcdX++ < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, ' ');
....................          }
....................          lcd_gotoxy(1, g_LcdY+2);
....................          break;
....................      #else
....................       case '\n'   : lcd_gotoxy(1,2);        break;
00E0:  MOVLW  01
00E1:  MOVWF  2C
00E2:  MOVLW  02
00E3:  MOVWF  2D
00E4:  CALL   0B3
00E5:  GOTO   0F0
....................      #endif
....................      
....................       case '\b'   : lcd_send_byte(0,0x10);  break;
00E6:  CLRF   30
00E7:  MOVLW  10
00E8:  MOVWF  31
00E9:  CALL   035
00EA:  GOTO   0F0
....................      
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       default     : 
....................          if (g_LcdX < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, c);
....................             g_LcdX++;
....................          }
....................          break;
....................      #else
....................       default     : lcd_send_byte(1,c);     break;
00EB:  MOVLW  01
00EC:  MOVWF  30
00ED:  MOVF   2B,W
00EE:  MOVWF  31
00EF:  CALL   035
....................      #endif
....................    }
00F0:  RETURN
.................... }
....................  
.................... char lcd_getc(unsigned int8 x, unsigned int8 y)
.................... {
....................    char value;
.................... 
....................    lcd_gotoxy(x,y);
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low
....................    lcd_output_rs(1);
....................    value = lcd_read_byte();
....................    lcd_output_rs(0);
....................    
....................    return(value);
.................... }
.................... 
.................... // write a custom character to the ram
.................... // which is 0-7 and specifies which character array we are modifying.
.................... // ptr points to an array of 8 bytes, where each byte is the next row of
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and
.................... //    usually you will want to leave this byte 0x00.
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr)
.................... {
....................    unsigned int i;
.................... 
....................    which <<= 3;
....................    which &= 0x38;
.................... 
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address
.................... 
....................    for(i=0; i<8; i++)
....................    {
....................       lcd_send_byte(1, *ptr++);
....................    }
....................   
....................    #if defined(LCD_EXTENDED_NEWLINE)
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address
....................    #endif
.................... }
.................... 
.................... void lcd_cursor_on(int1 on)
.................... {
....................    if (on)
....................    {
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON
....................    }
....................    else
....................    {
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF
....................    }
.................... }
.................... 
.................... #endif
.................... 
.................... 
.................... unsigned int16 Value;
.................... 
.................... void main()
*
02B7:  MOVF   03,W
02B8:  ANDLW  1F
02B9:  MOVWF  03
02BA:  MOVLW  71
02BB:  BSF    03.5
02BC:  MOVWF  0F
02BD:  CLRF   10
02BE:  MOVF   0F,W
02BF:  BSF    03.6
02C0:  MOVF   09,W
02C1:  ANDLW  C0
02C2:  MOVWF  09
02C3:  BCF    03.6
02C4:  BCF    1F.4
02C5:  BCF    1F.5
02C6:  MOVLW  00
02C7:  BSF    03.6
02C8:  MOVWF  08
02C9:  BCF    03.5
02CA:  CLRF   07
02CB:  CLRF   08
02CC:  CLRF   09
02CD:  BCF    03.7
.................... {
.................... set_tris_a(0xFF);
02CE:  MOVLW  FF
02CF:  BSF    03.5
02D0:  BCF    03.6
02D1:  MOVWF  05
.................... set_tris_b(0xFF);
02D2:  MOVWF  06
.................... set_tris_e(0xFF);
02D3:  BSF    09.0
02D4:  BSF    09.1
02D5:  BSF    09.2
02D6:  BSF    09.3
.................... 
.................... lcd_init();
02D7:  BCF    03.5
02D8:  GOTO   075
.................... 
.................... setup_adc_ports(sAN0|sAN5|sAN11|VSS_VDD);
02D9:  BSF    03.5
02DA:  BSF    03.6
02DB:  MOVF   09,W
02DC:  ANDLW  C0
02DD:  IORLW  08
02DE:  MOVWF  09
02DF:  BCF    03.6
02E0:  BCF    1F.4
02E1:  BCF    1F.5
02E2:  MOVLW  21
02E3:  BSF    03.6
02E4:  MOVWF  08
.................... setup_adc(ADC_CLOCK_INTERNAL);
02E5:  BCF    03.5
02E6:  BCF    03.6
02E7:  BSF    1F.6
02E8:  BSF    1F.7
02E9:  BSF    03.5
02EA:  BSF    1F.7
02EB:  BCF    03.5
02EC:  BSF    1F.0
.................... while(TRUE)
.................... {
.................... set_adc_channel(0);
02ED:  MOVLW  00
02EE:  MOVWF  78
02EF:  MOVF   1F,W
02F0:  ANDLW  C3
02F1:  IORWF  78,W
02F2:  MOVWF  1F
.................... delay_us(20);
02F3:  MOVLW  0D
02F4:  MOVWF  77
02F5:  DECFSZ 77,F
02F6:  GOTO   2F5
.................... Value = read_adc();
02F7:  BSF    1F.1
02F8:  BTFSC  1F.1
02F9:  GOTO   2F8
02FA:  MOVF   1E,W
02FB:  MOVWF  79
02FC:  BSF    03.5
02FD:  MOVF   1E,W
02FE:  MOVWF  78
02FF:  MOVF   79,W
0300:  BCF    03.5
0301:  MOVWF  21
0302:  MOVF   78,W
0303:  MOVWF  20
.................... lcd_gotoxy(1,1);
0304:  MOVLW  01
0305:  MOVWF  2C
0306:  MOVWF  2D
0307:  CALL   0B3
.................... printf(lcd_putc,"A00=%04Lu",Value);
0308:  MOVLW  04
0309:  BSF    03.6
030A:  MOVWF  0D
030B:  MOVLW  00
030C:  MOVWF  0F
030D:  BCF    03.0
030E:  MOVLW  04
030F:  BCF    03.6
0310:  MOVWF  22
0311:  CALL   0F1
0312:  MOVLW  09
0313:  MOVWF  04
0314:  MOVF   21,W
0315:  MOVWF  23
0316:  MOVF   20,W
0317:  MOVWF  22
0318:  CALL   148
.................... 
.................... set_adc_channel(5);
0319:  MOVLW  14
031A:  MOVWF  78
031B:  MOVF   1F,W
031C:  ANDLW  C3
031D:  IORWF  78,W
031E:  MOVWF  1F
.................... delay_us(20);
031F:  MOVLW  0D
0320:  MOVWF  77
0321:  DECFSZ 77,F
0322:  GOTO   321
.................... Value = read_adc()/2.046;
0323:  BSF    1F.1
0324:  BTFSC  1F.1
0325:  GOTO   324
0326:  MOVF   1E,W
0327:  MOVWF  79
0328:  BSF    03.5
0329:  MOVF   1E,W
032A:  MOVWF  78
032B:  MOVF   79,W
032C:  BCF    03.5
032D:  MOVWF  23
032E:  MOVF   78,W
032F:  MOVWF  22
0330:  MOVF   23,W
0331:  MOVWF  25
0332:  MOVF   78,W
0333:  MOVWF  24
0334:  GOTO   1AB
0335:  MOVF   7A,W
0336:  MOVWF  27
0337:  MOVF   79,W
0338:  MOVWF  26
0339:  MOVF   78,W
033A:  MOVWF  25
033B:  MOVF   77,W
033C:  MOVWF  24
033D:  MOVLW  AA
033E:  MOVWF  2B
033F:  MOVLW  F1
0340:  MOVWF  2A
0341:  MOVLW  02
0342:  MOVWF  29
0343:  MOVLW  80
0344:  MOVWF  28
0345:  GOTO   1CA
0346:  MOVF   7A,W
0347:  MOVWF  25
0348:  MOVF   79,W
0349:  MOVWF  24
034A:  MOVF   78,W
034B:  MOVWF  23
034C:  MOVF   77,W
034D:  MOVWF  22
034E:  GOTO   296
034F:  MOVF   79,W
0350:  MOVWF  21
0351:  MOVF   78,W
0352:  MOVWF  20
.................... lcd_gotoxy(10,2);
0353:  MOVLW  0A
0354:  MOVWF  2C
0355:  MOVLW  02
0356:  MOVWF  2D
0357:  CALL   0B3
.................... printf(lcd_putc,"T=%03Lu",Value);
0358:  MOVLW  54
0359:  MOVWF  2B
035A:  CALL   0C5
035B:  MOVLW  3D
035C:  MOVWF  2B
035D:  CALL   0C5
035E:  MOVLW  0A
035F:  MOVWF  04
0360:  MOVF   21,W
0361:  MOVWF  23
0362:  MOVF   20,W
0363:  MOVWF  22
0364:  CALL   148
.................... lcd_putc(223);
0365:  MOVLW  DF
0366:  MOVWF  2B
0367:  CALL   0C5
.................... lcd_putc('C');
0368:  MOVLW  43
0369:  MOVWF  2B
036A:  CALL   0C5
.................... 
.................... set_adc_channel(11);
036B:  MOVLW  2C
036C:  MOVWF  78
036D:  MOVF   1F,W
036E:  ANDLW  C3
036F:  IORWF  78,W
0370:  MOVWF  1F
.................... delay_us(20);
0371:  MOVLW  0D
0372:  MOVWF  77
0373:  DECFSZ 77,F
0374:  GOTO   373
.................... Value = read_adc();
0375:  BSF    1F.1
0376:  BTFSC  1F.1
0377:  GOTO   376
0378:  MOVF   1E,W
0379:  MOVWF  79
037A:  BSF    03.5
037B:  MOVF   1E,W
037C:  MOVWF  78
037D:  MOVF   79,W
037E:  BCF    03.5
037F:  MOVWF  21
0380:  MOVF   78,W
0381:  MOVWF  20
.................... lcd_gotoxy(1,2);
0382:  MOVLW  01
0383:  MOVWF  2C
0384:  MOVLW  02
0385:  MOVWF  2D
0386:  CALL   0B3
.................... printf(lcd_putc,"A11=%04Lu",Value);
0387:  MOVLW  09
0388:  BSF    03.6
0389:  MOVWF  0D
038A:  MOVLW  00
038B:  MOVWF  0F
038C:  BCF    03.0
038D:  MOVLW  04
038E:  BCF    03.6
038F:  MOVWF  22
0390:  CALL   0F1
0391:  MOVLW  09
0392:  MOVWF  04
0393:  MOVF   21,W
0394:  MOVWF  23
0395:  MOVF   20,W
0396:  MOVWF  22
0397:  CALL   148
0398:  GOTO   2ED
.................... 
.................... }
.................... }
0399:  SLEEP

Configuration Fuses:
   Word  1: 2FE4   INTRC_IO NOWDT PUT MCLR NOPROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
