CCS PCM C Compiler, Version 5.109, 43599               03-Apr-23 23:37

               Filename:   E:\PIC 16F887\Code\ktrabai1\ktrabai2.lst

               ROM used:   984 words (12%)
                           Largest free fragment is 2048
               RAM used:   13 (4%) at main() level
                           30 (8%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  02
0001:  MOVWF  0A
0002:  GOTO   2AE
0003:  NOP
.................... #include <16F887.h>
.................... //////////// Standard Header file for the PIC16F887 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F887
0004:  DATA 5B,24
0005:  DATA 5D,00
0006:  DATA 5B,26
0007:  DATA 5D,00
0008:  DATA 5B,24
0009:  DATA 5D,00
000A:  DATA 5B,26
000B:  DATA 5D,00
*
00B1:  MOVLW  8E
00B2:  MOVWF  77
00B3:  MOVF   29,W
00B4:  MOVWF  78
00B5:  MOVF   28,W
00B6:  MOVWF  79
00B7:  CLRF   7A
00B8:  MOVF   78,F
00B9:  BTFSS  03.2
00BA:  GOTO   0C5
00BB:  MOVF   79,W
00BC:  MOVWF  78
00BD:  CLRF   79
00BE:  MOVLW  08
00BF:  SUBWF  77,F
00C0:  MOVF   78,F
00C1:  BTFSS  03.2
00C2:  GOTO   0C5
00C3:  CLRF   77
00C4:  GOTO   0CD
00C5:  BCF    03.0
00C6:  BTFSC  78.7
00C7:  GOTO   0CC
00C8:  RLF    79,F
00C9:  RLF    78,F
00CA:  DECF   77,F
00CB:  GOTO   0C5
00CC:  BCF    78.7
00CD:  RETURN
00CE:  MOVF   28,W
00CF:  BTFSC  03.2
00D0:  GOTO   193
00D1:  MOVWF  34
00D2:  MOVF   2C,W
00D3:  BTFSC  03.2
00D4:  GOTO   193
00D5:  SUBWF  34,F
00D6:  BTFSS  03.0
00D7:  GOTO   0DD
00D8:  MOVLW  7F
00D9:  ADDWF  34,F
00DA:  BTFSC  03.0
00DB:  GOTO   193
00DC:  GOTO   0E3
00DD:  MOVLW  81
00DE:  SUBWF  34,F
00DF:  BTFSS  03.0
00E0:  GOTO   193
00E1:  BTFSC  03.2
00E2:  GOTO   193
00E3:  MOVF   34,W
00E4:  MOVWF  77
00E5:  CLRF   78
00E6:  CLRF   79
00E7:  CLRF   7A
00E8:  CLRF   33
00E9:  MOVF   29,W
00EA:  MOVWF  32
00EB:  BSF    32.7
00EC:  MOVF   2A,W
00ED:  MOVWF  31
00EE:  MOVF   2B,W
00EF:  MOVWF  30
00F0:  MOVLW  19
00F1:  MOVWF  34
00F2:  MOVF   2F,W
00F3:  SUBWF  30,F
00F4:  BTFSC  03.0
00F5:  GOTO   106
00F6:  MOVLW  01
00F7:  SUBWF  31,F
00F8:  BTFSC  03.0
00F9:  GOTO   106
00FA:  SUBWF  32,F
00FB:  BTFSC  03.0
00FC:  GOTO   106
00FD:  SUBWF  33,F
00FE:  BTFSC  03.0
00FF:  GOTO   106
0100:  INCF   33,F
0101:  INCF   32,F
0102:  INCF   31,F
0103:  MOVF   2F,W
0104:  ADDWF  30,F
0105:  GOTO   138
0106:  MOVF   2E,W
0107:  SUBWF  31,F
0108:  BTFSC  03.0
0109:  GOTO   121
010A:  MOVLW  01
010B:  SUBWF  32,F
010C:  BTFSC  03.0
010D:  GOTO   121
010E:  SUBWF  33,F
010F:  BTFSC  03.0
0110:  GOTO   121
0111:  INCF   33,F
0112:  INCF   32,F
0113:  MOVF   2E,W
0114:  ADDWF  31,F
0115:  MOVF   2F,W
0116:  ADDWF  30,F
0117:  BTFSS  03.0
0118:  GOTO   138
0119:  INCF   31,F
011A:  BTFSS  03.2
011B:  GOTO   138
011C:  INCF   32,F
011D:  BTFSS  03.2
011E:  GOTO   138
011F:  INCF   33,F
0120:  GOTO   138
0121:  MOVF   2D,W
0122:  IORLW  80
0123:  SUBWF  32,F
0124:  BTFSC  03.0
0125:  GOTO   137
0126:  MOVLW  01
0127:  SUBWF  33,F
0128:  BTFSC  03.0
0129:  GOTO   137
012A:  INCF   33,F
012B:  MOVF   2D,W
012C:  IORLW  80
012D:  ADDWF  32,F
012E:  MOVF   2E,W
012F:  ADDWF  31,F
0130:  BTFSS  03.0
0131:  GOTO   115
0132:  INCF   32,F
0133:  BTFSS  03.2
0134:  GOTO   115
0135:  INCF   33,F
0136:  GOTO   115
0137:  BSF    7A.0
0138:  DECFSZ 34,F
0139:  GOTO   13B
013A:  GOTO   146
013B:  BCF    03.0
013C:  RLF    30,F
013D:  RLF    31,F
013E:  RLF    32,F
013F:  RLF    33,F
0140:  BCF    03.0
0141:  RLF    7A,F
0142:  RLF    79,F
0143:  RLF    78,F
0144:  RLF    35,F
0145:  GOTO   0F2
0146:  BTFSS  35.0
0147:  GOTO   14E
0148:  BCF    03.0
0149:  RRF    78,F
014A:  RRF    79,F
014B:  RRF    7A,F
014C:  RRF    35,F
014D:  GOTO   151
014E:  DECF   77,F
014F:  BTFSC  03.2
0150:  GOTO   193
0151:  BTFSC  35.7
0152:  GOTO   17A
0153:  BCF    03.0
0154:  RLF    30,F
0155:  RLF    31,F
0156:  RLF    32,F
0157:  RLF    33,F
0158:  MOVF   2F,W
0159:  SUBWF  30,F
015A:  BTFSC  03.0
015B:  GOTO   166
015C:  MOVLW  01
015D:  SUBWF  31,F
015E:  BTFSC  03.0
015F:  GOTO   166
0160:  SUBWF  32,F
0161:  BTFSC  03.0
0162:  GOTO   166
0163:  SUBWF  33,F
0164:  BTFSS  03.0
0165:  GOTO   189
0166:  MOVF   2E,W
0167:  SUBWF  31,F
0168:  BTFSC  03.0
0169:  GOTO   171
016A:  MOVLW  01
016B:  SUBWF  32,F
016C:  BTFSC  03.0
016D:  GOTO   171
016E:  SUBWF  33,F
016F:  BTFSS  03.0
0170:  GOTO   189
0171:  MOVF   2D,W
0172:  IORLW  80
0173:  SUBWF  32,F
0174:  BTFSC  03.0
0175:  GOTO   17A
0176:  MOVLW  01
0177:  SUBWF  33,F
0178:  BTFSS  03.0
0179:  GOTO   189
017A:  INCF   7A,F
017B:  BTFSS  03.2
017C:  GOTO   189
017D:  INCF   79,F
017E:  BTFSS  03.2
017F:  GOTO   189
0180:  INCF   78,F
0181:  BTFSS  03.2
0182:  GOTO   189
0183:  INCF   77,F
0184:  BTFSC  03.2
0185:  GOTO   193
0186:  RRF    78,F
0187:  RRF    79,F
0188:  RRF    7A,F
0189:  MOVF   29,W
018A:  MOVWF  34
018B:  MOVF   2D,W
018C:  XORWF  34,F
018D:  BTFSS  34.7
018E:  GOTO   191
018F:  BSF    78.7
0190:  GOTO   197
0191:  BCF    78.7
0192:  GOTO   197
0193:  CLRF   77
0194:  CLRF   78
0195:  CLRF   79
0196:  CLRF   7A
0197:  RETURN
0198:  MOVLW  8E
0199:  MOVWF  77
019A:  MOVF   26,W
019B:  SUBWF  77,F
019C:  MOVF   27,W
019D:  MOVWF  79
019E:  MOVF   28,W
019F:  MOVWF  78
01A0:  BSF    79.7
01A1:  MOVF   77,F
01A2:  BTFSC  03.2
01A3:  GOTO   1AF
01A4:  BCF    03.0
01A5:  MOVF   79,F
01A6:  BTFSS  03.2
01A7:  GOTO   1AB
01A8:  MOVF   78,F
01A9:  BTFSC  03.2
01AA:  GOTO   1AF
01AB:  RRF    79,F
01AC:  RRF    78,F
01AD:  DECFSZ 77,F
01AE:  GOTO   1A4
01AF:  BTFSS  27.7
01B0:  GOTO   1B6
01B1:  COMF   78,F
01B2:  COMF   79,F
01B3:  INCF   78,F
01B4:  BTFSC  03.2
01B5:  INCF   79,F
01B6:  RETURN
*
01F5:  CLRF   2E
01F6:  MOVF   04,W
01F7:  MOVWF  2D
01F8:  BCF    2E.0
01F9:  BTFSC  03.7
01FA:  BSF    2E.0
01FB:  SWAPF  27,W
01FC:  IORLW  F0
01FD:  MOVWF  29
01FE:  ADDWF  29,F
01FF:  ADDLW  E2
0200:  MOVWF  2A
0201:  ADDLW  32
0202:  MOVWF  2C
0203:  MOVF   27,W
0204:  ANDLW  0F
0205:  ADDWF  2A,F
0206:  ADDWF  2A,F
0207:  ADDWF  2C,F
0208:  ADDLW  E9
0209:  MOVWF  2B
020A:  ADDWF  2B,F
020B:  ADDWF  2B,F
020C:  SWAPF  26,W
020D:  ANDLW  0F
020E:  ADDWF  2B,F
020F:  ADDWF  2C,F
0210:  RLF    2B,F
0211:  RLF    2C,F
0212:  COMF   2C,F
0213:  RLF    2C,F
0214:  MOVF   26,W
0215:  ANDLW  0F
0216:  ADDWF  2C,F
0217:  RLF    29,F
0218:  MOVLW  07
0219:  MOVWF  28
021A:  MOVLW  0A
021B:  ADDWF  2C,F
021C:  DECF   2B,F
021D:  BTFSS  03.0
021E:  GOTO   21B
021F:  ADDWF  2B,F
0220:  DECF   2A,F
0221:  BTFSS  03.0
0222:  GOTO   21F
0223:  ADDWF  2A,F
0224:  DECF   29,F
0225:  BTFSS  03.0
0226:  GOTO   223
0227:  ADDWF  29,F
0228:  DECF   28,F
0229:  BTFSS  03.0
022A:  GOTO   227
022B:  MOVLW  28
022C:  MOVWF  04
022D:  BCF    03.7
022E:  MOVLW  07
022F:  ANDWF  2D,W
0230:  BCF    2D.6
0231:  ADDWF  04,F
0232:  MOVLW  2C
0233:  SUBWF  04,W
0234:  BTFSC  03.2
0235:  BSF    2D.6
0236:  MOVF   00,W
0237:  MOVWF  77
0238:  BTFSS  03.2
0239:  GOTO   242
023A:  BTFSC  2D.6
023B:  GOTO   242
023C:  BTFSC  2D.4
023D:  GOTO   254
023E:  BTFSC  2D.3
023F:  GOTO   242
0240:  MOVLW  20
0241:  GOTO   245
0242:  BSF    2D.3
0243:  BCF    2D.4
0244:  MOVLW  30
0245:  ADDWF  77,F
0246:  CLRF   27
0247:  MOVF   04,W
0248:  MOVWF  26
0249:  BCF    27.0
024A:  BTFSC  03.7
024B:  BSF    27.0
024C:  MOVF   77,W
024D:  MOVWF  2F
024E:  CALL   1C9
024F:  MOVF   26,W
0250:  MOVWF  04
0251:  BCF    03.7
0252:  BTFSC  27.0
0253:  BSF    03.7
0254:  INCF   04,F
0255:  BTFSS  2D.6
0256:  GOTO   232
0257:  RETURN
0258:  MOVF   0B,W
0259:  MOVWF  26
025A:  BCF    0B.7
025B:  BSF    03.5
025C:  BSF    03.6
025D:  BSF    0C.7
025E:  BSF    0C.0
025F:  NOP
0260:  NOP
0261:  BCF    03.5
0262:  BCF    03.6
0263:  BTFSC  26.7
0264:  BSF    0B.7
0265:  BSF    03.6
0266:  MOVF   0C,W
0267:  ANDLW  7F
0268:  BTFSC  03.2
0269:  GOTO   2AC
026A:  BCF    03.6
026B:  MOVWF  26
026C:  BSF    03.6
026D:  MOVF   0D,W
026E:  BCF    03.6
026F:  MOVWF  27
0270:  BSF    03.6
0271:  MOVF   0F,W
0272:  BCF    03.6
0273:  MOVWF  28
0274:  MOVF   26,W
0275:  MOVWF  2F
0276:  CALL   1C9
0277:  MOVF   27,W
0278:  BSF    03.6
0279:  MOVWF  0D
027A:  BCF    03.6
027B:  MOVF   28,W
027C:  BSF    03.6
027D:  MOVWF  0F
027E:  BCF    03.6
027F:  MOVF   0B,W
0280:  MOVWF  29
0281:  BCF    0B.7
0282:  BSF    03.5
0283:  BSF    03.6
0284:  BSF    0C.7
0285:  BSF    0C.0
0286:  NOP
0287:  NOP
0288:  BCF    03.5
0289:  BCF    03.6
028A:  BTFSC  29.7
028B:  BSF    0B.7
028C:  BSF    03.6
028D:  RLF    0C,W
028E:  RLF    0E,W
028F:  ANDLW  7F
0290:  BTFSC  03.2
0291:  GOTO   2AC
0292:  BCF    03.6
0293:  MOVWF  26
0294:  BSF    03.6
0295:  MOVF   0D,W
0296:  BCF    03.6
0297:  MOVWF  27
0298:  BSF    03.6
0299:  MOVF   0F,W
029A:  BCF    03.6
029B:  MOVWF  28
029C:  MOVF   26,W
029D:  MOVWF  2F
029E:  CALL   1C9
029F:  MOVF   27,W
02A0:  BSF    03.6
02A1:  MOVWF  0D
02A2:  BCF    03.6
02A3:  MOVF   28,W
02A4:  BSF    03.6
02A5:  MOVWF  0F
02A6:  INCF   0D,F
02A7:  BTFSC  03.2
02A8:  INCF   0F,F
02A9:  BCF    03.6
02AA:  GOTO   258
02AB:  BSF    03.6
02AC:  BCF    03.6
02AD:  RETURN
.................... 
.................... #list
.................... 
.................... #device ADC=10
.................... #fuses INTRC_IO
.................... #use delay(CLOCK=8MHz)
*
000C:  MOVLW  30
000D:  MOVWF  04
000E:  BCF    03.7
000F:  MOVF   00,W
0010:  BTFSC  03.2
0011:  GOTO   01F
0012:  MOVLW  02
0013:  MOVWF  78
0014:  CLRF   77
0015:  DECFSZ 77,F
0016:  GOTO   015
0017:  DECFSZ 78,F
0018:  GOTO   014
0019:  MOVLW  97
001A:  MOVWF  77
001B:  DECFSZ 77,F
001C:  GOTO   01B
001D:  DECFSZ 00,F
001E:  GOTO   012
001F:  RETURN
.................... #include <lcd.c>
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////                             LCD.C                                     ////
.................... ////                 Driver for common LCD modules                         ////
.................... ////                                                                       ////
.................... ////  lcd_init()   Must be called before any other function.               ////
.................... ////                                                                       ////
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         ////
.................... ////                 \a  Set cursor position to upper left                 ////
.................... ////                 \f  Clear display, set cursor to upper left           ////
.................... ////                 \n  Go to start of second line                        ////
.................... ////                 \b  Move back one position                            ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     ////
.................... ////              will erase all remanining characters on the current      ////
.................... ////              line, and move the cursor to the beginning of the next   ////
.................... ////              line.                                                    ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     ////
.................... ////              will move the cursor to the start of the current         ////
.................... ////              line.                                                    ////
.................... ////                                                                       ////
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        ////
.................... ////                                                                       ////
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             ////
.................... ////                                                                       ////
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         ////
.................... ////              (on=FALSE).                                              ////
.................... ////                                                                       ////
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   ////
.................... ////                                                                       ////
.................... ////                                                                       ////
.................... ////  CONFIGURATION                                                        ////
.................... ////  The LCD can be configured in one of two ways: a.) port access or     ////
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     ////
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     ////
.................... ////  connected to sequential pins on the GPIO.  Pin access                ////
.................... ////  has no requirements, all 7 bits of the control interface can         ////
.................... ////  can be connected to any GPIO using several ports.                    ////
.................... ////                                                                       ////
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     ////
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    ////
.................... ////  of this file to configure the pin order.  If you are using a         ////
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  ////
.................... ////  be defined.                                                          ////
.................... ////                                                                       ////
.................... ////  Example of port access:                                              ////
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         ////
.................... ////                                                                       ////
.................... ////  To use pin access, the following pins must be defined:               ////
.................... ////     LCD_ENABLE_PIN                                                    ////
.................... ////     LCD_RS_PIN                                                        ////
.................... ////     LCD_RW_PIN                                                        ////
.................... ////     LCD_DATA4                                                         ////
.................... ////     LCD_DATA5                                                         ////
.................... ////     LCD_DATA6                                                         ////
.................... ////     LCD_DATA7                                                         ////
.................... ////                                                                       ////
.................... ////  Example of pin access:                                               ////
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    ////
.................... ////     #define LCD_RS_PIN      PIN_E1                                    ////
.................... ////     #define LCD_RW_PIN      PIN_E2                                    ////
.................... ////     #define LCD_DATA4       PIN_D4                                    ////
.................... ////     #define LCD_DATA5       PIN_D5                                    ////
.................... ////     #define LCD_DATA6       PIN_D6                                    ////
.................... ////     #define LCD_DATA7       PIN_D7                                    ////
.................... ////                                                                       ////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef __LCD_C__
.................... #define __LCD_C__
.................... 
.................... // define the pinout.
.................... // only required if port access is being used.
.................... typedef struct  
.................... {                            // This structure is overlayed
....................    int1 enable;           // on to an I/O port to gain
....................    int1 rs;               // access to the LCD pins.
....................    int1 rw;               // The bits are allocated from
....................    int1 unused;           // low order up.  ENABLE will
....................    unsigned int     data : 4;         // be LSB pin of that port.
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT.
....................    unsigned int    reserved: 8;
....................   #endif
.................... } LCD_PIN_MAP;
.................... 
.................... // this is to improve compatability with previous LCD drivers that accepted
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B.
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE))
....................  #define LCD_DATA_PORT getenv("SFR:PORTB")
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    // these definitions only need to be modified for baseline PICs.
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions.
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0};
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF};
.................... #endif
.................... 
.................... ////////////////////// END CONFIGURATION ///////////////////////////////////
.................... 
.................... #ifndef LCD_ENABLE_PIN
....................    #define lcd_output_enable(x) lcdlat.enable=x
....................    #define lcd_enable_tris()   lcdtris.enable=0
.................... #else
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x)
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RS_PIN
....................    #define lcd_output_rs(x) lcdlat.rs=x
....................    #define lcd_rs_tris()   lcdtris.rs=0
.................... #else
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x)
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RW_PIN
....................    #define lcd_output_rw(x) lcdlat.rw=x
....................    #define lcd_rw_tris()   lcdtris.rw=0
.................... #else
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x)
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN)
.................... #endif
.................... 
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4,
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver
.................... // compatible with any code written for the original library
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7))
....................    #define  LCD_DATA4    LCD_DATA0
....................    #define  LCD_DATA5    LCD_DATA1
....................    #define  LCD_DATA6    LCD_DATA2
....................    #define  LCD_DATA7    LCD_DATA3
.................... #endif
.................... 
.................... #ifndef LCD_DATA4
.................... #ifndef LCD_DATA_PORT
....................    #if defined(__PCB__)
....................       #define LCD_DATA_PORT      0x06     //portb
....................       #define set_tris_lcd(x)   set_tris_b(x)
....................    #else
....................      #if defined(PIN_D0)
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd
....................      #else
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb
....................      #endif
....................    #endif   
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    LCD_PIN_MAP lcd, lcdlat;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
.................... #elif defined(__PCM__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
....................    #byte lcdtris = LCD_DATA_PORT+0x80
.................... #elif defined(__PCH__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT+9
....................    #byte lcdtris = LCD_DATA_PORT+0x12
.................... #elif defined(__PCD__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #word lcd = LCD_DATA_PORT
....................    #word lcdlat = LCD_DATA_PORT+2
....................    #word lcdtris = LCD_DATA_PORT-0x02
.................... #endif
.................... #endif   //LCD_DATA4 not defined
.................... 
.................... #ifndef LCD_TYPE
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines
.................... #endif
.................... 
.................... #ifndef LCD_LINE_TWO
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line
.................... #endif
.................... 
.................... #ifndef LCD_LINE_LENGTH
....................    #define LCD_LINE_LENGTH 20
.................... #endif
.................... 
.................... unsigned int8 lcd_read_nibble(void);
.................... 
.................... unsigned int8 lcd_read_byte(void)
.................... {
....................    unsigned int8 low,high;
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_INPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_float(LCD_DATA4);
....................    output_float(LCD_DATA5);
....................    output_float(LCD_DATA6);
....................    output_float(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0xF;
*
0039:  MOVLW  0F
003A:  BSF    03.5
003B:  ANDWF  08,W
003C:  IORLW  F0
003D:  MOVWF  08
....................   #endif
....................  #endif
....................         
....................    lcd_output_rw(1);
003E:  BCF    03.5
003F:  BSF    08.2
....................    delay_cycles(1);
0040:  NOP
....................    lcd_output_enable(1);
0041:  BSF    08.0
....................    delay_cycles(1);
0042:  NOP
....................    high = lcd_read_nibble();
0043:  CALL   02D
0044:  MOVF   78,W
0045:  MOVWF  37
....................       
....................    lcd_output_enable(0);
0046:  BCF    08.0
....................    delay_cycles(1);
0047:  NOP
....................    lcd_output_enable(1);
0048:  BSF    08.0
....................    delay_us(1);
0049:  GOTO   04A
....................    low = lcd_read_nibble();
004A:  CALL   02D
004B:  MOVF   78,W
004C:  MOVWF  36
....................       
....................    lcd_output_enable(0);
004D:  BCF    08.0
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
....................    output_drive(LCD_DATA5);
....................    output_drive(LCD_DATA6);
....................    output_drive(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0x0;
004E:  MOVLW  0F
004F:  BSF    03.5
0050:  ANDWF  08,W
0051:  MOVWF  08
....................   #endif
....................  #endif
.................... 
....................    return( (high<<4) | low);
0052:  BCF    03.5
0053:  SWAPF  37,W
0054:  MOVWF  77
0055:  MOVLW  F0
0056:  ANDWF  77,F
0057:  MOVF   77,W
0058:  IORWF  36,W
0059:  MOVWF  78
.................... }
.................... 
.................... unsigned int8 lcd_read_nibble(void)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    unsigned int8 n = 0x00;
.................... 
....................    /* Read the data port */
....................    n |= input(LCD_DATA4);
....................    n |= input(LCD_DATA5) << 1;
....................    n |= input(LCD_DATA6) << 2;
....................    n |= input(LCD_DATA7) << 3;
....................    
....................    return(n);
....................   #else
....................    return(lcd.data);
*
002D:  MOVF   08,W
002E:  MOVWF  77
002F:  SWAPF  08,W
0030:  ANDLW  0F
0031:  MOVWF  78
....................   #endif
0032:  RETURN
.................... }
.................... 
.................... void lcd_send_nibble(unsigned int8 n)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    /* Write to the data port */
....................    output_bit(LCD_DATA4, bit_test(n, 0));
....................    output_bit(LCD_DATA5, bit_test(n, 1));
....................    output_bit(LCD_DATA6, bit_test(n, 2));
....................    output_bit(LCD_DATA7, bit_test(n, 3));
....................   #else      
....................    lcdlat.data = n;
*
0020:  SWAPF  37,W
0021:  ANDLW  F0
0022:  MOVWF  77
0023:  MOVLW  0F
0024:  ANDWF  08,W
0025:  IORWF  77,W
0026:  MOVWF  08
....................   #endif
....................       
....................    delay_cycles(1);
0027:  NOP
....................    lcd_output_enable(1);
0028:  BSF    08.0
....................    delay_us(2);
0029:  GOTO   02A
002A:  GOTO   02B
....................    lcd_output_enable(0);
002B:  BCF    08.0
002C:  RETURN
.................... }
.................... 
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n)
.................... {
....................   #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................   #else
....................    lcd_enable_tris();
*
0033:  BSF    03.5
0034:  BCF    08.0
....................    lcd_rs_tris();
0035:  BCF    08.1
....................    lcd_rw_tris();
0036:  BCF    08.2
....................   #endif
.................... 
....................    lcd_output_rs(0);
0037:  BCF    03.5
0038:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ;
*
005A:  MOVF   78,W
005B:  MOVWF  36
005C:  BTFSC  36.7
005D:  GOTO   039
....................    lcd_output_rs(address);
005E:  BTFSS  34.0
005F:  BCF    08.1
0060:  BTFSC  34.0
0061:  BSF    08.1
....................    delay_cycles(1);
0062:  NOP
....................    lcd_output_rw(0);
0063:  BCF    08.2
....................    delay_cycles(1);
0064:  NOP
....................    lcd_output_enable(0);
0065:  BCF    08.0
....................    lcd_send_nibble(n >> 4);
0066:  SWAPF  35,W
0067:  MOVWF  36
0068:  MOVLW  0F
0069:  ANDWF  36,F
006A:  MOVF   36,W
006B:  MOVWF  37
006C:  CALL   020
....................    lcd_send_nibble(n & 0xf);
006D:  MOVF   35,W
006E:  ANDLW  0F
006F:  MOVWF  36
0070:  MOVWF  37
0071:  CALL   020
0072:  RETURN
.................... }
.................... 
.................... #if defined(LCD_EXTENDED_NEWLINE)
.................... unsigned int8 g_LcdX, g_LcdY;
.................... #endif
.................... 
.................... void lcd_init(void) 
.................... {
....................    unsigned int8 i;
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6};
0073:  MOVLW  28
0074:  MOVWF  27
0075:  MOVLW  0C
0076:  MOVWF  28
0077:  MOVLW  01
0078:  MOVWF  29
0079:  MOVLW  06
007A:  MOVWF  2A
....................                              // These bytes need to be sent to the LCD
....................                              // to start it up.
....................    
.................... 
....................    lcd_output_enable(0);
007B:  BCF    08.0
....................    lcd_output_rs(0);
007C:  BCF    08.1
....................    lcd_output_rw(0);
007D:  BCF    08.2
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
....................    output_drive(LCD_DATA5);
....................    output_drive(LCD_DATA6);
....................    output_drive(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0x0;
007E:  MOVLW  0F
007F:  BSF    03.5
0080:  ANDWF  08,W
0081:  MOVWF  08
....................   #endif
....................    lcd_enable_tris();
0082:  BCF    08.0
....................    lcd_rs_tris();
0083:  BCF    08.1
....................    lcd_rw_tris();
0084:  BCF    08.2
....................  #endif
....................     
....................    delay_ms(15);
0085:  MOVLW  0F
0086:  BCF    03.5
0087:  MOVWF  30
0088:  CALL   00C
....................    for(i=1;i<=3;++i)
0089:  MOVLW  01
008A:  MOVWF  26
008B:  MOVF   26,W
008C:  SUBLW  03
008D:  BTFSS  03.0
008E:  GOTO   097
....................    {
....................        lcd_send_nibble(3);
008F:  MOVLW  03
0090:  MOVWF  37
0091:  CALL   020
....................        delay_ms(5);
0092:  MOVLW  05
0093:  MOVWF  30
0094:  CALL   00C
0095:  INCF   26,F
0096:  GOTO   08B
....................    }
....................    
....................    lcd_send_nibble(2);
0097:  MOVLW  02
0098:  MOVWF  37
0099:  CALL   020
....................    delay_ms(5);
009A:  MOVLW  05
009B:  MOVWF  30
009C:  CALL   00C
....................    for(i=0;i<=3;++i)
009D:  CLRF   26
009E:  MOVF   26,W
009F:  SUBLW  03
00A0:  BTFSS  03.0
00A1:  GOTO   0AE
....................       lcd_send_byte(0,LCD_INIT_STRING[i]);
00A2:  MOVLW  27
00A3:  ADDWF  26,W
00A4:  MOVWF  04
00A5:  BCF    03.7
00A6:  MOVF   00,W
00A7:  MOVWF  2B
00A8:  CLRF   34
00A9:  MOVF   2B,W
00AA:  MOVWF  35
00AB:  CALL   033
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
00AC:  INCF   26,F
00AD:  GOTO   09E
00AE:  BCF    0A.3
00AF:  BCF    0A.4
00B0:  GOTO   2CF (RETURN)
....................    g_LcdX = 0;
....................    g_LcdY = 0;
....................   #endif
.................... }
.................... 
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y)
.................... {
....................    unsigned int8 address;
....................    
....................    if(y!=1)
*
01B7:  DECFSZ 31,W
01B8:  GOTO   1BA
01B9:  GOTO   1BD
....................       address=LCD_LINE_TWO;
01BA:  MOVLW  40
01BB:  MOVWF  32
01BC:  GOTO   1BE
....................    else
....................       address=0;
01BD:  CLRF   32
....................      
....................    address+=x-1;
01BE:  MOVLW  01
01BF:  SUBWF  30,W
01C0:  ADDWF  32,F
....................    lcd_send_byte(0,0x80|address);
01C1:  MOVF   32,W
01C2:  IORLW  80
01C3:  MOVWF  33
01C4:  CLRF   34
01C5:  MOVF   33,W
01C6:  MOVWF  35
01C7:  CALL   033
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
01C8:  RETURN
....................    g_LcdX = x - 1;
....................    g_LcdY = y - 1;
....................   #endif
.................... }
.................... 
.................... void lcd_putc(char c)
.................... {
....................    switch (c)
01C9:  MOVF   2F,W
01CA:  XORLW  07
01CB:  BTFSC  03.2
01CC:  GOTO   1D7
01CD:  XORLW  0B
01CE:  BTFSC  03.2
01CF:  GOTO   1DC
01D0:  XORLW  06
01D1:  BTFSC  03.2
01D2:  GOTO   1E4
01D3:  XORLW  02
01D4:  BTFSC  03.2
01D5:  GOTO   1EA
01D6:  GOTO   1EF
....................    {
....................       case '\a'   :  lcd_gotoxy(1,1);     break;
01D7:  MOVLW  01
01D8:  MOVWF  30
01D9:  MOVWF  31
01DA:  CALL   1B7
01DB:  GOTO   1F4
.................... 
....................       case '\f'   :  lcd_send_byte(0,1);
01DC:  CLRF   34
01DD:  MOVLW  01
01DE:  MOVWF  35
01DF:  CALL   033
....................                      delay_ms(2);
01E0:  MOVLW  02
01E1:  MOVWF  30
01E2:  CALL   00C
....................                     #if defined(LCD_EXTENDED_NEWLINE)
....................                      g_LcdX = 0;
....................                      g_LcdY = 0;
....................                     #endif
....................                      break;
01E3:  GOTO   1F4
.................... 
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break;
....................       case '\n'   :
....................          while (g_LcdX++ < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, ' ');
....................          }
....................          lcd_gotoxy(1, g_LcdY+2);
....................          break;
....................      #else
....................       case '\n'   : lcd_gotoxy(1,2);        break;
01E4:  MOVLW  01
01E5:  MOVWF  30
01E6:  MOVLW  02
01E7:  MOVWF  31
01E8:  CALL   1B7
01E9:  GOTO   1F4
....................      #endif
....................      
....................       case '\b'   : lcd_send_byte(0,0x10);  break;
01EA:  CLRF   34
01EB:  MOVLW  10
01EC:  MOVWF  35
01ED:  CALL   033
01EE:  GOTO   1F4
....................      
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       default     : 
....................          if (g_LcdX < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, c);
....................             g_LcdX++;
....................          }
....................          break;
....................      #else
....................       default     : lcd_send_byte(1,c);     break;
01EF:  MOVLW  01
01F0:  MOVWF  34
01F1:  MOVF   2F,W
01F2:  MOVWF  35
01F3:  CALL   033
....................      #endif
....................    }
01F4:  RETURN
.................... }
....................  
.................... char lcd_getc(unsigned int8 x, unsigned int8 y)
.................... {
....................    char value;
.................... 
....................    lcd_gotoxy(x,y);
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low
....................    lcd_output_rs(1);
....................    value = lcd_read_byte();
....................    lcd_output_rs(0);
....................    
....................    return(value);
.................... }
.................... 
.................... // write a custom character to the ram
.................... // which is 0-7 and specifies which character array we are modifying.
.................... // ptr points to an array of 8 bytes, where each byte is the next row of
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and
.................... //    usually you will want to leave this byte 0x00.
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr)
.................... {
....................    unsigned int i;
.................... 
....................    which <<= 3;
....................    which &= 0x38;
.................... 
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address
.................... 
....................    for(i=0; i<8; i++)
....................    {
....................       lcd_send_byte(1, *ptr++);
....................    }
....................   
....................    #if defined(LCD_EXTENDED_NEWLINE)
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address
....................    #endif
.................... }
.................... 
.................... void lcd_cursor_on(int1 on)
.................... {
....................    if (on)
....................    {
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON
....................    }
....................    else
....................    {
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF
....................    }
.................... }
.................... 
.................... #endif
.................... 
.................... #define LED PIN_A2
.................... 
.................... unsigned int16 Value1,Value2 ; 
.................... 
.................... 
.................... void main() {
*
02AE:  MOVF   03,W
02AF:  ANDLW  1F
02B0:  MOVWF  03
02B1:  MOVLW  71
02B2:  BSF    03.5
02B3:  MOVWF  0F
02B4:  CLRF   10
02B5:  MOVF   0F,W
02B6:  BCF    03.5
02B7:  CLRF   25
02B8:  CLRF   24
02B9:  BSF    03.5
02BA:  BSF    03.6
02BB:  MOVF   09,W
02BC:  ANDLW  C0
02BD:  MOVWF  09
02BE:  BCF    03.6
02BF:  BCF    1F.4
02C0:  BCF    1F.5
02C1:  MOVLW  00
02C2:  BSF    03.6
02C3:  MOVWF  08
02C4:  BCF    03.5
02C5:  CLRF   07
02C6:  CLRF   08
02C7:  CLRF   09
02C8:  BCF    03.7
....................    set_tris_a(0b00000011) ; 
02C9:  MOVLW  03
02CA:  BSF    03.5
02CB:  BCF    03.6
02CC:  MOVWF  05
....................    
....................    lcd_init() ; 
02CD:  BCF    03.5
02CE:  GOTO   073
....................    setup_adc_ports(sAN0|sAN1|VSS_VDD) ; 
02CF:  BSF    03.5
02D0:  BSF    03.6
02D1:  MOVF   09,W
02D2:  ANDLW  C0
02D3:  MOVWF  09
02D4:  BCF    03.6
02D5:  BCF    1F.4
02D6:  BCF    1F.5
02D7:  MOVLW  03
02D8:  BSF    03.6
02D9:  MOVWF  08
....................    setup_adc(ADC_CLOCK_INTERNAL) ;
02DA:  BCF    03.5
02DB:  BCF    03.6
02DC:  BSF    1F.6
02DD:  BSF    1F.7
02DE:  BSF    03.5
02DF:  BSF    1F.7
02E0:  BCF    03.5
02E1:  BSF    1F.0
....................    while (TRUE) {
....................       set_adc_channel(0);
02E2:  MOVLW  00
02E3:  MOVWF  78
02E4:  MOVF   1F,W
02E5:  ANDLW  C3
02E6:  IORWF  78,W
02E7:  MOVWF  1F
....................       delay_us(20);
02E8:  MOVLW  0D
02E9:  MOVWF  77
02EA:  DECFSZ 77,F
02EB:  GOTO   2EA
....................       Value1 = read_adc()/2.046;
02EC:  BSF    1F.1
02ED:  BTFSC  1F.1
02EE:  GOTO   2ED
02EF:  MOVF   1E,W
02F0:  MOVWF  79
02F1:  BSF    03.5
02F2:  MOVF   1E,W
02F3:  MOVWF  78
02F4:  MOVF   79,W
02F5:  BCF    03.5
02F6:  MOVWF  27
02F7:  MOVF   78,W
02F8:  MOVWF  26
02F9:  MOVF   27,W
02FA:  MOVWF  29
02FB:  MOVF   78,W
02FC:  MOVWF  28
02FD:  CALL   0B1
02FE:  MOVF   7A,W
02FF:  MOVWF  2B
0300:  MOVF   79,W
0301:  MOVWF  2A
0302:  MOVF   78,W
0303:  MOVWF  29
0304:  MOVF   77,W
0305:  MOVWF  28
0306:  MOVLW  AA
0307:  MOVWF  2F
0308:  MOVLW  F1
0309:  MOVWF  2E
030A:  MOVLW  02
030B:  MOVWF  2D
030C:  MOVLW  80
030D:  MOVWF  2C
030E:  CALL   0CE
030F:  MOVF   7A,W
0310:  MOVWF  29
0311:  MOVF   79,W
0312:  MOVWF  28
0313:  MOVF   78,W
0314:  MOVWF  27
0315:  MOVF   77,W
0316:  MOVWF  26
0317:  CALL   198
0318:  MOVF   79,W
0319:  MOVWF  21
031A:  MOVF   78,W
031B:  MOVWF  20
....................       lcd_gotoxy(1,1);
031C:  MOVLW  01
031D:  MOVWF  30
031E:  MOVWF  31
031F:  CALL   1B7
....................       printf(lcd_putc,"T=%03Lu",Value1);
0320:  MOVLW  54
0321:  MOVWF  2F
0322:  CALL   1C9
0323:  MOVLW  3D
0324:  MOVWF  2F
0325:  CALL   1C9
0326:  MOVLW  0A
0327:  MOVWF  04
0328:  MOVF   21,W
0329:  MOVWF  27
032A:  MOVF   20,W
032B:  MOVWF  26
032C:  CALL   1F5
....................       lcd_putc(223);
032D:  MOVLW  DF
032E:  MOVWF  2F
032F:  CALL   1C9
....................       lcd_putc('C');
0330:  MOVLW  43
0331:  MOVWF  2F
0332:  CALL   1C9
....................    
....................          if (Value1 >= 100){
0333:  MOVF   21,F
0334:  BTFSS  03.2
0335:  GOTO   33A
0336:  MOVF   20,W
0337:  SUBLW  63
0338:  BTFSC  03.0
0339:  GOTO   347
....................             lcd_gotoxy(14,1);
033A:  MOVLW  0E
033B:  MOVWF  30
033C:  MOVLW  01
033D:  MOVWF  31
033E:  CALL   1B7
....................             lcd_putc("[H]");
033F:  MOVLW  04
0340:  BSF    03.6
0341:  MOVWF  0D
0342:  MOVLW  00
0343:  MOVWF  0F
0344:  BCF    03.6
0345:  CALL   258
....................         
....................            }
0346:  GOTO   353
....................           else {
....................             lcd_gotoxy(14,1);
0347:  MOVLW  0E
0348:  MOVWF  30
0349:  MOVLW  01
034A:  MOVWF  31
034B:  CALL   1B7
....................             lcd_putc("[L]");
034C:  MOVLW  06
034D:  BSF    03.6
034E:  MOVWF  0D
034F:  MOVLW  00
0350:  MOVWF  0F
0351:  BCF    03.6
0352:  CALL   258
....................           }
....................       set_adc_channel(1);
0353:  MOVLW  04
0354:  MOVWF  78
0355:  MOVF   1F,W
0356:  ANDLW  C3
0357:  IORWF  78,W
0358:  MOVWF  1F
....................       delay_us(20);
0359:  MOVLW  0D
035A:  MOVWF  77
035B:  DECFSZ 77,F
035C:  GOTO   35B
....................       Value2 = read_adc()/2.046;
035D:  BSF    1F.1
035E:  BTFSC  1F.1
035F:  GOTO   35E
0360:  MOVF   1E,W
0361:  MOVWF  79
0362:  BSF    03.5
0363:  MOVF   1E,W
0364:  MOVWF  78
0365:  MOVF   79,W
0366:  BCF    03.5
0367:  MOVWF  27
0368:  MOVF   78,W
0369:  MOVWF  26
036A:  MOVF   27,W
036B:  MOVWF  29
036C:  MOVF   78,W
036D:  MOVWF  28
036E:  CALL   0B1
036F:  MOVF   7A,W
0370:  MOVWF  2B
0371:  MOVF   79,W
0372:  MOVWF  2A
0373:  MOVF   78,W
0374:  MOVWF  29
0375:  MOVF   77,W
0376:  MOVWF  28
0377:  MOVLW  AA
0378:  MOVWF  2F
0379:  MOVLW  F1
037A:  MOVWF  2E
037B:  MOVLW  02
037C:  MOVWF  2D
037D:  MOVLW  80
037E:  MOVWF  2C
037F:  CALL   0CE
0380:  MOVF   7A,W
0381:  MOVWF  29
0382:  MOVF   79,W
0383:  MOVWF  28
0384:  MOVF   78,W
0385:  MOVWF  27
0386:  MOVF   77,W
0387:  MOVWF  26
0388:  CALL   198
0389:  MOVF   79,W
038A:  MOVWF  23
038B:  MOVF   78,W
038C:  MOVWF  22
....................       lcd_gotoxy(1,2);
038D:  MOVLW  01
038E:  MOVWF  30
038F:  MOVLW  02
0390:  MOVWF  31
0391:  CALL   1B7
....................       printf(lcd_putc,"T=%03Lu",Value2);
0392:  MOVLW  54
0393:  MOVWF  2F
0394:  CALL   1C9
0395:  MOVLW  3D
0396:  MOVWF  2F
0397:  CALL   1C9
0398:  MOVLW  0A
0399:  MOVWF  04
039A:  MOVF   23,W
039B:  MOVWF  27
039C:  MOVF   22,W
039D:  MOVWF  26
039E:  CALL   1F5
....................       lcd_putc(223);
039F:  MOVLW  DF
03A0:  MOVWF  2F
03A1:  CALL   1C9
....................       lcd_putc('C');   
03A2:  MOVLW  43
03A3:  MOVWF  2F
03A4:  CALL   1C9
....................           if (Value2 >= 100){
03A5:  MOVF   23,F
03A6:  BTFSS  03.2
03A7:  GOTO   3AC
03A8:  MOVF   22,W
03A9:  SUBLW  63
03AA:  BTFSC  03.0
03AB:  GOTO   3B9
....................             lcd_gotoxy(14,2);
03AC:  MOVLW  0E
03AD:  MOVWF  30
03AE:  MOVLW  02
03AF:  MOVWF  31
03B0:  CALL   1B7
....................             lcd_putc("[H]");
03B1:  MOVLW  08
03B2:  BSF    03.6
03B3:  MOVWF  0D
03B4:  MOVLW  00
03B5:  MOVWF  0F
03B6:  BCF    03.6
03B7:  CALL   258
....................         
....................            }
03B8:  GOTO   3C5
....................           else {
....................             lcd_gotoxy(14,2);
03B9:  MOVLW  0E
03BA:  MOVWF  30
03BB:  MOVLW  02
03BC:  MOVWF  31
03BD:  CALL   1B7
....................             lcd_putc("[L]");
03BE:  MOVLW  0A
03BF:  BSF    03.6
03C0:  MOVWF  0D
03C1:  MOVLW  00
03C2:  MOVWF  0F
03C3:  BCF    03.6
03C4:  CALL   258
....................           }
....................       
....................        if ( Value1 == Value2)
03C5:  MOVF   22,W
03C6:  SUBWF  20,W
03C7:  BTFSS  03.2
03C8:  GOTO   3D2
03C9:  MOVF   23,W
03CA:  SUBWF  21,W
03CB:  BTFSS  03.2
03CC:  GOTO   3D2
....................          {
....................             output_high(LED);
03CD:  BSF    03.5
03CE:  BCF    05.2
03CF:  BCF    03.5
03D0:  BSF    05.2
....................          }else 
03D1:  GOTO   3D6
....................             output_low(LED);
03D2:  BSF    03.5
03D3:  BCF    05.2
03D4:  BCF    03.5
03D5:  BCF    05.2
03D6:  GOTO   2E2
....................    
....................    }
.................... 
.................... 
.................... }
03D7:  SLEEP

Configuration Fuses:
   Word  1: 2FE4   INTRC_IO NOWDT PUT MCLR NOPROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
