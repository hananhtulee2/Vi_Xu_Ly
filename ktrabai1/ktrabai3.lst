CCS PCM C Compiler, Version 5.109, 43599               04-Apr-23 13:50

               Filename:   E:\PIC 16F887\Code\ktrabai1\ktrabai3.lst

               ROM used:   1624 words (20%)
                           Largest free fragment is 2048
               RAM used:   20 (5%) at main() level
                           35 (10%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  03
0001:  MOVWF  0A
0002:  GOTO   362
0003:  NOP
.................... 
.................... #include <16F887.h>
.................... //////////// Standard Header file for the PIC16F887 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F887
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  C0
0009:  RETLW  F9
000A:  RETLW  A4
000B:  RETLW  B0
000C:  RETLW  99
000D:  RETLW  92
000E:  RETLW  82
000F:  RETLW  F8
0010:  RETLW  80
0011:  RETLW  90
0012:  DATA 5B,24
0013:  DATA 5D,00
0014:  DATA 5B,26
0015:  DATA 5D,00
0016:  DATA 5B,24
0017:  DATA 5D,00
0018:  DATA 5B,26
0019:  DATA 5D,00
001A:  DATA 5B,24
001B:  DATA 5D,00
001C:  DATA 5B,26
001D:  DATA 5D,00
001E:  DATA 5B,24
001F:  DATA 5D,00
0020:  DATA 5B,26
0021:  DATA 5D,00
*
00C7:  MOVLW  8E
00C8:  MOVWF  77
00C9:  MOVF   2E,W
00CA:  MOVWF  78
00CB:  MOVF   2D,W
00CC:  MOVWF  79
00CD:  CLRF   7A
00CE:  MOVF   78,F
00CF:  BTFSS  03.2
00D0:  GOTO   0DB
00D1:  MOVF   79,W
00D2:  MOVWF  78
00D3:  CLRF   79
00D4:  MOVLW  08
00D5:  SUBWF  77,F
00D6:  MOVF   78,F
00D7:  BTFSS  03.2
00D8:  GOTO   0DB
00D9:  CLRF   77
00DA:  GOTO   0E3
00DB:  BCF    03.0
00DC:  BTFSC  78.7
00DD:  GOTO   0E2
00DE:  RLF    79,F
00DF:  RLF    78,F
00E0:  DECF   77,F
00E1:  GOTO   0DB
00E2:  BCF    78.7
00E3:  RETURN
00E4:  MOVF   2B,W
00E5:  BTFSC  03.2
00E6:  GOTO   154
00E7:  MOVWF  33
00E8:  MOVF   2F,W
00E9:  BTFSC  03.2
00EA:  GOTO   154
00EB:  ADDWF  33,F
00EC:  BTFSC  03.0
00ED:  GOTO   0F5
00EE:  MOVLW  7F
00EF:  SUBWF  33,F
00F0:  BTFSS  03.0
00F1:  GOTO   154
00F2:  BTFSC  03.2
00F3:  GOTO   154
00F4:  GOTO   0F9
00F5:  MOVLW  81
00F6:  ADDWF  33,F
00F7:  BTFSC  03.0
00F8:  GOTO   154
00F9:  MOVF   33,W
00FA:  MOVWF  77
00FB:  CLRF   78
00FC:  CLRF   79
00FD:  CLRF   7A
00FE:  MOVF   2C,W
00FF:  MOVWF  37
0100:  BSF    37.7
0101:  MOVF   2D,W
0102:  MOVWF  36
0103:  MOVF   2E,W
0104:  MOVWF  35
0105:  MOVLW  18
0106:  MOVWF  33
0107:  CLRF   34
0108:  BTFSS  35.0
0109:  GOTO   122
010A:  MOVF   32,W
010B:  ADDWF  7A,F
010C:  BTFSS  03.0
010D:  GOTO   114
010E:  INCF   79,F
010F:  BTFSS  03.2
0110:  GOTO   114
0111:  INCF   78,F
0112:  BTFSC  03.2
0113:  BSF    34.7
0114:  MOVF   31,W
0115:  ADDWF  79,F
0116:  BTFSS  03.0
0117:  GOTO   11B
0118:  INCF   78,F
0119:  BTFSC  03.2
011A:  BSF    34.7
011B:  MOVF   30,W
011C:  MOVWF  2D
011D:  BSF    2D.7
011E:  MOVF   2D,W
011F:  ADDWF  78,F
0120:  BTFSC  03.0
0121:  BSF    34.7
0122:  RLF    34,F
0123:  RRF    78,F
0124:  RRF    79,F
0125:  RRF    7A,F
0126:  RRF    37,F
0127:  RRF    36,F
0128:  RRF    35,F
0129:  BCF    03.0
012A:  DECFSZ 33,F
012B:  GOTO   107
012C:  MOVLW  01
012D:  ADDWF  77,F
012E:  BTFSC  03.0
012F:  GOTO   154
0130:  BTFSC  78.7
0131:  GOTO   139
0132:  RLF    37,F
0133:  RLF    7A,F
0134:  RLF    79,F
0135:  RLF    78,F
0136:  DECF   77,F
0137:  BTFSC  03.2
0138:  GOTO   154
0139:  BTFSS  37.7
013A:  GOTO   14A
013B:  INCF   7A,F
013C:  BTFSS  03.2
013D:  GOTO   14A
013E:  INCF   79,F
013F:  BTFSS  03.2
0140:  GOTO   14A
0141:  INCF   78,F
0142:  BTFSS  03.2
0143:  GOTO   14A
0144:  RRF    78,F
0145:  RRF    79,F
0146:  RRF    7A,F
0147:  INCF   77,F
0148:  BTFSC  03.2
0149:  GOTO   154
014A:  MOVF   2C,W
014B:  MOVWF  34
014C:  MOVF   30,W
014D:  XORWF  34,F
014E:  BTFSS  34.7
014F:  GOTO   152
0150:  BSF    78.7
0151:  GOTO   158
0152:  BCF    78.7
0153:  GOTO   158
0154:  CLRF   77
0155:  CLRF   78
0156:  CLRF   79
0157:  CLRF   7A
0158:  BCF    0A.3
0159:  BCF    0A.4
015A:  GOTO   3C4 (RETURN)
015B:  MOVF   2F,W
015C:  BTFSC  03.2
015D:  GOTO   220
015E:  MOVWF  3B
015F:  MOVF   33,W
0160:  BTFSC  03.2
0161:  GOTO   220
0162:  SUBWF  3B,F
0163:  BTFSS  03.0
0164:  GOTO   16A
0165:  MOVLW  7F
0166:  ADDWF  3B,F
0167:  BTFSC  03.0
0168:  GOTO   220
0169:  GOTO   170
016A:  MOVLW  81
016B:  SUBWF  3B,F
016C:  BTFSS  03.0
016D:  GOTO   220
016E:  BTFSC  03.2
016F:  GOTO   220
0170:  MOVF   3B,W
0171:  MOVWF  77
0172:  CLRF   78
0173:  CLRF   79
0174:  CLRF   7A
0175:  CLRF   3A
0176:  MOVF   30,W
0177:  MOVWF  39
0178:  BSF    39.7
0179:  MOVF   31,W
017A:  MOVWF  38
017B:  MOVF   32,W
017C:  MOVWF  37
017D:  MOVLW  19
017E:  MOVWF  3B
017F:  MOVF   36,W
0180:  SUBWF  37,F
0181:  BTFSC  03.0
0182:  GOTO   193
0183:  MOVLW  01
0184:  SUBWF  38,F
0185:  BTFSC  03.0
0186:  GOTO   193
0187:  SUBWF  39,F
0188:  BTFSC  03.0
0189:  GOTO   193
018A:  SUBWF  3A,F
018B:  BTFSC  03.0
018C:  GOTO   193
018D:  INCF   3A,F
018E:  INCF   39,F
018F:  INCF   38,F
0190:  MOVF   36,W
0191:  ADDWF  37,F
0192:  GOTO   1C5
0193:  MOVF   35,W
0194:  SUBWF  38,F
0195:  BTFSC  03.0
0196:  GOTO   1AE
0197:  MOVLW  01
0198:  SUBWF  39,F
0199:  BTFSC  03.0
019A:  GOTO   1AE
019B:  SUBWF  3A,F
019C:  BTFSC  03.0
019D:  GOTO   1AE
019E:  INCF   3A,F
019F:  INCF   39,F
01A0:  MOVF   35,W
01A1:  ADDWF  38,F
01A2:  MOVF   36,W
01A3:  ADDWF  37,F
01A4:  BTFSS  03.0
01A5:  GOTO   1C5
01A6:  INCF   38,F
01A7:  BTFSS  03.2
01A8:  GOTO   1C5
01A9:  INCF   39,F
01AA:  BTFSS  03.2
01AB:  GOTO   1C5
01AC:  INCF   3A,F
01AD:  GOTO   1C5
01AE:  MOVF   34,W
01AF:  IORLW  80
01B0:  SUBWF  39,F
01B1:  BTFSC  03.0
01B2:  GOTO   1C4
01B3:  MOVLW  01
01B4:  SUBWF  3A,F
01B5:  BTFSC  03.0
01B6:  GOTO   1C4
01B7:  INCF   3A,F
01B8:  MOVF   34,W
01B9:  IORLW  80
01BA:  ADDWF  39,F
01BB:  MOVF   35,W
01BC:  ADDWF  38,F
01BD:  BTFSS  03.0
01BE:  GOTO   1A2
01BF:  INCF   39,F
01C0:  BTFSS  03.2
01C1:  GOTO   1A2
01C2:  INCF   3A,F
01C3:  GOTO   1A2
01C4:  BSF    7A.0
01C5:  DECFSZ 3B,F
01C6:  GOTO   1C8
01C7:  GOTO   1D3
01C8:  BCF    03.0
01C9:  RLF    37,F
01CA:  RLF    38,F
01CB:  RLF    39,F
01CC:  RLF    3A,F
01CD:  BCF    03.0
01CE:  RLF    7A,F
01CF:  RLF    79,F
01D0:  RLF    78,F
01D1:  RLF    3C,F
01D2:  GOTO   17F
01D3:  BTFSS  3C.0
01D4:  GOTO   1DB
01D5:  BCF    03.0
01D6:  RRF    78,F
01D7:  RRF    79,F
01D8:  RRF    7A,F
01D9:  RRF    3C,F
01DA:  GOTO   1DE
01DB:  DECF   77,F
01DC:  BTFSC  03.2
01DD:  GOTO   220
01DE:  BTFSC  3C.7
01DF:  GOTO   207
01E0:  BCF    03.0
01E1:  RLF    37,F
01E2:  RLF    38,F
01E3:  RLF    39,F
01E4:  RLF    3A,F
01E5:  MOVF   36,W
01E6:  SUBWF  37,F
01E7:  BTFSC  03.0
01E8:  GOTO   1F3
01E9:  MOVLW  01
01EA:  SUBWF  38,F
01EB:  BTFSC  03.0
01EC:  GOTO   1F3
01ED:  SUBWF  39,F
01EE:  BTFSC  03.0
01EF:  GOTO   1F3
01F0:  SUBWF  3A,F
01F1:  BTFSS  03.0
01F2:  GOTO   216
01F3:  MOVF   35,W
01F4:  SUBWF  38,F
01F5:  BTFSC  03.0
01F6:  GOTO   1FE
01F7:  MOVLW  01
01F8:  SUBWF  39,F
01F9:  BTFSC  03.0
01FA:  GOTO   1FE
01FB:  SUBWF  3A,F
01FC:  BTFSS  03.0
01FD:  GOTO   216
01FE:  MOVF   34,W
01FF:  IORLW  80
0200:  SUBWF  39,F
0201:  BTFSC  03.0
0202:  GOTO   207
0203:  MOVLW  01
0204:  SUBWF  3A,F
0205:  BTFSS  03.0
0206:  GOTO   216
0207:  INCF   7A,F
0208:  BTFSS  03.2
0209:  GOTO   216
020A:  INCF   79,F
020B:  BTFSS  03.2
020C:  GOTO   216
020D:  INCF   78,F
020E:  BTFSS  03.2
020F:  GOTO   216
0210:  INCF   77,F
0211:  BTFSC  03.2
0212:  GOTO   220
0213:  RRF    78,F
0214:  RRF    79,F
0215:  RRF    7A,F
0216:  MOVF   30,W
0217:  MOVWF  3B
0218:  MOVF   34,W
0219:  XORWF  3B,F
021A:  BTFSS  3B.7
021B:  GOTO   21E
021C:  BSF    78.7
021D:  GOTO   224
021E:  BCF    78.7
021F:  GOTO   224
0220:  CLRF   77
0221:  CLRF   78
0222:  CLRF   79
0223:  CLRF   7A
0224:  RETURN
0225:  MOVLW  8E
0226:  MOVWF  77
0227:  MOVF   2B,W
0228:  SUBWF  77,F
0229:  MOVF   2C,W
022A:  MOVWF  79
022B:  MOVF   2D,W
022C:  MOVWF  78
022D:  BSF    79.7
022E:  MOVF   77,F
022F:  BTFSC  03.2
0230:  GOTO   23C
0231:  BCF    03.0
0232:  MOVF   79,F
0233:  BTFSS  03.2
0234:  GOTO   238
0235:  MOVF   78,F
0236:  BTFSC  03.2
0237:  GOTO   23C
0238:  RRF    79,F
0239:  RRF    78,F
023A:  DECFSZ 77,F
023B:  GOTO   231
023C:  BTFSS  2C.7
023D:  GOTO   243
023E:  COMF   78,F
023F:  COMF   79,F
0240:  INCF   78,F
0241:  BTFSC  03.2
0242:  INCF   79,F
0243:  RETURN
0244:  CLRF   78
0245:  CLRF   79
0246:  CLRF   77
0247:  CLRF   7A
0248:  MOVF   2E,W
0249:  BTFSS  03.2
024A:  GOTO   24E
024B:  MOVF   2D,W
024C:  BTFSC  03.2
024D:  GOTO   268
024E:  MOVLW  10
024F:  MOVWF  2F
0250:  BCF    03.0
0251:  RLF    2B,F
0252:  RLF    2C,F
0253:  RLF    77,F
0254:  RLF    7A,F
0255:  MOVF   2E,W
0256:  SUBWF  7A,W
0257:  BTFSS  03.2
0258:  GOTO   25B
0259:  MOVF   2D,W
025A:  SUBWF  77,W
025B:  BTFSS  03.0
025C:  GOTO   264
025D:  MOVF   2D,W
025E:  SUBWF  77,F
025F:  BTFSS  03.0
0260:  DECF   7A,F
0261:  MOVF   2E,W
0262:  SUBWF  7A,F
0263:  BSF    03.0
0264:  RLF    78,F
0265:  RLF    79,F
0266:  DECFSZ 2F,F
0267:  GOTO   250
0268:  BCF    0A.3
0269:  BCF    0A.4
026A:  GOTO   452 (RETURN)
*
02A9:  CLRF   33
02AA:  MOVF   04,W
02AB:  MOVWF  32
02AC:  BCF    33.0
02AD:  BTFSC  03.7
02AE:  BSF    33.0
02AF:  SWAPF  2C,W
02B0:  IORLW  F0
02B1:  MOVWF  2E
02B2:  ADDWF  2E,F
02B3:  ADDLW  E2
02B4:  MOVWF  2F
02B5:  ADDLW  32
02B6:  MOVWF  31
02B7:  MOVF   2C,W
02B8:  ANDLW  0F
02B9:  ADDWF  2F,F
02BA:  ADDWF  2F,F
02BB:  ADDWF  31,F
02BC:  ADDLW  E9
02BD:  MOVWF  30
02BE:  ADDWF  30,F
02BF:  ADDWF  30,F
02C0:  SWAPF  2B,W
02C1:  ANDLW  0F
02C2:  ADDWF  30,F
02C3:  ADDWF  31,F
02C4:  RLF    30,F
02C5:  RLF    31,F
02C6:  COMF   31,F
02C7:  RLF    31,F
02C8:  MOVF   2B,W
02C9:  ANDLW  0F
02CA:  ADDWF  31,F
02CB:  RLF    2E,F
02CC:  MOVLW  07
02CD:  MOVWF  2D
02CE:  MOVLW  0A
02CF:  ADDWF  31,F
02D0:  DECF   30,F
02D1:  BTFSS  03.0
02D2:  GOTO   2CF
02D3:  ADDWF  30,F
02D4:  DECF   2F,F
02D5:  BTFSS  03.0
02D6:  GOTO   2D3
02D7:  ADDWF  2F,F
02D8:  DECF   2E,F
02D9:  BTFSS  03.0
02DA:  GOTO   2D7
02DB:  ADDWF  2E,F
02DC:  DECF   2D,F
02DD:  BTFSS  03.0
02DE:  GOTO   2DB
02DF:  MOVLW  2D
02E0:  MOVWF  04
02E1:  BCF    03.7
02E2:  MOVLW  07
02E3:  ANDWF  32,W
02E4:  BCF    32.6
02E5:  ADDWF  04,F
02E6:  MOVLW  31
02E7:  SUBWF  04,W
02E8:  BTFSC  03.2
02E9:  BSF    32.6
02EA:  MOVF   00,W
02EB:  MOVWF  77
02EC:  BTFSS  03.2
02ED:  GOTO   2F6
02EE:  BTFSC  32.6
02EF:  GOTO   2F6
02F0:  BTFSC  32.4
02F1:  GOTO   308
02F2:  BTFSC  32.3
02F3:  GOTO   2F6
02F4:  MOVLW  20
02F5:  GOTO   2F9
02F6:  BSF    32.3
02F7:  BCF    32.4
02F8:  MOVLW  30
02F9:  ADDWF  77,F
02FA:  CLRF   2C
02FB:  MOVF   04,W
02FC:  MOVWF  2B
02FD:  BCF    2C.0
02FE:  BTFSC  03.7
02FF:  BSF    2C.0
0300:  MOVF   77,W
0301:  MOVWF  34
0302:  CALL   27D
0303:  MOVF   2B,W
0304:  MOVWF  04
0305:  BCF    03.7
0306:  BTFSC  2C.0
0307:  BSF    03.7
0308:  INCF   04,F
0309:  BTFSS  32.6
030A:  GOTO   2E6
030B:  RETURN
030C:  MOVF   0B,W
030D:  MOVWF  2B
030E:  BCF    0B.7
030F:  BSF    03.5
0310:  BSF    03.6
0311:  BSF    0C.7
0312:  BSF    0C.0
0313:  NOP
0314:  NOP
0315:  BCF    03.5
0316:  BCF    03.6
0317:  BTFSC  2B.7
0318:  BSF    0B.7
0319:  BSF    03.6
031A:  MOVF   0C,W
031B:  ANDLW  7F
031C:  BTFSC  03.2
031D:  GOTO   360
031E:  BCF    03.6
031F:  MOVWF  2B
0320:  BSF    03.6
0321:  MOVF   0D,W
0322:  BCF    03.6
0323:  MOVWF  2C
0324:  BSF    03.6
0325:  MOVF   0F,W
0326:  BCF    03.6
0327:  MOVWF  2D
0328:  MOVF   2B,W
0329:  MOVWF  34
032A:  CALL   27D
032B:  MOVF   2C,W
032C:  BSF    03.6
032D:  MOVWF  0D
032E:  BCF    03.6
032F:  MOVF   2D,W
0330:  BSF    03.6
0331:  MOVWF  0F
0332:  BCF    03.6
0333:  MOVF   0B,W
0334:  MOVWF  2E
0335:  BCF    0B.7
0336:  BSF    03.5
0337:  BSF    03.6
0338:  BSF    0C.7
0339:  BSF    0C.0
033A:  NOP
033B:  NOP
033C:  BCF    03.5
033D:  BCF    03.6
033E:  BTFSC  2E.7
033F:  BSF    0B.7
0340:  BSF    03.6
0341:  RLF    0C,W
0342:  RLF    0E,W
0343:  ANDLW  7F
0344:  BTFSC  03.2
0345:  GOTO   360
0346:  BCF    03.6
0347:  MOVWF  2B
0348:  BSF    03.6
0349:  MOVF   0D,W
034A:  BCF    03.6
034B:  MOVWF  2C
034C:  BSF    03.6
034D:  MOVF   0F,W
034E:  BCF    03.6
034F:  MOVWF  2D
0350:  MOVF   2B,W
0351:  MOVWF  34
0352:  CALL   27D
0353:  MOVF   2C,W
0354:  BSF    03.6
0355:  MOVWF  0D
0356:  BCF    03.6
0357:  MOVF   2D,W
0358:  BSF    03.6
0359:  MOVWF  0F
035A:  INCF   0D,F
035B:  BTFSC  03.2
035C:  INCF   0F,F
035D:  BCF    03.6
035E:  GOTO   30C
035F:  BSF    03.6
0360:  BCF    03.6
0361:  RETURN
.................... 
.................... #list
.................... 
.................... #device ADC=10
.................... #fuses INTRC_IO
.................... #use delay(CLOCK=8MHz)
*
0022:  MOVLW  35
0023:  MOVWF  04
0024:  BCF    03.7
0025:  MOVF   00,W
0026:  BTFSC  03.2
0027:  GOTO   035
0028:  MOVLW  02
0029:  MOVWF  78
002A:  CLRF   77
002B:  DECFSZ 77,F
002C:  GOTO   02B
002D:  DECFSZ 78,F
002E:  GOTO   02A
002F:  MOVLW  97
0030:  MOVWF  77
0031:  DECFSZ 77,F
0032:  GOTO   031
0033:  DECFSZ 00,F
0034:  GOTO   028
0035:  RETURN
.................... #include <lcd.c>
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////                             LCD.C                                     ////
.................... ////                 Driver for common LCD modules                         ////
.................... ////                                                                       ////
.................... ////  lcd_init()   Must be called before any other function.               ////
.................... ////                                                                       ////
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         ////
.................... ////                 \a  Set cursor position to upper left                 ////
.................... ////                 \f  Clear display, set cursor to upper left           ////
.................... ////                 \n  Go to start of second line                        ////
.................... ////                 \b  Move back one position                            ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     ////
.................... ////              will erase all remanining characters on the current      ////
.................... ////              line, and move the cursor to the beginning of the next   ////
.................... ////              line.                                                    ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     ////
.................... ////              will move the cursor to the start of the current         ////
.................... ////              line.                                                    ////
.................... ////                                                                       ////
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        ////
.................... ////                                                                       ////
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             ////
.................... ////                                                                       ////
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         ////
.................... ////              (on=FALSE).                                              ////
.................... ////                                                                       ////
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   ////
.................... ////                                                                       ////
.................... ////                                                                       ////
.................... ////  CONFIGURATION                                                        ////
.................... ////  The LCD can be configured in one of two ways: a.) port access or     ////
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     ////
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     ////
.................... ////  connected to sequential pins on the GPIO.  Pin access                ////
.................... ////  has no requirements, all 7 bits of the control interface can         ////
.................... ////  can be connected to any GPIO using several ports.                    ////
.................... ////                                                                       ////
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     ////
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    ////
.................... ////  of this file to configure the pin order.  If you are using a         ////
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  ////
.................... ////  be defined.                                                          ////
.................... ////                                                                       ////
.................... ////  Example of port access:                                              ////
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         ////
.................... ////                                                                       ////
.................... ////  To use pin access, the following pins must be defined:               ////
.................... ////     LCD_ENABLE_PIN                                                    ////
.................... ////     LCD_RS_PIN                                                        ////
.................... ////     LCD_RW_PIN                                                        ////
.................... ////     LCD_DATA4                                                         ////
.................... ////     LCD_DATA5                                                         ////
.................... ////     LCD_DATA6                                                         ////
.................... ////     LCD_DATA7                                                         ////
.................... ////                                                                       ////
.................... ////  Example of pin access:                                               ////
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    ////
.................... ////     #define LCD_RS_PIN      PIN_E1                                    ////
.................... ////     #define LCD_RW_PIN      PIN_E2                                    ////
.................... ////     #define LCD_DATA4       PIN_D4                                    ////
.................... ////     #define LCD_DATA5       PIN_D5                                    ////
.................... ////     #define LCD_DATA6       PIN_D6                                    ////
.................... ////     #define LCD_DATA7       PIN_D7                                    ////
.................... ////                                                                       ////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef __LCD_C__
.................... #define __LCD_C__
.................... 
.................... // define the pinout.
.................... // only required if port access is being used.
.................... typedef struct  
.................... {                            // This structure is overlayed
....................    int1 enable;           // on to an I/O port to gain
....................    int1 rs;               // access to the LCD pins.
....................    int1 rw;               // The bits are allocated from
....................    int1 unused;           // low order up.  ENABLE will
....................    unsigned int     data : 4;         // be LSB pin of that port.
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT.
....................    unsigned int    reserved: 8;
....................   #endif
.................... } LCD_PIN_MAP;
.................... 
.................... // this is to improve compatability with previous LCD drivers that accepted
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B.
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE))
....................  #define LCD_DATA_PORT getenv("SFR:PORTB")
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    // these definitions only need to be modified for baseline PICs.
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions.
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0};
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF};
.................... #endif
.................... 
.................... ////////////////////// END CONFIGURATION ///////////////////////////////////
.................... 
.................... #ifndef LCD_ENABLE_PIN
....................    #define lcd_output_enable(x) lcdlat.enable=x
....................    #define lcd_enable_tris()   lcdtris.enable=0
.................... #else
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x)
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RS_PIN
....................    #define lcd_output_rs(x) lcdlat.rs=x
....................    #define lcd_rs_tris()   lcdtris.rs=0
.................... #else
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x)
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RW_PIN
....................    #define lcd_output_rw(x) lcdlat.rw=x
....................    #define lcd_rw_tris()   lcdtris.rw=0
.................... #else
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x)
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN)
.................... #endif
.................... 
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4,
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver
.................... // compatible with any code written for the original library
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7))
....................    #define  LCD_DATA4    LCD_DATA0
....................    #define  LCD_DATA5    LCD_DATA1
....................    #define  LCD_DATA6    LCD_DATA2
....................    #define  LCD_DATA7    LCD_DATA3
.................... #endif
.................... 
.................... #ifndef LCD_DATA4
.................... #ifndef LCD_DATA_PORT
....................    #if defined(__PCB__)
....................       #define LCD_DATA_PORT      0x06     //portb
....................       #define set_tris_lcd(x)   set_tris_b(x)
....................    #else
....................      #if defined(PIN_D0)
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd
....................      #else
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb
....................      #endif
....................    #endif   
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    LCD_PIN_MAP lcd, lcdlat;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
.................... #elif defined(__PCM__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
....................    #byte lcdtris = LCD_DATA_PORT+0x80
.................... #elif defined(__PCH__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT+9
....................    #byte lcdtris = LCD_DATA_PORT+0x12
.................... #elif defined(__PCD__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #word lcd = LCD_DATA_PORT
....................    #word lcdlat = LCD_DATA_PORT+2
....................    #word lcdtris = LCD_DATA_PORT-0x02
.................... #endif
.................... #endif   //LCD_DATA4 not defined
.................... 
.................... #ifndef LCD_TYPE
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines
.................... #endif
.................... 
.................... #ifndef LCD_LINE_TWO
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line
.................... #endif
.................... 
.................... #ifndef LCD_LINE_LENGTH
....................    #define LCD_LINE_LENGTH 20
.................... #endif
.................... 
.................... unsigned int8 lcd_read_nibble(void);
.................... 
.................... unsigned int8 lcd_read_byte(void)
.................... {
....................    unsigned int8 low,high;
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_INPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_float(LCD_DATA4);
....................    output_float(LCD_DATA5);
....................    output_float(LCD_DATA6);
....................    output_float(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0xF;
*
004F:  MOVLW  0F
0050:  BSF    03.5
0051:  ANDWF  08,W
0052:  IORLW  F0
0053:  MOVWF  08
....................   #endif
....................  #endif
....................         
....................    lcd_output_rw(1);
0054:  BCF    03.5
0055:  BSF    08.2
....................    delay_cycles(1);
0056:  NOP
....................    lcd_output_enable(1);
0057:  BSF    08.0
....................    delay_cycles(1);
0058:  NOP
....................    high = lcd_read_nibble();
0059:  CALL   043
005A:  MOVF   78,W
005B:  MOVWF  3C
....................       
....................    lcd_output_enable(0);
005C:  BCF    08.0
....................    delay_cycles(1);
005D:  NOP
....................    lcd_output_enable(1);
005E:  BSF    08.0
....................    delay_us(1);
005F:  GOTO   060
....................    low = lcd_read_nibble();
0060:  CALL   043
0061:  MOVF   78,W
0062:  MOVWF  3B
....................       
....................    lcd_output_enable(0);
0063:  BCF    08.0
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
....................    output_drive(LCD_DATA5);
....................    output_drive(LCD_DATA6);
....................    output_drive(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0x0;
0064:  MOVLW  0F
0065:  BSF    03.5
0066:  ANDWF  08,W
0067:  MOVWF  08
....................   #endif
....................  #endif
.................... 
....................    return( (high<<4) | low);
0068:  BCF    03.5
0069:  SWAPF  3C,W
006A:  MOVWF  77
006B:  MOVLW  F0
006C:  ANDWF  77,F
006D:  MOVF   77,W
006E:  IORWF  3B,W
006F:  MOVWF  78
.................... }
.................... 
.................... unsigned int8 lcd_read_nibble(void)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    unsigned int8 n = 0x00;
.................... 
....................    /* Read the data port */
....................    n |= input(LCD_DATA4);
....................    n |= input(LCD_DATA5) << 1;
....................    n |= input(LCD_DATA6) << 2;
....................    n |= input(LCD_DATA7) << 3;
....................    
....................    return(n);
....................   #else
....................    return(lcd.data);
*
0043:  MOVF   08,W
0044:  MOVWF  77
0045:  SWAPF  08,W
0046:  ANDLW  0F
0047:  MOVWF  78
....................   #endif
0048:  RETURN
.................... }
.................... 
.................... void lcd_send_nibble(unsigned int8 n)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    /* Write to the data port */
....................    output_bit(LCD_DATA4, bit_test(n, 0));
....................    output_bit(LCD_DATA5, bit_test(n, 1));
....................    output_bit(LCD_DATA6, bit_test(n, 2));
....................    output_bit(LCD_DATA7, bit_test(n, 3));
....................   #else      
....................    lcdlat.data = n;
*
0036:  SWAPF  3C,W
0037:  ANDLW  F0
0038:  MOVWF  77
0039:  MOVLW  0F
003A:  ANDWF  08,W
003B:  IORWF  77,W
003C:  MOVWF  08
....................   #endif
....................       
....................    delay_cycles(1);
003D:  NOP
....................    lcd_output_enable(1);
003E:  BSF    08.0
....................    delay_us(2);
003F:  GOTO   040
0040:  GOTO   041
....................    lcd_output_enable(0);
0041:  BCF    08.0
0042:  RETURN
.................... }
.................... 
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n)
.................... {
....................   #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................   #else
....................    lcd_enable_tris();
*
0049:  BSF    03.5
004A:  BCF    08.0
....................    lcd_rs_tris();
004B:  BCF    08.1
....................    lcd_rw_tris();
004C:  BCF    08.2
....................   #endif
.................... 
....................    lcd_output_rs(0);
004D:  BCF    03.5
004E:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ;
*
0070:  MOVF   78,W
0071:  MOVWF  3B
0072:  BTFSC  3B.7
0073:  GOTO   04F
....................    lcd_output_rs(address);
0074:  BTFSS  39.0
0075:  BCF    08.1
0076:  BTFSC  39.0
0077:  BSF    08.1
....................    delay_cycles(1);
0078:  NOP
....................    lcd_output_rw(0);
0079:  BCF    08.2
....................    delay_cycles(1);
007A:  NOP
....................    lcd_output_enable(0);
007B:  BCF    08.0
....................    lcd_send_nibble(n >> 4);
007C:  SWAPF  3A,W
007D:  MOVWF  3B
007E:  MOVLW  0F
007F:  ANDWF  3B,F
0080:  MOVF   3B,W
0081:  MOVWF  3C
0082:  CALL   036
....................    lcd_send_nibble(n & 0xf);
0083:  MOVF   3A,W
0084:  ANDLW  0F
0085:  MOVWF  3B
0086:  MOVWF  3C
0087:  CALL   036
0088:  RETURN
.................... }
.................... 
.................... #if defined(LCD_EXTENDED_NEWLINE)
.................... unsigned int8 g_LcdX, g_LcdY;
.................... #endif
.................... 
.................... void lcd_init(void) 
.................... {
....................    unsigned int8 i;
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6};
0089:  MOVLW  28
008A:  MOVWF  2C
008B:  MOVLW  0C
008C:  MOVWF  2D
008D:  MOVLW  01
008E:  MOVWF  2E
008F:  MOVLW  06
0090:  MOVWF  2F
....................                              // These bytes need to be sent to the LCD
....................                              // to start it up.
....................    
.................... 
....................    lcd_output_enable(0);
0091:  BCF    08.0
....................    lcd_output_rs(0);
0092:  BCF    08.1
....................    lcd_output_rw(0);
0093:  BCF    08.2
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
....................    output_drive(LCD_DATA5);
....................    output_drive(LCD_DATA6);
....................    output_drive(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0x0;
0094:  MOVLW  0F
0095:  BSF    03.5
0096:  ANDWF  08,W
0097:  MOVWF  08
....................   #endif
....................    lcd_enable_tris();
0098:  BCF    08.0
....................    lcd_rs_tris();
0099:  BCF    08.1
....................    lcd_rw_tris();
009A:  BCF    08.2
....................  #endif
....................     
....................    delay_ms(15);
009B:  MOVLW  0F
009C:  BCF    03.5
009D:  MOVWF  35
009E:  CALL   022
....................    for(i=1;i<=3;++i)
009F:  MOVLW  01
00A0:  MOVWF  2B
00A1:  MOVF   2B,W
00A2:  SUBLW  03
00A3:  BTFSS  03.0
00A4:  GOTO   0AD
....................    {
....................        lcd_send_nibble(3);
00A5:  MOVLW  03
00A6:  MOVWF  3C
00A7:  CALL   036
....................        delay_ms(5);
00A8:  MOVLW  05
00A9:  MOVWF  35
00AA:  CALL   022
00AB:  INCF   2B,F
00AC:  GOTO   0A1
....................    }
....................    
....................    lcd_send_nibble(2);
00AD:  MOVLW  02
00AE:  MOVWF  3C
00AF:  CALL   036
....................    delay_ms(5);
00B0:  MOVLW  05
00B1:  MOVWF  35
00B2:  CALL   022
....................    for(i=0;i<=3;++i)
00B3:  CLRF   2B
00B4:  MOVF   2B,W
00B5:  SUBLW  03
00B6:  BTFSS  03.0
00B7:  GOTO   0C4
....................       lcd_send_byte(0,LCD_INIT_STRING[i]);
00B8:  MOVLW  2C
00B9:  ADDWF  2B,W
00BA:  MOVWF  04
00BB:  BCF    03.7
00BC:  MOVF   00,W
00BD:  MOVWF  30
00BE:  CLRF   39
00BF:  MOVF   30,W
00C0:  MOVWF  3A
00C1:  CALL   049
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
00C2:  INCF   2B,F
00C3:  GOTO   0B4
00C4:  BCF    0A.3
00C5:  BCF    0A.4
00C6:  GOTO   38A (RETURN)
....................    g_LcdX = 0;
....................    g_LcdY = 0;
....................   #endif
.................... }
.................... 
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y)
.................... {
....................    unsigned int8 address;
....................    
....................    if(y!=1)
*
026B:  DECFSZ 36,W
026C:  GOTO   26E
026D:  GOTO   271
....................       address=LCD_LINE_TWO;
026E:  MOVLW  40
026F:  MOVWF  37
0270:  GOTO   272
....................    else
....................       address=0;
0271:  CLRF   37
....................      
....................    address+=x-1;
0272:  MOVLW  01
0273:  SUBWF  35,W
0274:  ADDWF  37,F
....................    lcd_send_byte(0,0x80|address);
0275:  MOVF   37,W
0276:  IORLW  80
0277:  MOVWF  38
0278:  CLRF   39
0279:  MOVF   38,W
027A:  MOVWF  3A
027B:  CALL   049
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
027C:  RETURN
....................    g_LcdX = x - 1;
....................    g_LcdY = y - 1;
....................   #endif
.................... }
.................... 
.................... void lcd_putc(char c)
.................... {
....................    switch (c)
027D:  MOVF   34,W
027E:  XORLW  07
027F:  BTFSC  03.2
0280:  GOTO   28B
0281:  XORLW  0B
0282:  BTFSC  03.2
0283:  GOTO   290
0284:  XORLW  06
0285:  BTFSC  03.2
0286:  GOTO   298
0287:  XORLW  02
0288:  BTFSC  03.2
0289:  GOTO   29E
028A:  GOTO   2A3
....................    {
....................       case '\a'   :  lcd_gotoxy(1,1);     break;
028B:  MOVLW  01
028C:  MOVWF  35
028D:  MOVWF  36
028E:  CALL   26B
028F:  GOTO   2A8
.................... 
....................       case '\f'   :  lcd_send_byte(0,1);
0290:  CLRF   39
0291:  MOVLW  01
0292:  MOVWF  3A
0293:  CALL   049
....................                      delay_ms(2);
0294:  MOVLW  02
0295:  MOVWF  35
0296:  CALL   022
....................                     #if defined(LCD_EXTENDED_NEWLINE)
....................                      g_LcdX = 0;
....................                      g_LcdY = 0;
....................                     #endif
....................                      break;
0297:  GOTO   2A8
.................... 
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break;
....................       case '\n'   :
....................          while (g_LcdX++ < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, ' ');
....................          }
....................          lcd_gotoxy(1, g_LcdY+2);
....................          break;
....................      #else
....................       case '\n'   : lcd_gotoxy(1,2);        break;
0298:  MOVLW  01
0299:  MOVWF  35
029A:  MOVLW  02
029B:  MOVWF  36
029C:  CALL   26B
029D:  GOTO   2A8
....................      #endif
....................      
....................       case '\b'   : lcd_send_byte(0,0x10);  break;
029E:  CLRF   39
029F:  MOVLW  10
02A0:  MOVWF  3A
02A1:  CALL   049
02A2:  GOTO   2A8
....................      
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       default     : 
....................          if (g_LcdX < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, c);
....................             g_LcdX++;
....................          }
....................          break;
....................      #else
....................       default     : lcd_send_byte(1,c);     break;
02A3:  MOVLW  01
02A4:  MOVWF  39
02A5:  MOVF   34,W
02A6:  MOVWF  3A
02A7:  CALL   049
....................      #endif
....................    }
02A8:  RETURN
.................... }
....................  
.................... char lcd_getc(unsigned int8 x, unsigned int8 y)
.................... {
....................    char value;
.................... 
....................    lcd_gotoxy(x,y);
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low
....................    lcd_output_rs(1);
....................    value = lcd_read_byte();
....................    lcd_output_rs(0);
....................    
....................    return(value);
.................... }
.................... 
.................... // write a custom character to the ram
.................... // which is 0-7 and specifies which character array we are modifying.
.................... // ptr points to an array of 8 bytes, where each byte is the next row of
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and
.................... //    usually you will want to leave this byte 0x00.
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr)
.................... {
....................    unsigned int i;
.................... 
....................    which <<= 3;
....................    which &= 0x38;
.................... 
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address
.................... 
....................    for(i=0; i<8; i++)
....................    {
....................       lcd_send_byte(1, *ptr++);
....................    }
....................   
....................    #if defined(LCD_EXTENDED_NEWLINE)
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address
....................    #endif
.................... }
.................... 
.................... void lcd_cursor_on(int1 on)
.................... {
....................    if (on)
....................    {
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON
....................    }
....................    else
....................    {
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF
....................    }
.................... }
.................... 
.................... #endif
.................... 
.................... #define LED PIN_A2
.................... 
.................... unsigned int16 Value1,Value2 ; 
.................... unsigned int16 PV,MODE ; 
.................... CONST UNSIGNED CHAR MA7DOAN[10]={0XC0, 0XF9, 0XA4, 0XB0, 0X99, 0X92,0X82,0XF8, 0X80, 0X90};
.................... 
.................... void main() {
*
0362:  MOVF   03,W
0363:  ANDLW  1F
0364:  MOVWF  03
0365:  MOVLW  71
0366:  BSF    03.5
0367:  MOVWF  0F
0368:  CLRF   10
0369:  MOVF   0F,W
036A:  MOVLW  FF
036B:  BCF    03.5
036C:  MOVWF  28
036D:  CLRF   2A
036E:  CLRF   29
036F:  BSF    03.5
0370:  BSF    03.6
0371:  MOVF   09,W
0372:  ANDLW  C0
0373:  MOVWF  09
0374:  BCF    03.6
0375:  BCF    1F.4
0376:  BCF    1F.5
0377:  MOVLW  00
0378:  BSF    03.6
0379:  MOVWF  08
037A:  BCF    03.5
037B:  CLRF   07
037C:  CLRF   08
037D:  CLRF   09
037E:  BCF    03.7
....................    set_tris_a(0b00000011) ; 
037F:  MOVLW  03
0380:  BSF    03.5
0381:  BCF    03.6
0382:  MOVWF  05
....................    SET_TRIS_B(0X06);
0383:  MOVLW  06
0384:  MOVWF  06
....................    SET_TRIS_C(0X00);
0385:  MOVLW  00
0386:  MOVWF  07
0387:  BCF    03.5
0388:  MOVWF  28
....................    
....................    
....................    lcd_init() ;
0389:  GOTO   089
....................    setup_adc_ports(sAN0|sAN1|sAN2|sAN3|VSS_VDD) ; 
038A:  BSF    03.5
038B:  BSF    03.6
038C:  MOVF   09,W
038D:  ANDLW  C0
038E:  MOVWF  09
038F:  BCF    03.6
0390:  BCF    1F.4
0391:  BCF    1F.5
0392:  MOVLW  0F
0393:  BSF    03.6
0394:  MOVWF  08
....................    setup_adc(ADC_CLOCK_INTERNAL) ;
0395:  BCF    03.5
0396:  BCF    03.6
0397:  BSF    1F.6
0398:  BSF    1F.7
0399:  BSF    03.5
039A:  BSF    1F.7
039B:  BCF    03.5
039C:  BSF    1F.0
....................    while (TRUE) {
....................       set_adc_channel(3); 
039D:  MOVLW  0C
039E:  MOVWF  78
039F:  MOVF   1F,W
03A0:  ANDLW  C3
03A1:  IORWF  78,W
03A2:  MOVWF  1F
....................       
....................       PV = 0.99*read_adc()/10.23 ; 
03A3:  BSF    1F.1
03A4:  BTFSC  1F.1
03A5:  GOTO   3A4
03A6:  MOVF   1E,W
03A7:  MOVWF  79
03A8:  BSF    03.5
03A9:  MOVF   1E,W
03AA:  MOVWF  78
03AB:  MOVF   79,W
03AC:  MOVWF  7A
03AD:  MOVF   1E,W
03AE:  BCF    03.5
03AF:  MOVWF  2D
03B0:  MOVF   79,W
03B1:  MOVWF  2E
03B2:  CALL   0C7
03B3:  MOVLW  A4
03B4:  MOVWF  2E
03B5:  MOVLW  70
03B6:  MOVWF  2D
03B7:  MOVLW  7D
03B8:  MOVWF  2C
03B9:  MOVLW  7E
03BA:  MOVWF  2B
03BB:  MOVF   7A,W
03BC:  MOVWF  32
03BD:  MOVF   79,W
03BE:  MOVWF  31
03BF:  MOVF   78,W
03C0:  MOVWF  30
03C1:  MOVF   77,W
03C2:  MOVWF  2F
03C3:  GOTO   0E4
03C4:  MOVF   7A,W
03C5:  MOVWF  2E
03C6:  MOVF   79,W
03C7:  MOVWF  2D
03C8:  MOVF   78,W
03C9:  MOVWF  2C
03CA:  MOVF   77,W
03CB:  MOVWF  2B
03CC:  MOVF   7A,W
03CD:  MOVWF  32
03CE:  MOVF   79,W
03CF:  MOVWF  31
03D0:  MOVF   78,W
03D1:  MOVWF  30
03D2:  MOVF   77,W
03D3:  MOVWF  2F
03D4:  MOVLW  14
03D5:  MOVWF  36
03D6:  MOVLW  AE
03D7:  MOVWF  35
03D8:  MOVLW  23
03D9:  MOVWF  34
03DA:  MOVLW  82
03DB:  MOVWF  33
03DC:  CALL   15B
03DD:  MOVF   7A,W
03DE:  MOVWF  2E
03DF:  MOVF   79,W
03E0:  MOVWF  2D
03E1:  MOVF   78,W
03E2:  MOVWF  2C
03E3:  MOVF   77,W
03E4:  MOVWF  2B
03E5:  CALL   225
03E6:  MOVF   79,W
03E7:  MOVWF  25
03E8:  MOVF   78,W
03E9:  MOVWF  24
....................       
....................       
....................       set_adc_channel(2);
03EA:  MOVLW  08
03EB:  MOVWF  78
03EC:  MOVF   1F,W
03ED:  ANDLW  C3
03EE:  IORWF  78,W
03EF:  MOVWF  1F
....................       MODE = read_adc()/10.23/10 ; 
03F0:  BSF    1F.1
03F1:  BTFSC  1F.1
03F2:  GOTO   3F1
03F3:  MOVF   1E,W
03F4:  MOVWF  79
03F5:  BSF    03.5
03F6:  MOVF   1E,W
03F7:  MOVWF  78
03F8:  MOVF   79,W
03F9:  BCF    03.5
03FA:  MOVWF  2C
03FB:  MOVF   78,W
03FC:  MOVWF  2B
03FD:  MOVF   2C,W
03FE:  MOVWF  2E
03FF:  MOVF   78,W
0400:  MOVWF  2D
0401:  CALL   0C7
0402:  MOVF   7A,W
0403:  MOVWF  32
0404:  MOVF   79,W
0405:  MOVWF  31
0406:  MOVF   78,W
0407:  MOVWF  30
0408:  MOVF   77,W
0409:  MOVWF  2F
040A:  MOVLW  14
040B:  MOVWF  36
040C:  MOVLW  AE
040D:  MOVWF  35
040E:  MOVLW  23
040F:  MOVWF  34
0410:  MOVLW  82
0411:  MOVWF  33
0412:  CALL   15B
0413:  MOVF   7A,W
0414:  MOVWF  2E
0415:  MOVF   79,W
0416:  MOVWF  2D
0417:  MOVF   78,W
0418:  MOVWF  2C
0419:  MOVF   77,W
041A:  MOVWF  2B
041B:  MOVF   7A,W
041C:  MOVWF  32
041D:  MOVF   79,W
041E:  MOVWF  31
041F:  MOVF   78,W
0420:  MOVWF  30
0421:  MOVF   77,W
0422:  MOVWF  2F
0423:  CLRF   36
0424:  CLRF   35
0425:  MOVLW  20
0426:  MOVWF  34
0427:  MOVLW  82
0428:  MOVWF  33
0429:  CALL   15B
042A:  MOVF   7A,W
042B:  MOVWF  2E
042C:  MOVF   79,W
042D:  MOVWF  2D
042E:  MOVF   78,W
042F:  MOVWF  2C
0430:  MOVF   77,W
0431:  MOVWF  2B
0432:  CALL   225
0433:  MOVF   79,W
0434:  MOVWF  27
0435:  MOVF   78,W
0436:  MOVWF  26
....................          if (MODE > 3) MODE = 3 ;
0437:  MOVF   27,F
0438:  BTFSS  03.2
0439:  GOTO   43E
043A:  MOVF   26,W
043B:  SUBLW  03
043C:  BTFSC  03.0
043D:  GOTO   441
043E:  CLRF   27
043F:  MOVLW  03
0440:  MOVWF  26
....................          if (MODE < 1) MODE = 1 ;
0441:  MOVF   26,F
0442:  BTFSS  03.2
0443:  GOTO   44A
0444:  MOVF   27,F
0445:  BTFSS  03.2
0446:  GOTO   44A
0447:  CLRF   27
0448:  MOVLW  01
0449:  MOVWF  26
.................... 
....................      OUTPUT_B(MA7DOAN[MODE%10]);
044A:  MOVF   27,W
044B:  MOVWF  2C
044C:  MOVF   26,W
044D:  MOVWF  2B
044E:  CLRF   2E
044F:  MOVLW  0A
0450:  MOVWF  2D
0451:  GOTO   244
0452:  MOVF   77,W
0453:  MOVWF  2B
0454:  MOVF   7A,W
0455:  MOVWF  2C
0456:  MOVWF  7A
0457:  MOVF   77,W
0458:  CALL   004
0459:  MOVWF  2D
045A:  BSF    03.5
045B:  CLRF   06
045C:  BCF    03.5
045D:  MOVF   2D,W
045E:  MOVWF  06
....................    if  (MODE = 1 ){
045F:  CLRF   27
0460:  MOVLW  01
0461:  MOVWF  26
0462:  IORWF  27,W
0463:  BTFSC  03.2
0464:  GOTO   4DA
....................       set_adc_channel(0);
0465:  MOVLW  00
0466:  MOVWF  78
0467:  MOVF   1F,W
0468:  ANDLW  C3
0469:  IORWF  78,W
046A:  MOVWF  1F
....................       delay_us(20);
046B:  MOVLW  0D
046C:  MOVWF  77
046D:  DECFSZ 77,F
046E:  GOTO   46D
....................       Value1 = read_adc()/2.046;
046F:  BSF    1F.1
0470:  BTFSC  1F.1
0471:  GOTO   470
0472:  MOVF   1E,W
0473:  MOVWF  79
0474:  BSF    03.5
0475:  MOVF   1E,W
0476:  MOVWF  78
0477:  MOVF   79,W
0478:  BCF    03.5
0479:  MOVWF  2C
047A:  MOVF   78,W
047B:  MOVWF  2B
047C:  MOVF   2C,W
047D:  MOVWF  2E
047E:  MOVF   78,W
047F:  MOVWF  2D
0480:  CALL   0C7
0481:  MOVF   7A,W
0482:  MOVWF  32
0483:  MOVF   79,W
0484:  MOVWF  31
0485:  MOVF   78,W
0486:  MOVWF  30
0487:  MOVF   77,W
0488:  MOVWF  2F
0489:  MOVLW  AA
048A:  MOVWF  36
048B:  MOVLW  F1
048C:  MOVWF  35
048D:  MOVLW  02
048E:  MOVWF  34
048F:  MOVLW  80
0490:  MOVWF  33
0491:  CALL   15B
0492:  MOVF   7A,W
0493:  MOVWF  2E
0494:  MOVF   79,W
0495:  MOVWF  2D
0496:  MOVF   78,W
0497:  MOVWF  2C
0498:  MOVF   77,W
0499:  MOVWF  2B
049A:  CALL   225
049B:  MOVF   79,W
049C:  MOVWF  21
049D:  MOVF   78,W
049E:  MOVWF  20
....................       lcd_gotoxy(1,1);
049F:  MOVLW  01
04A0:  MOVWF  35
04A1:  MOVWF  36
04A2:  CALL   26B
....................       printf(lcd_putc,"T=%03Lu",Value1);
04A3:  MOVLW  54
04A4:  MOVWF  34
04A5:  CALL   27D
04A6:  MOVLW  3D
04A7:  MOVWF  34
04A8:  CALL   27D
04A9:  MOVLW  0A
04AA:  MOVWF  04
04AB:  MOVF   21,W
04AC:  MOVWF  2C
04AD:  MOVF   20,W
04AE:  MOVWF  2B
04AF:  CALL   2A9
....................       lcd_putc(223);
04B0:  MOVLW  DF
04B1:  MOVWF  34
04B2:  CALL   27D
....................       lcd_putc('C');
04B3:  MOVLW  43
04B4:  MOVWF  34
04B5:  CALL   27D
....................    
....................          if (Value1 >= PV){
04B6:  MOVF   25,W
04B7:  SUBWF  21,W
04B8:  BTFSS  03.0
04B9:  GOTO   4CD
04BA:  BTFSS  03.2
04BB:  GOTO   4C0
04BC:  MOVF   24,W
04BD:  SUBWF  20,W
04BE:  BTFSS  03.0
04BF:  GOTO   4CD
....................             lcd_gotoxy(14,1);
04C0:  MOVLW  0E
04C1:  MOVWF  35
04C2:  MOVLW  01
04C3:  MOVWF  36
04C4:  CALL   26B
....................             lcd_putc("[H]");
04C5:  MOVLW  12
04C6:  BSF    03.6
04C7:  MOVWF  0D
04C8:  MOVLW  00
04C9:  MOVWF  0F
04CA:  BCF    03.6
04CB:  CALL   30C
....................         
....................            }
04CC:  GOTO   4D9
....................           else {
....................             lcd_gotoxy(14,1);
04CD:  MOVLW  0E
04CE:  MOVWF  35
04CF:  MOVLW  01
04D0:  MOVWF  36
04D1:  CALL   26B
....................             lcd_putc("[L]");
04D2:  MOVLW  14
04D3:  BSF    03.6
04D4:  MOVWF  0D
04D5:  MOVLW  00
04D6:  MOVWF  0F
04D7:  BCF    03.6
04D8:  CALL   30C
....................           }}
04D9:  GOTO   656
....................     else if (MODE = 2){
04DA:  CLRF   27
04DB:  MOVLW  02
04DC:  MOVWF  26
04DD:  IORWF  27,W
04DE:  BTFSC  03.2
04DF:  GOTO   556
....................       set_adc_channel(1);
04E0:  MOVLW  04
04E1:  MOVWF  78
04E2:  MOVF   1F,W
04E3:  ANDLW  C3
04E4:  IORWF  78,W
04E5:  MOVWF  1F
....................       delay_us(20);
04E6:  MOVLW  0D
04E7:  MOVWF  77
04E8:  DECFSZ 77,F
04E9:  GOTO   4E8
....................       Value2 = read_adc()/2.046;
04EA:  BSF    1F.1
04EB:  BTFSC  1F.1
04EC:  GOTO   4EB
04ED:  MOVF   1E,W
04EE:  MOVWF  79
04EF:  BSF    03.5
04F0:  MOVF   1E,W
04F1:  MOVWF  78
04F2:  MOVF   79,W
04F3:  BCF    03.5
04F4:  MOVWF  2C
04F5:  MOVF   78,W
04F6:  MOVWF  2B
04F7:  MOVF   2C,W
04F8:  MOVWF  2E
04F9:  MOVF   78,W
04FA:  MOVWF  2D
04FB:  CALL   0C7
04FC:  MOVF   7A,W
04FD:  MOVWF  32
04FE:  MOVF   79,W
04FF:  MOVWF  31
0500:  MOVF   78,W
0501:  MOVWF  30
0502:  MOVF   77,W
0503:  MOVWF  2F
0504:  MOVLW  AA
0505:  MOVWF  36
0506:  MOVLW  F1
0507:  MOVWF  35
0508:  MOVLW  02
0509:  MOVWF  34
050A:  MOVLW  80
050B:  MOVWF  33
050C:  CALL   15B
050D:  MOVF   7A,W
050E:  MOVWF  2E
050F:  MOVF   79,W
0510:  MOVWF  2D
0511:  MOVF   78,W
0512:  MOVWF  2C
0513:  MOVF   77,W
0514:  MOVWF  2B
0515:  CALL   225
0516:  MOVF   79,W
0517:  MOVWF  23
0518:  MOVF   78,W
0519:  MOVWF  22
....................       lcd_gotoxy(1,2);
051A:  MOVLW  01
051B:  MOVWF  35
051C:  MOVLW  02
051D:  MOVWF  36
051E:  CALL   26B
....................       printf(lcd_putc,"T=%03Lu",Value2);
051F:  MOVLW  54
0520:  MOVWF  34
0521:  CALL   27D
0522:  MOVLW  3D
0523:  MOVWF  34
0524:  CALL   27D
0525:  MOVLW  0A
0526:  MOVWF  04
0527:  MOVF   23,W
0528:  MOVWF  2C
0529:  MOVF   22,W
052A:  MOVWF  2B
052B:  CALL   2A9
....................       lcd_putc(223);
052C:  MOVLW  DF
052D:  MOVWF  34
052E:  CALL   27D
....................       lcd_putc('C');   
052F:  MOVLW  43
0530:  MOVWF  34
0531:  CALL   27D
....................           if (Value2 >= PV){
0532:  MOVF   25,W
0533:  SUBWF  23,W
0534:  BTFSS  03.0
0535:  GOTO   549
0536:  BTFSS  03.2
0537:  GOTO   53C
0538:  MOVF   24,W
0539:  SUBWF  22,W
053A:  BTFSS  03.0
053B:  GOTO   549
....................             lcd_gotoxy(14,2);
053C:  MOVLW  0E
053D:  MOVWF  35
053E:  MOVLW  02
053F:  MOVWF  36
0540:  CALL   26B
....................             lcd_putc("[H]");
0541:  MOVLW  16
0542:  BSF    03.6
0543:  MOVWF  0D
0544:  MOVLW  00
0545:  MOVWF  0F
0546:  BCF    03.6
0547:  CALL   30C
....................         
....................            }
0548:  GOTO   555
....................           else {
....................             lcd_gotoxy(14,2);
0549:  MOVLW  0E
054A:  MOVWF  35
054B:  MOVLW  02
054C:  MOVWF  36
054D:  CALL   26B
....................             lcd_putc("[L]");
054E:  MOVLW  18
054F:  BSF    03.6
0550:  MOVWF  0D
0551:  MOVLW  00
0552:  MOVWF  0F
0553:  BCF    03.6
0554:  CALL   30C
....................           }
....................          }
0555:  GOTO   656
....................          
....................       else if ( MODE =3 ){ 
0556:  CLRF   27
0557:  MOVLW  03
0558:  MOVWF  26
0559:  IORWF  27,W
055A:  BTFSC  03.2
055B:  GOTO   656
....................          set_adc_channel(0);
055C:  MOVLW  00
055D:  MOVWF  78
055E:  MOVF   1F,W
055F:  ANDLW  C3
0560:  IORWF  78,W
0561:  MOVWF  1F
....................          delay_us(20);
0562:  MOVLW  0D
0563:  MOVWF  77
0564:  DECFSZ 77,F
0565:  GOTO   564
....................          Value1 = read_adc()/2.046;
0566:  BSF    1F.1
0567:  BTFSC  1F.1
0568:  GOTO   567
0569:  MOVF   1E,W
056A:  MOVWF  79
056B:  BSF    03.5
056C:  MOVF   1E,W
056D:  MOVWF  78
056E:  MOVF   79,W
056F:  BCF    03.5
0570:  MOVWF  2C
0571:  MOVF   78,W
0572:  MOVWF  2B
0573:  MOVF   2C,W
0574:  MOVWF  2E
0575:  MOVF   78,W
0576:  MOVWF  2D
0577:  CALL   0C7
0578:  MOVF   7A,W
0579:  MOVWF  32
057A:  MOVF   79,W
057B:  MOVWF  31
057C:  MOVF   78,W
057D:  MOVWF  30
057E:  MOVF   77,W
057F:  MOVWF  2F
0580:  MOVLW  AA
0581:  MOVWF  36
0582:  MOVLW  F1
0583:  MOVWF  35
0584:  MOVLW  02
0585:  MOVWF  34
0586:  MOVLW  80
0587:  MOVWF  33
0588:  CALL   15B
0589:  MOVF   7A,W
058A:  MOVWF  2E
058B:  MOVF   79,W
058C:  MOVWF  2D
058D:  MOVF   78,W
058E:  MOVWF  2C
058F:  MOVF   77,W
0590:  MOVWF  2B
0591:  CALL   225
0592:  MOVF   79,W
0593:  MOVWF  21
0594:  MOVF   78,W
0595:  MOVWF  20
....................          lcd_gotoxy(1,1);
0596:  MOVLW  01
0597:  MOVWF  35
0598:  MOVWF  36
0599:  CALL   26B
....................          printf(lcd_putc,"T=%03Lu",Value1);
059A:  MOVLW  54
059B:  MOVWF  34
059C:  CALL   27D
059D:  MOVLW  3D
059E:  MOVWF  34
059F:  CALL   27D
05A0:  MOVLW  0A
05A1:  MOVWF  04
05A2:  MOVF   21,W
05A3:  MOVWF  2C
05A4:  MOVF   20,W
05A5:  MOVWF  2B
05A6:  CALL   2A9
....................          lcd_putc(223);
05A7:  MOVLW  DF
05A8:  MOVWF  34
05A9:  CALL   27D
....................          lcd_putc('C');
05AA:  MOVLW  43
05AB:  MOVWF  34
05AC:  CALL   27D
....................       
....................             if (Value1 >= PV){
05AD:  MOVF   25,W
05AE:  SUBWF  21,W
05AF:  BTFSS  03.0
05B0:  GOTO   5C4
05B1:  BTFSS  03.2
05B2:  GOTO   5B7
05B3:  MOVF   24,W
05B4:  SUBWF  20,W
05B5:  BTFSS  03.0
05B6:  GOTO   5C4
....................                lcd_gotoxy(14,1);
05B7:  MOVLW  0E
05B8:  MOVWF  35
05B9:  MOVLW  01
05BA:  MOVWF  36
05BB:  CALL   26B
....................                lcd_putc("[H]");
05BC:  MOVLW  1A
05BD:  BSF    03.6
05BE:  MOVWF  0D
05BF:  MOVLW  00
05C0:  MOVWF  0F
05C1:  BCF    03.6
05C2:  CALL   30C
....................            
....................               }
05C3:  GOTO   5D0
....................              else {
....................                lcd_gotoxy(14,1);
05C4:  MOVLW  0E
05C5:  MOVWF  35
05C6:  MOVLW  01
05C7:  MOVWF  36
05C8:  CALL   26B
....................                lcd_putc("[L]");
05C9:  MOVLW  1C
05CA:  BSF    03.6
05CB:  MOVWF  0D
05CC:  MOVLW  00
05CD:  MOVWF  0F
05CE:  BCF    03.6
05CF:  CALL   30C
....................              }
....................          set_adc_channel(1);
05D0:  MOVLW  04
05D1:  MOVWF  78
05D2:  MOVF   1F,W
05D3:  ANDLW  C3
05D4:  IORWF  78,W
05D5:  MOVWF  1F
....................          delay_us(20);
05D6:  MOVLW  0D
05D7:  MOVWF  77
05D8:  DECFSZ 77,F
05D9:  GOTO   5D8
....................         Value2 = read_adc()/2.046;
05DA:  BSF    1F.1
05DB:  BTFSC  1F.1
05DC:  GOTO   5DB
05DD:  MOVF   1E,W
05DE:  MOVWF  79
05DF:  BSF    03.5
05E0:  MOVF   1E,W
05E1:  MOVWF  78
05E2:  MOVF   79,W
05E3:  BCF    03.5
05E4:  MOVWF  2C
05E5:  MOVF   78,W
05E6:  MOVWF  2B
05E7:  MOVF   2C,W
05E8:  MOVWF  2E
05E9:  MOVF   78,W
05EA:  MOVWF  2D
05EB:  CALL   0C7
05EC:  MOVF   7A,W
05ED:  MOVWF  32
05EE:  MOVF   79,W
05EF:  MOVWF  31
05F0:  MOVF   78,W
05F1:  MOVWF  30
05F2:  MOVF   77,W
05F3:  MOVWF  2F
05F4:  MOVLW  AA
05F5:  MOVWF  36
05F6:  MOVLW  F1
05F7:  MOVWF  35
05F8:  MOVLW  02
05F9:  MOVWF  34
05FA:  MOVLW  80
05FB:  MOVWF  33
05FC:  CALL   15B
05FD:  MOVF   7A,W
05FE:  MOVWF  2E
05FF:  MOVF   79,W
0600:  MOVWF  2D
0601:  MOVF   78,W
0602:  MOVWF  2C
0603:  MOVF   77,W
0604:  MOVWF  2B
0605:  CALL   225
0606:  MOVF   79,W
0607:  MOVWF  23
0608:  MOVF   78,W
0609:  MOVWF  22
....................         lcd_gotoxy(1,2);
060A:  MOVLW  01
060B:  MOVWF  35
060C:  MOVLW  02
060D:  MOVWF  36
060E:  CALL   26B
....................           printf(lcd_putc,"T=%03Lu",Value2);
060F:  MOVLW  54
0610:  MOVWF  34
0611:  CALL   27D
0612:  MOVLW  3D
0613:  MOVWF  34
0614:  CALL   27D
0615:  MOVLW  0A
0616:  MOVWF  04
0617:  MOVF   23,W
0618:  MOVWF  2C
0619:  MOVF   22,W
061A:  MOVWF  2B
061B:  CALL   2A9
....................          lcd_putc(223);
061C:  MOVLW  DF
061D:  MOVWF  34
061E:  CALL   27D
....................         lcd_putc('C');   
061F:  MOVLW  43
0620:  MOVWF  34
0621:  CALL   27D
....................           if (Value2 >= PV){
0622:  MOVF   25,W
0623:  SUBWF  23,W
0624:  BTFSS  03.0
0625:  GOTO   639
0626:  BTFSS  03.2
0627:  GOTO   62C
0628:  MOVF   24,W
0629:  SUBWF  22,W
062A:  BTFSS  03.0
062B:  GOTO   639
....................             lcd_gotoxy(14,2);
062C:  MOVLW  0E
062D:  MOVWF  35
062E:  MOVLW  02
062F:  MOVWF  36
0630:  CALL   26B
....................             lcd_putc("[H]");
0631:  MOVLW  1E
0632:  BSF    03.6
0633:  MOVWF  0D
0634:  MOVLW  00
0635:  MOVWF  0F
0636:  BCF    03.6
0637:  CALL   30C
....................         
....................            }
0638:  GOTO   645
....................           else {
....................             lcd_gotoxy(14,2);
0639:  MOVLW  0E
063A:  MOVWF  35
063B:  MOVLW  02
063C:  MOVWF  36
063D:  CALL   26B
....................             lcd_putc("[L]");
063E:  MOVLW  20
063F:  BSF    03.6
0640:  MOVWF  0D
0641:  MOVLW  00
0642:  MOVWF  0F
0643:  BCF    03.6
0644:  CALL   30C
....................           }
....................        
....................        
....................        
....................        
....................        if ( Value1 == Value2)
0645:  MOVF   22,W
0646:  SUBWF  20,W
0647:  BTFSS  03.2
0648:  GOTO   652
0649:  MOVF   23,W
064A:  SUBWF  21,W
064B:  BTFSS  03.2
064C:  GOTO   652
....................          {
....................             output_high(LED);
064D:  BSF    03.5
064E:  BCF    05.2
064F:  BCF    03.5
0650:  BSF    05.2
....................          }else 
0651:  GOTO   656
....................             output_low(LED);
0652:  BSF    03.5
0653:  BCF    05.2
0654:  BCF    03.5
0655:  BCF    05.2
....................    
....................       }}
0656:  GOTO   39D
.................... 
.................... 
.................... }
0657:  SLEEP

Configuration Fuses:
   Word  1: 2FE4   INTRC_IO NOWDT PUT MCLR NOPROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
