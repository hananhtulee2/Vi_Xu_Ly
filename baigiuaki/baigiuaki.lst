CCS PCM C Compiler, Version 5.109, 43599               14-May-23 15:40

               Filename:   E:\PIC 16F887\Code\baigiuaki.lst

               ROM used:   991 words (12%)
                           Largest free fragment is 2048
               RAM used:   13 (4%) at main() level
                           27 (7%) worst case
               Stack used: 4 locations
               Stack size: 8

*
0000:  MOVLW  02
0001:  MOVWF  0A
0002:  GOTO   2B6
0003:  NOP
.................... #include<16F887.h>
.................... //////////// Standard Header file for the PIC16F887 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F887
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  C0
0009:  RETLW  F9
000A:  RETLW  A4
000B:  RETLW  B0
000C:  RETLW  99
000D:  RETLW  92
000E:  RETLW  82
000F:  RETLW  F8
0010:  RETLW  80
0011:  RETLW  90
0012:  BCF    0A.0
0013:  BCF    0A.1
0014:  BCF    0A.2
0015:  ADDWF  02,F
0016:  RETLW  00
0017:  RETLW  01
0018:  RETLW  02
0019:  RETLW  04
001A:  RETLW  08
001B:  RETLW  10
001C:  RETLW  20
001D:  RETLW  40
001E:  RETLW  80
001F:  DATA 4E,34
0020:  DATA E9,32
0021:  DATA 74,10
0022:  DATA E4,37
0023:  DATA 20,1D
0024:  DATA A0,12
0025:  DATA 30,19
0026:  DATA 75,10
0027:  DATA 00,00
*
00CD:  MOVLW  8E
00CE:  MOVWF  77
00CF:  MOVF   27,W
00D0:  MOVWF  78
00D1:  MOVF   26,W
00D2:  MOVWF  79
00D3:  CLRF   7A
00D4:  MOVF   78,F
00D5:  BTFSS  03.2
00D6:  GOTO   0E1
00D7:  MOVF   79,W
00D8:  MOVWF  78
00D9:  CLRF   79
00DA:  MOVLW  08
00DB:  SUBWF  77,F
00DC:  MOVF   78,F
00DD:  BTFSS  03.2
00DE:  GOTO   0E1
00DF:  CLRF   77
00E0:  GOTO   0E9
00E1:  BCF    03.0
00E2:  BTFSC  78.7
00E3:  GOTO   0E8
00E4:  RLF    79,F
00E5:  RLF    78,F
00E6:  DECF   77,F
00E7:  GOTO   0E1
00E8:  BCF    78.7
00E9:  RETURN
00EA:  MOVF   28,W
00EB:  BTFSC  03.2
00EC:  GOTO   1AF
00ED:  MOVWF  34
00EE:  MOVF   2C,W
00EF:  BTFSC  03.2
00F0:  GOTO   1AF
00F1:  SUBWF  34,F
00F2:  BTFSS  03.0
00F3:  GOTO   0F9
00F4:  MOVLW  7F
00F5:  ADDWF  34,F
00F6:  BTFSC  03.0
00F7:  GOTO   1AF
00F8:  GOTO   0FF
00F9:  MOVLW  81
00FA:  SUBWF  34,F
00FB:  BTFSS  03.0
00FC:  GOTO   1AF
00FD:  BTFSC  03.2
00FE:  GOTO   1AF
00FF:  MOVF   34,W
0100:  MOVWF  77
0101:  CLRF   78
0102:  CLRF   79
0103:  CLRF   7A
0104:  CLRF   33
0105:  MOVF   29,W
0106:  MOVWF  32
0107:  BSF    32.7
0108:  MOVF   2A,W
0109:  MOVWF  31
010A:  MOVF   2B,W
010B:  MOVWF  30
010C:  MOVLW  19
010D:  MOVWF  34
010E:  MOVF   2F,W
010F:  SUBWF  30,F
0110:  BTFSC  03.0
0111:  GOTO   122
0112:  MOVLW  01
0113:  SUBWF  31,F
0114:  BTFSC  03.0
0115:  GOTO   122
0116:  SUBWF  32,F
0117:  BTFSC  03.0
0118:  GOTO   122
0119:  SUBWF  33,F
011A:  BTFSC  03.0
011B:  GOTO   122
011C:  INCF   33,F
011D:  INCF   32,F
011E:  INCF   31,F
011F:  MOVF   2F,W
0120:  ADDWF  30,F
0121:  GOTO   154
0122:  MOVF   2E,W
0123:  SUBWF  31,F
0124:  BTFSC  03.0
0125:  GOTO   13D
0126:  MOVLW  01
0127:  SUBWF  32,F
0128:  BTFSC  03.0
0129:  GOTO   13D
012A:  SUBWF  33,F
012B:  BTFSC  03.0
012C:  GOTO   13D
012D:  INCF   33,F
012E:  INCF   32,F
012F:  MOVF   2E,W
0130:  ADDWF  31,F
0131:  MOVF   2F,W
0132:  ADDWF  30,F
0133:  BTFSS  03.0
0134:  GOTO   154
0135:  INCF   31,F
0136:  BTFSS  03.2
0137:  GOTO   154
0138:  INCF   32,F
0139:  BTFSS  03.2
013A:  GOTO   154
013B:  INCF   33,F
013C:  GOTO   154
013D:  MOVF   2D,W
013E:  IORLW  80
013F:  SUBWF  32,F
0140:  BTFSC  03.0
0141:  GOTO   153
0142:  MOVLW  01
0143:  SUBWF  33,F
0144:  BTFSC  03.0
0145:  GOTO   153
0146:  INCF   33,F
0147:  MOVF   2D,W
0148:  IORLW  80
0149:  ADDWF  32,F
014A:  MOVF   2E,W
014B:  ADDWF  31,F
014C:  BTFSS  03.0
014D:  GOTO   131
014E:  INCF   32,F
014F:  BTFSS  03.2
0150:  GOTO   131
0151:  INCF   33,F
0152:  GOTO   131
0153:  BSF    7A.0
0154:  DECFSZ 34,F
0155:  GOTO   157
0156:  GOTO   162
0157:  BCF    03.0
0158:  RLF    30,F
0159:  RLF    31,F
015A:  RLF    32,F
015B:  RLF    33,F
015C:  BCF    03.0
015D:  RLF    7A,F
015E:  RLF    79,F
015F:  RLF    78,F
0160:  RLF    35,F
0161:  GOTO   10E
0162:  BTFSS  35.0
0163:  GOTO   16A
0164:  BCF    03.0
0165:  RRF    78,F
0166:  RRF    79,F
0167:  RRF    7A,F
0168:  RRF    35,F
0169:  GOTO   16D
016A:  DECF   77,F
016B:  BTFSC  03.2
016C:  GOTO   1AF
016D:  BTFSC  35.7
016E:  GOTO   196
016F:  BCF    03.0
0170:  RLF    30,F
0171:  RLF    31,F
0172:  RLF    32,F
0173:  RLF    33,F
0174:  MOVF   2F,W
0175:  SUBWF  30,F
0176:  BTFSC  03.0
0177:  GOTO   182
0178:  MOVLW  01
0179:  SUBWF  31,F
017A:  BTFSC  03.0
017B:  GOTO   182
017C:  SUBWF  32,F
017D:  BTFSC  03.0
017E:  GOTO   182
017F:  SUBWF  33,F
0180:  BTFSS  03.0
0181:  GOTO   1A5
0182:  MOVF   2E,W
0183:  SUBWF  31,F
0184:  BTFSC  03.0
0185:  GOTO   18D
0186:  MOVLW  01
0187:  SUBWF  32,F
0188:  BTFSC  03.0
0189:  GOTO   18D
018A:  SUBWF  33,F
018B:  BTFSS  03.0
018C:  GOTO   1A5
018D:  MOVF   2D,W
018E:  IORLW  80
018F:  SUBWF  32,F
0190:  BTFSC  03.0
0191:  GOTO   196
0192:  MOVLW  01
0193:  SUBWF  33,F
0194:  BTFSS  03.0
0195:  GOTO   1A5
0196:  INCF   7A,F
0197:  BTFSS  03.2
0198:  GOTO   1A5
0199:  INCF   79,F
019A:  BTFSS  03.2
019B:  GOTO   1A5
019C:  INCF   78,F
019D:  BTFSS  03.2
019E:  GOTO   1A5
019F:  INCF   77,F
01A0:  BTFSC  03.2
01A1:  GOTO   1AF
01A2:  RRF    78,F
01A3:  RRF    79,F
01A4:  RRF    7A,F
01A5:  MOVF   29,W
01A6:  MOVWF  34
01A7:  MOVF   2D,W
01A8:  XORWF  34,F
01A9:  BTFSS  34.7
01AA:  GOTO   1AD
01AB:  BSF    78.7
01AC:  GOTO   1B3
01AD:  BCF    78.7
01AE:  GOTO   1B3
01AF:  CLRF   77
01B0:  CLRF   78
01B1:  CLRF   79
01B2:  CLRF   7A
01B3:  RETURN
01B4:  MOVLW  8E
01B5:  MOVWF  77
01B6:  MOVF   24,W
01B7:  SUBWF  77,F
01B8:  MOVF   25,W
01B9:  MOVWF  79
01BA:  MOVF   26,W
01BB:  MOVWF  78
01BC:  BSF    79.7
01BD:  MOVF   77,F
01BE:  BTFSC  03.2
01BF:  GOTO   1CB
01C0:  BCF    03.0
01C1:  MOVF   79,F
01C2:  BTFSS  03.2
01C3:  GOTO   1C7
01C4:  MOVF   78,F
01C5:  BTFSC  03.2
01C6:  GOTO   1CB
01C7:  RRF    79,F
01C8:  RRF    78,F
01C9:  DECFSZ 77,F
01CA:  GOTO   1C0
01CB:  BTFSS  25.7
01CC:  GOTO   1D2
01CD:  COMF   78,F
01CE:  COMF   79,F
01CF:  INCF   78,F
01D0:  BTFSC  03.2
01D1:  INCF   79,F
01D2:  RETURN
*
0211:  MOVF   0B,W
0212:  MOVWF  25
0213:  BCF    0B.7
0214:  BSF    03.5
0215:  BSF    03.6
0216:  BSF    0C.7
0217:  BSF    0C.0
0218:  NOP
0219:  NOP
021A:  BCF    03.5
021B:  BCF    03.6
021C:  BTFSC  25.7
021D:  BSF    0B.7
021E:  BTFSC  03.0
021F:  GOTO   248
0220:  BSF    03.6
0221:  MOVF   0C,W
0222:  ANDLW  7F
0223:  BCF    03.6
0224:  MOVWF  25
0225:  BSF    03.6
0226:  MOVF   0D,W
0227:  BCF    03.6
0228:  MOVWF  26
0229:  BSF    03.6
022A:  MOVF   0F,W
022B:  BCF    03.6
022C:  MOVWF  27
022D:  MOVF   25,W
022E:  MOVWF  28
022F:  CALL   1E5
0230:  MOVF   26,W
0231:  BSF    03.6
0232:  MOVWF  0D
0233:  BCF    03.6
0234:  MOVF   27,W
0235:  BSF    03.6
0236:  MOVWF  0F
0237:  BCF    03.6
0238:  MOVF   0B,W
0239:  MOVWF  28
023A:  BCF    0B.7
023B:  BSF    03.5
023C:  BSF    03.6
023D:  BSF    0C.7
023E:  BSF    0C.0
023F:  NOP
0240:  NOP
0241:  BCF    03.5
0242:  BCF    03.6
0243:  BTFSC  28.7
0244:  BSF    0B.7
0245:  DECFSZ 24,F
0246:  GOTO   248
0247:  GOTO   267
0248:  BSF    03.6
0249:  RLF    0C,W
024A:  RLF    0E,W
024B:  ANDLW  7F
024C:  BCF    03.6
024D:  MOVWF  25
024E:  BSF    03.6
024F:  MOVF   0D,W
0250:  BCF    03.6
0251:  MOVWF  26
0252:  BSF    03.6
0253:  MOVF   0F,W
0254:  BCF    03.6
0255:  MOVWF  27
0256:  MOVF   25,W
0257:  MOVWF  28
0258:  CALL   1E5
0259:  MOVF   26,W
025A:  BSF    03.6
025B:  MOVWF  0D
025C:  BCF    03.6
025D:  MOVF   27,W
025E:  BSF    03.6
025F:  MOVWF  0F
0260:  INCF   0D,F
0261:  BTFSC  03.2
0262:  INCF   0F,F
0263:  BCF    03.0
0264:  BCF    03.6
0265:  DECFSZ 24,F
0266:  GOTO   211
0267:  BCF    0A.3
0268:  BCF    0A.4
0269:  GOTO   395 (RETURN)
026A:  MOVF   27,W
026B:  CLRF   78
026C:  SUBWF  26,W
026D:  BTFSC  03.0
026E:  GOTO   272
026F:  MOVF   26,W
0270:  MOVWF  77
0271:  GOTO   27E
0272:  CLRF   77
0273:  MOVLW  08
0274:  MOVWF  28
0275:  RLF    26,F
0276:  RLF    77,F
0277:  MOVF   27,W
0278:  SUBWF  77,W
0279:  BTFSC  03.0
027A:  MOVWF  77
027B:  RLF    78,F
027C:  DECFSZ 28,F
027D:  GOTO   275
027E:  RETURN
027F:  MOVF   78,W
0280:  MOVF   24,W
0281:  MOVWF  26
0282:  MOVLW  64
0283:  MOVWF  27
0284:  CALL   26A
0285:  MOVF   77,W
0286:  MOVWF  24
0287:  MOVF   78,W
0288:  MOVLW  30
0289:  BTFSS  03.2
028A:  GOTO   292
028B:  BTFSS  25.1
028C:  GOTO   299
028D:  BTFSC  25.3
028E:  GOTO   299
028F:  BTFSC  25.4
0290:  MOVLW  20
0291:  GOTO   295
0292:  BCF    25.3
0293:  BCF    25.4
0294:  BSF    25.0
0295:  ADDWF  78,F
0296:  MOVF   78,W
0297:  MOVWF  28
0298:  CALL   1E5
0299:  MOVF   24,W
029A:  MOVWF  26
029B:  MOVLW  0A
029C:  MOVWF  27
029D:  CALL   26A
029E:  MOVF   77,W
029F:  MOVWF  24
02A0:  MOVF   78,W
02A1:  MOVLW  30
02A2:  BTFSS  03.2
02A3:  GOTO   2AA
02A4:  BTFSC  25.3
02A5:  GOTO   2AE
02A6:  BTFSS  25.0
02A7:  GOTO   2AE
02A8:  BTFSC  25.4
02A9:  MOVLW  20
02AA:  ADDWF  78,F
02AB:  MOVF   78,W
02AC:  MOVWF  28
02AD:  CALL   1E5
02AE:  MOVLW  30
02AF:  ADDWF  24,F
02B0:  MOVF   24,W
02B1:  MOVWF  28
02B2:  CALL   1E5
02B3:  BCF    0A.3
02B4:  BCF    0A.4
02B5:  GOTO   39A (RETURN)
.................... 
.................... #list
.................... 
.................... #device ADC=10
.................... #fuses INTRC_IO
.................... #use delay(CLOCK=8MHz)
*
0028:  MOVLW  29
0029:  MOVWF  04
002A:  BCF    03.7
002B:  MOVF   00,W
002C:  BTFSC  03.2
002D:  GOTO   03B
002E:  MOVLW  02
002F:  MOVWF  78
0030:  CLRF   77
0031:  DECFSZ 77,F
0032:  GOTO   031
0033:  DECFSZ 78,F
0034:  GOTO   030
0035:  MOVLW  97
0036:  MOVWF  77
0037:  DECFSZ 77,F
0038:  GOTO   037
0039:  DECFSZ 00,F
003A:  GOTO   02E
003B:  RETURN
.................... #include <lcd.c>
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////                             LCD.C                                     ////
.................... ////                 Driver for common LCD modules                         ////
.................... ////                                                                       ////
.................... ////  lcd_init()   Must be called before any other function.               ////
.................... ////                                                                       ////
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         ////
.................... ////                 \a  Set cursor position to upper left                 ////
.................... ////                 \f  Clear display, set cursor to upper left           ////
.................... ////                 \n  Go to start of second line                        ////
.................... ////                 \b  Move back one position                            ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     ////
.................... ////              will erase all remanining characters on the current      ////
.................... ////              line, and move the cursor to the beginning of the next   ////
.................... ////              line.                                                    ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     ////
.................... ////              will move the cursor to the start of the current         ////
.................... ////              line.                                                    ////
.................... ////                                                                       ////
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        ////
.................... ////                                                                       ////
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             ////
.................... ////                                                                       ////
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         ////
.................... ////              (on=FALSE).                                              ////
.................... ////                                                                       ////
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   ////
.................... ////                                                                       ////
.................... ////                                                                       ////
.................... ////  CONFIGURATION                                                        ////
.................... ////  The LCD can be configured in one of two ways: a.) port access or     ////
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     ////
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     ////
.................... ////  connected to sequential pins on the GPIO.  Pin access                ////
.................... ////  has no requirements, all 7 bits of the control interface can         ////
.................... ////  can be connected to any GPIO using several ports.                    ////
.................... ////                                                                       ////
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     ////
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    ////
.................... ////  of this file to configure the pin order.  If you are using a         ////
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  ////
.................... ////  be defined.                                                          ////
.................... ////                                                                       ////
.................... ////  Example of port access:                                              ////
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         ////
.................... ////                                                                       ////
.................... ////  To use pin access, the following pins must be defined:               ////
.................... ////     LCD_ENABLE_PIN                                                    ////
.................... ////     LCD_RS_PIN                                                        ////
.................... ////     LCD_RW_PIN                                                        ////
.................... ////     LCD_DATA4                                                         ////
.................... ////     LCD_DATA5                                                         ////
.................... ////     LCD_DATA6                                                         ////
.................... ////     LCD_DATA7                                                         ////
.................... ////                                                                       ////
.................... ////  Example of pin access:                                               ////
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    ////
.................... ////     #define LCD_RS_PIN      PIN_E1                                    ////
.................... ////     #define LCD_RW_PIN      PIN_E2                                    ////
.................... ////     #define LCD_DATA4       PIN_D4                                    ////
.................... ////     #define LCD_DATA5       PIN_D5                                    ////
.................... ////     #define LCD_DATA6       PIN_D6                                    ////
.................... ////     #define LCD_DATA7       PIN_D7                                    ////
.................... ////                                                                       ////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef __LCD_C__
.................... #define __LCD_C__
.................... 
.................... // define the pinout.
.................... // only required if port access is being used.
.................... typedef struct  
.................... {                            // This structure is overlayed
....................    int1 enable;           // on to an I/O port to gain
....................    int1 rs;               // access to the LCD pins.
....................    int1 rw;               // The bits are allocated from
....................    int1 unused;           // low order up.  ENABLE will
....................    unsigned int     data : 4;         // be LSB pin of that port.
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT.
....................    unsigned int    reserved: 8;
....................   #endif
.................... } LCD_PIN_MAP;
.................... 
.................... // this is to improve compatability with previous LCD drivers that accepted
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B.
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE))
....................  #define LCD_DATA_PORT getenv("SFR:PORTB")
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    // these definitions only need to be modified for baseline PICs.
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions.
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0};
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF};
.................... #endif
.................... 
.................... ////////////////////// END CONFIGURATION ///////////////////////////////////
.................... 
.................... #ifndef LCD_ENABLE_PIN
....................    #define lcd_output_enable(x) lcdlat.enable=x
....................    #define lcd_enable_tris()   lcdtris.enable=0
.................... #else
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x)
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RS_PIN
....................    #define lcd_output_rs(x) lcdlat.rs=x
....................    #define lcd_rs_tris()   lcdtris.rs=0
.................... #else
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x)
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RW_PIN
....................    #define lcd_output_rw(x) lcdlat.rw=x
....................    #define lcd_rw_tris()   lcdtris.rw=0
.................... #else
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x)
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN)
.................... #endif
.................... 
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4,
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver
.................... // compatible with any code written for the original library
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7))
....................    #define  LCD_DATA4    LCD_DATA0
....................    #define  LCD_DATA5    LCD_DATA1
....................    #define  LCD_DATA6    LCD_DATA2
....................    #define  LCD_DATA7    LCD_DATA3
.................... #endif
.................... 
.................... #ifndef LCD_DATA4
.................... #ifndef LCD_DATA_PORT
....................    #if defined(__PCB__)
....................       #define LCD_DATA_PORT      0x06     //portb
....................       #define set_tris_lcd(x)   set_tris_b(x)
....................    #else
....................      #if defined(PIN_D0)
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd
....................      #else
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb
....................      #endif
....................    #endif   
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    LCD_PIN_MAP lcd, lcdlat;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
.................... #elif defined(__PCM__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
....................    #byte lcdtris = LCD_DATA_PORT+0x80
.................... #elif defined(__PCH__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT+9
....................    #byte lcdtris = LCD_DATA_PORT+0x12
.................... #elif defined(__PCD__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #word lcd = LCD_DATA_PORT
....................    #word lcdlat = LCD_DATA_PORT+2
....................    #word lcdtris = LCD_DATA_PORT-0x02
.................... #endif
.................... #endif   //LCD_DATA4 not defined
.................... 
.................... #ifndef LCD_TYPE
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines
.................... #endif
.................... 
.................... #ifndef LCD_LINE_TWO
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line
.................... #endif
.................... 
.................... #ifndef LCD_LINE_LENGTH
....................    #define LCD_LINE_LENGTH 20
.................... #endif
.................... 
.................... unsigned int8 lcd_read_nibble(void);
.................... 
.................... unsigned int8 lcd_read_byte(void)
.................... {
....................    unsigned int8 low,high;
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_INPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_float(LCD_DATA4);
....................    output_float(LCD_DATA5);
....................    output_float(LCD_DATA6);
....................    output_float(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0xF;
*
0055:  MOVLW  0F
0056:  BSF    03.5
0057:  ANDWF  08,W
0058:  IORLW  F0
0059:  MOVWF  08
....................   #endif
....................  #endif
....................         
....................    lcd_output_rw(1);
005A:  BCF    03.5
005B:  BSF    08.2
....................    delay_cycles(1);
005C:  NOP
....................    lcd_output_enable(1);
005D:  BSF    08.0
....................    delay_cycles(1);
005E:  NOP
....................    high = lcd_read_nibble();
005F:  CALL   049
0060:  MOVF   78,W
0061:  MOVWF  30
....................       
....................    lcd_output_enable(0);
0062:  BCF    08.0
....................    delay_cycles(1);
0063:  NOP
....................    lcd_output_enable(1);
0064:  BSF    08.0
....................    delay_us(1);
0065:  GOTO   066
....................    low = lcd_read_nibble();
0066:  CALL   049
0067:  MOVF   78,W
0068:  MOVWF  2F
....................       
....................    lcd_output_enable(0);
0069:  BCF    08.0
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
....................    output_drive(LCD_DATA5);
....................    output_drive(LCD_DATA6);
....................    output_drive(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0x0;
006A:  MOVLW  0F
006B:  BSF    03.5
006C:  ANDWF  08,W
006D:  MOVWF  08
....................   #endif
....................  #endif
.................... 
....................    return( (high<<4) | low);
006E:  BCF    03.5
006F:  SWAPF  30,W
0070:  MOVWF  77
0071:  MOVLW  F0
0072:  ANDWF  77,F
0073:  MOVF   77,W
0074:  IORWF  2F,W
0075:  MOVWF  78
.................... }
.................... 
.................... unsigned int8 lcd_read_nibble(void)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    unsigned int8 n = 0x00;
.................... 
....................    /* Read the data port */
....................    n |= input(LCD_DATA4);
....................    n |= input(LCD_DATA5) << 1;
....................    n |= input(LCD_DATA6) << 2;
....................    n |= input(LCD_DATA7) << 3;
....................    
....................    return(n);
....................   #else
....................    return(lcd.data);
*
0049:  MOVF   08,W
004A:  MOVWF  77
004B:  SWAPF  08,W
004C:  ANDLW  0F
004D:  MOVWF  78
....................   #endif
004E:  RETURN
.................... }
.................... 
.................... void lcd_send_nibble(unsigned int8 n)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    /* Write to the data port */
....................    output_bit(LCD_DATA4, bit_test(n, 0));
....................    output_bit(LCD_DATA5, bit_test(n, 1));
....................    output_bit(LCD_DATA6, bit_test(n, 2));
....................    output_bit(LCD_DATA7, bit_test(n, 3));
....................   #else      
....................    lcdlat.data = n;
*
003C:  SWAPF  30,W
003D:  ANDLW  F0
003E:  MOVWF  77
003F:  MOVLW  0F
0040:  ANDWF  08,W
0041:  IORWF  77,W
0042:  MOVWF  08
....................   #endif
....................       
....................    delay_cycles(1);
0043:  NOP
....................    lcd_output_enable(1);
0044:  BSF    08.0
....................    delay_us(2);
0045:  GOTO   046
0046:  GOTO   047
....................    lcd_output_enable(0);
0047:  BCF    08.0
0048:  RETURN
.................... }
.................... 
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n)
.................... {
....................   #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................   #else
....................    lcd_enable_tris();
*
004F:  BSF    03.5
0050:  BCF    08.0
....................    lcd_rs_tris();
0051:  BCF    08.1
....................    lcd_rw_tris();
0052:  BCF    08.2
....................   #endif
.................... 
....................    lcd_output_rs(0);
0053:  BCF    03.5
0054:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ;
*
0076:  MOVF   78,W
0077:  MOVWF  2F
0078:  BTFSC  2F.7
0079:  GOTO   055
....................    lcd_output_rs(address);
007A:  BTFSS  2D.0
007B:  BCF    08.1
007C:  BTFSC  2D.0
007D:  BSF    08.1
....................    delay_cycles(1);
007E:  NOP
....................    lcd_output_rw(0);
007F:  BCF    08.2
....................    delay_cycles(1);
0080:  NOP
....................    lcd_output_enable(0);
0081:  BCF    08.0
....................    lcd_send_nibble(n >> 4);
0082:  SWAPF  2E,W
0083:  MOVWF  2F
0084:  MOVLW  0F
0085:  ANDWF  2F,F
0086:  MOVF   2F,W
0087:  MOVWF  30
0088:  CALL   03C
....................    lcd_send_nibble(n & 0xf);
0089:  MOVF   2E,W
008A:  ANDLW  0F
008B:  MOVWF  2F
008C:  MOVWF  30
008D:  CALL   03C
008E:  RETURN
.................... }
.................... 
.................... #if defined(LCD_EXTENDED_NEWLINE)
.................... unsigned int8 g_LcdX, g_LcdY;
.................... #endif
.................... 
.................... void lcd_init(void) 
.................... {
....................    unsigned int8 i;
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6};
008F:  MOVLW  28
0090:  MOVWF  25
0091:  MOVLW  0C
0092:  MOVWF  26
0093:  MOVLW  01
0094:  MOVWF  27
0095:  MOVLW  06
0096:  MOVWF  28
....................                              // These bytes need to be sent to the LCD
....................                              // to start it up.
....................    
.................... 
....................    lcd_output_enable(0);
0097:  BCF    08.0
....................    lcd_output_rs(0);
0098:  BCF    08.1
....................    lcd_output_rw(0);
0099:  BCF    08.2
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
....................    output_drive(LCD_DATA5);
....................    output_drive(LCD_DATA6);
....................    output_drive(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0x0;
009A:  MOVLW  0F
009B:  BSF    03.5
009C:  ANDWF  08,W
009D:  MOVWF  08
....................   #endif
....................    lcd_enable_tris();
009E:  BCF    08.0
....................    lcd_rs_tris();
009F:  BCF    08.1
....................    lcd_rw_tris();
00A0:  BCF    08.2
....................  #endif
....................     
....................    delay_ms(15);
00A1:  MOVLW  0F
00A2:  BCF    03.5
00A3:  MOVWF  29
00A4:  CALL   028
....................    for(i=1;i<=3;++i)
00A5:  MOVLW  01
00A6:  MOVWF  24
00A7:  MOVF   24,W
00A8:  SUBLW  03
00A9:  BTFSS  03.0
00AA:  GOTO   0B3
....................    {
....................        lcd_send_nibble(3);
00AB:  MOVLW  03
00AC:  MOVWF  30
00AD:  CALL   03C
....................        delay_ms(5);
00AE:  MOVLW  05
00AF:  MOVWF  29
00B0:  CALL   028
00B1:  INCF   24,F
00B2:  GOTO   0A7
....................    }
....................    
....................    lcd_send_nibble(2);
00B3:  MOVLW  02
00B4:  MOVWF  30
00B5:  CALL   03C
....................    delay_ms(5);
00B6:  MOVLW  05
00B7:  MOVWF  29
00B8:  CALL   028
....................    for(i=0;i<=3;++i)
00B9:  CLRF   24
00BA:  MOVF   24,W
00BB:  SUBLW  03
00BC:  BTFSS  03.0
00BD:  GOTO   0CA
....................       lcd_send_byte(0,LCD_INIT_STRING[i]);
00BE:  MOVLW  25
00BF:  ADDWF  24,W
00C0:  MOVWF  04
00C1:  BCF    03.7
00C2:  MOVF   00,W
00C3:  MOVWF  29
00C4:  CLRF   2D
00C5:  MOVF   29,W
00C6:  MOVWF  2E
00C7:  CALL   04F
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
00C8:  INCF   24,F
00C9:  GOTO   0BA
00CA:  BCF    0A.3
00CB:  BCF    0A.4
00CC:  GOTO   2DD (RETURN)
....................    g_LcdX = 0;
....................    g_LcdY = 0;
....................   #endif
.................... }
.................... 
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y)
.................... {
....................    unsigned int8 address;
....................    
....................    if(y!=1)
*
01D3:  DECFSZ 2A,W
01D4:  GOTO   1D6
01D5:  GOTO   1D9
....................       address=LCD_LINE_TWO;
01D6:  MOVLW  40
01D7:  MOVWF  2B
01D8:  GOTO   1DA
....................    else
....................       address=0;
01D9:  CLRF   2B
....................      
....................    address+=x-1;
01DA:  MOVLW  01
01DB:  SUBWF  29,W
01DC:  ADDWF  2B,F
....................    lcd_send_byte(0,0x80|address);
01DD:  MOVF   2B,W
01DE:  IORLW  80
01DF:  MOVWF  2C
01E0:  CLRF   2D
01E1:  MOVF   2C,W
01E2:  MOVWF  2E
01E3:  CALL   04F
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
01E4:  RETURN
....................    g_LcdX = x - 1;
....................    g_LcdY = y - 1;
....................   #endif
.................... }
.................... 
.................... void lcd_putc(char c)
.................... {
....................    switch (c)
01E5:  MOVF   28,W
01E6:  XORLW  07
01E7:  BTFSC  03.2
01E8:  GOTO   1F3
01E9:  XORLW  0B
01EA:  BTFSC  03.2
01EB:  GOTO   1F8
01EC:  XORLW  06
01ED:  BTFSC  03.2
01EE:  GOTO   200
01EF:  XORLW  02
01F0:  BTFSC  03.2
01F1:  GOTO   206
01F2:  GOTO   20B
....................    {
....................       case '\a'   :  lcd_gotoxy(1,1);     break;
01F3:  MOVLW  01
01F4:  MOVWF  29
01F5:  MOVWF  2A
01F6:  CALL   1D3
01F7:  GOTO   210
.................... 
....................       case '\f'   :  lcd_send_byte(0,1);
01F8:  CLRF   2D
01F9:  MOVLW  01
01FA:  MOVWF  2E
01FB:  CALL   04F
....................                      delay_ms(2);
01FC:  MOVLW  02
01FD:  MOVWF  29
01FE:  CALL   028
....................                     #if defined(LCD_EXTENDED_NEWLINE)
....................                      g_LcdX = 0;
....................                      g_LcdY = 0;
....................                     #endif
....................                      break;
01FF:  GOTO   210
.................... 
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break;
....................       case '\n'   :
....................          while (g_LcdX++ < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, ' ');
....................          }
....................          lcd_gotoxy(1, g_LcdY+2);
....................          break;
....................      #else
....................       case '\n'   : lcd_gotoxy(1,2);        break;
0200:  MOVLW  01
0201:  MOVWF  29
0202:  MOVLW  02
0203:  MOVWF  2A
0204:  CALL   1D3
0205:  GOTO   210
....................      #endif
....................      
....................       case '\b'   : lcd_send_byte(0,0x10);  break;
0206:  CLRF   2D
0207:  MOVLW  10
0208:  MOVWF  2E
0209:  CALL   04F
020A:  GOTO   210
....................      
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       default     : 
....................          if (g_LcdX < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, c);
....................             g_LcdX++;
....................          }
....................          break;
....................      #else
....................       default     : lcd_send_byte(1,c);     break;
020B:  MOVLW  01
020C:  MOVWF  2D
020D:  MOVF   28,W
020E:  MOVWF  2E
020F:  CALL   04F
....................      #endif
....................    }
0210:  RETURN
.................... }
....................  
.................... char lcd_getc(unsigned int8 x, unsigned int8 y)
.................... {
....................    char value;
.................... 
....................    lcd_gotoxy(x,y);
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low
....................    lcd_output_rs(1);
....................    value = lcd_read_byte();
....................    lcd_output_rs(0);
....................    
....................    return(value);
.................... }
.................... 
.................... // write a custom character to the ram
.................... // which is 0-7 and specifies which character array we are modifying.
.................... // ptr points to an array of 8 bytes, where each byte is the next row of
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and
.................... //    usually you will want to leave this byte 0x00.
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr)
.................... {
....................    unsigned int i;
.................... 
....................    which <<= 3;
....................    which &= 0x38;
.................... 
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address
.................... 
....................    for(i=0; i<8; i++)
....................    {
....................       lcd_send_byte(1, *ptr++);
....................    }
....................   
....................    #if defined(LCD_EXTENDED_NEWLINE)
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address
....................    #endif
.................... }
.................... 
.................... void lcd_cursor_on(int1 on)
.................... {
....................    if (on)
....................    {
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON
....................    }
....................    else
....................    {
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF
....................    }
.................... }
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... const unsigned int8 ma7doan[]={ 0xc0 ,0xf9 , 0xa4,0xb0 , 0x99 , 0x92,0x82 ,0xf8 , 0x80, 0x90};
.................... const unsigned arr[9] = {0b00000000, 0b00000001, 0b00000010,0b00000100 , 0b00001000,0b00010000 ,0b00100000,0b01000000,0b10000000};
.................... unsigned int16 NUM = 0  ; 
.................... unsigned int8 ND ; 
.................... 
.................... void main(){
*
02B6:  MOVF   03,W
02B7:  ANDLW  1F
02B8:  MOVWF  03
02B9:  MOVLW  71
02BA:  BSF    03.5
02BB:  MOVWF  0F
02BC:  CLRF   10
02BD:  MOVF   0F,W
02BE:  BCF    03.5
02BF:  CLRF   21
02C0:  CLRF   20
02C1:  MOVLW  FF
02C2:  MOVWF  23
02C3:  BSF    03.5
02C4:  BSF    03.6
02C5:  MOVF   09,W
02C6:  ANDLW  C0
02C7:  MOVWF  09
02C8:  BCF    03.6
02C9:  BCF    1F.4
02CA:  BCF    1F.5
02CB:  MOVLW  00
02CC:  BSF    03.6
02CD:  MOVWF  08
02CE:  BCF    03.5
02CF:  CLRF   07
02D0:  CLRF   08
02D1:  CLRF   09
02D2:  BCF    03.7
.................... 
....................    set_tris_c(0x00) ; 
02D3:  MOVLW  00
02D4:  BSF    03.5
02D5:  BCF    03.6
02D6:  MOVWF  07
02D7:  BCF    03.5
02D8:  MOVWF  23
....................    set_tris_b(0x00) ; 
02D9:  BSF    03.5
02DA:  MOVWF  06
....................    lcd_init();
02DB:  BCF    03.5
02DC:  GOTO   08F
....................    setup_ADC(ADC_CLOCK_INTERNAL);
02DD:  BSF    1F.6
02DE:  BSF    1F.7
02DF:  BSF    03.5
02E0:  BSF    1F.7
02E1:  BCF    03.5
02E2:  BSF    1F.0
....................    setup_ADC_PORTS(SAN5|SAN6|VSS_VDD);
02E3:  BSF    03.5
02E4:  BSF    03.6
02E5:  MOVF   09,W
02E6:  ANDLW  C0
02E7:  MOVWF  09
02E8:  BCF    03.6
02E9:  BCF    1F.4
02EA:  BCF    1F.5
02EB:  MOVLW  60
02EC:  BSF    03.6
02ED:  MOVWF  08
.................... 
.................... while(TRUE){
.................... 
....................    
....................    set_adc_channel(5);
02EE:  MOVLW  14
02EF:  MOVWF  78
02F0:  BCF    03.5
02F1:  BCF    03.6
02F2:  MOVF   1F,W
02F3:  ANDLW  C3
02F4:  IORWF  78,W
02F5:  MOVWF  1F
....................    delay_us(50);
02F6:  MOVLW  21
02F7:  MOVWF  77
02F8:  DECFSZ 77,F
02F9:  GOTO   2F8
....................    NUM = read_adc()/10.23/10 ; 
02FA:  BSF    1F.1
02FB:  BTFSC  1F.1
02FC:  GOTO   2FB
02FD:  MOVF   1E,W
02FE:  MOVWF  79
02FF:  BSF    03.5
0300:  MOVF   1E,W
0301:  MOVWF  78
0302:  MOVF   79,W
0303:  BCF    03.5
0304:  MOVWF  25
0305:  MOVF   78,W
0306:  MOVWF  24
0307:  MOVF   25,W
0308:  MOVWF  27
0309:  MOVF   78,W
030A:  MOVWF  26
030B:  CALL   0CD
030C:  MOVF   7A,W
030D:  MOVWF  2B
030E:  MOVF   79,W
030F:  MOVWF  2A
0310:  MOVF   78,W
0311:  MOVWF  29
0312:  MOVF   77,W
0313:  MOVWF  28
0314:  MOVLW  14
0315:  MOVWF  2F
0316:  MOVLW  AE
0317:  MOVWF  2E
0318:  MOVLW  23
0319:  MOVWF  2D
031A:  MOVLW  82
031B:  MOVWF  2C
031C:  CALL   0EA
031D:  MOVF   7A,W
031E:  MOVWF  27
031F:  MOVF   79,W
0320:  MOVWF  26
0321:  MOVF   78,W
0322:  MOVWF  25
0323:  MOVF   77,W
0324:  MOVWF  24
0325:  MOVF   7A,W
0326:  MOVWF  2B
0327:  MOVF   79,W
0328:  MOVWF  2A
0329:  MOVF   78,W
032A:  MOVWF  29
032B:  MOVF   77,W
032C:  MOVWF  28
032D:  CLRF   2F
032E:  CLRF   2E
032F:  MOVLW  20
0330:  MOVWF  2D
0331:  MOVLW  82
0332:  MOVWF  2C
0333:  CALL   0EA
0334:  MOVF   7A,W
0335:  MOVWF  27
0336:  MOVF   79,W
0337:  MOVWF  26
0338:  MOVF   78,W
0339:  MOVWF  25
033A:  MOVF   77,W
033B:  MOVWF  24
033C:  CALL   1B4
033D:  MOVF   79,W
033E:  MOVWF  21
033F:  MOVF   78,W
0340:  MOVWF  20
....................    delay_us(50);
0341:  MOVLW  21
0342:  MOVWF  77
0343:  DECFSZ 77,F
0344:  GOTO   343
....................    output_b(ma7doan[NUM]) ; 
0345:  MOVF   21,W
0346:  MOVWF  7A
0347:  MOVF   20,W
0348:  CALL   004
0349:  MOVWF  24
034A:  BSF    03.5
034B:  CLRF   06
034C:  BCF    03.5
034D:  MOVF   24,W
034E:  MOVWF  06
....................    
....................    set_adc_channel(6);
034F:  MOVLW  18
0350:  MOVWF  78
0351:  MOVF   1F,W
0352:  ANDLW  C3
0353:  IORWF  78,W
0354:  MOVWF  1F
....................    delay_us(50);
0355:  MOVLW  21
0356:  MOVWF  77
0357:  DECFSZ 77,F
0358:  GOTO   357
....................    ND = read_adc()/2.046 ;
0359:  BSF    1F.1
035A:  BTFSC  1F.1
035B:  GOTO   35A
035C:  MOVF   1E,W
035D:  MOVWF  79
035E:  BSF    03.5
035F:  MOVF   1E,W
0360:  MOVWF  78
0361:  MOVF   79,W
0362:  BCF    03.5
0363:  MOVWF  25
0364:  MOVF   78,W
0365:  MOVWF  24
0366:  MOVF   25,W
0367:  MOVWF  27
0368:  MOVF   78,W
0369:  MOVWF  26
036A:  CALL   0CD
036B:  MOVF   7A,W
036C:  MOVWF  2B
036D:  MOVF   79,W
036E:  MOVWF  2A
036F:  MOVF   78,W
0370:  MOVWF  29
0371:  MOVF   77,W
0372:  MOVWF  28
0373:  MOVLW  AA
0374:  MOVWF  2F
0375:  MOVLW  F1
0376:  MOVWF  2E
0377:  MOVLW  02
0378:  MOVWF  2D
0379:  MOVLW  80
037A:  MOVWF  2C
037B:  CALL   0EA
037C:  MOVF   7A,W
037D:  MOVWF  27
037E:  MOVF   79,W
037F:  MOVWF  26
0380:  MOVF   78,W
0381:  MOVWF  25
0382:  MOVF   77,W
0383:  MOVWF  24
0384:  CALL   1B4
0385:  MOVF   78,W
0386:  MOVWF  22
....................    
....................    lcd_gotoxy(1,1);
0387:  MOVLW  01
0388:  MOVWF  29
0389:  MOVWF  2A
038A:  CALL   1D3
....................    printf(lcd_putc,"Nhiet do : %02u " , ND) ; 
038B:  MOVLW  1F
038C:  BSF    03.6
038D:  MOVWF  0D
038E:  MOVLW  00
038F:  MOVWF  0F
0390:  BCF    03.0
0391:  MOVLW  0B
0392:  BCF    03.6
0393:  MOVWF  24
0394:  GOTO   211
0395:  MOVF   22,W
0396:  MOVWF  24
0397:  MOVLW  01
0398:  MOVWF  25
0399:  GOTO   27F
039A:  MOVLW  20
039B:  MOVWF  28
039C:  CALL   1E5
....................    
....................    if ( NUM == 0 ) { 
039D:  MOVF   20,F
039E:  BTFSS  03.2
039F:  GOTO   3AA
03A0:  MOVF   21,F
03A1:  BTFSS  03.2
03A2:  GOTO   3AA
....................     output_c(arr[0]) ;
03A3:  MOVLW  00
03A4:  MOVWF  23
03A5:  BSF    03.5
03A6:  CLRF   07
03A7:  BCF    03.5
03A8:  CLRF   07
....................    } 
03A9:  GOTO   3DB
....................    else {
....................    
....................    if( ND <= 50) {
03AA:  MOVF   22,W
03AB:  SUBLW  32
03AC:  BTFSS  03.0
03AD:  GOTO   3CF
....................       output_c(arr[NUM]) ; 
03AE:  MOVF   21,W
03AF:  MOVWF  7A
03B0:  MOVF   20,W
03B1:  CALL   012
03B2:  MOVWF  24
03B3:  MOVLW  00
03B4:  MOVWF  23
03B5:  BSF    03.5
03B6:  CLRF   07
03B7:  BCF    03.5
03B8:  MOVF   24,W
03B9:  MOVWF  07
....................       delay_ms(300);
03BA:  MOVLW  02
03BB:  MOVWF  24
03BC:  MOVLW  96
03BD:  MOVWF  29
03BE:  CALL   028
03BF:  DECFSZ 24,F
03C0:  GOTO   3BC
....................       output_c(arr[0]) ; 
03C1:  MOVLW  00
03C2:  MOVWF  23
03C3:  BSF    03.5
03C4:  CLRF   07
03C5:  BCF    03.5
03C6:  CLRF   07
....................       delay_ms(300); 
03C7:  MOVLW  02
03C8:  MOVWF  24
03C9:  MOVLW  96
03CA:  MOVWF  29
03CB:  CALL   028
03CC:  DECFSZ 24,F
03CD:  GOTO   3C9
....................    } 
03CE:  GOTO   3DB
....................    else output_c(arr[NUM]) ; 
03CF:  MOVF   21,W
03D0:  MOVWF  7A
03D1:  MOVF   20,W
03D2:  CALL   012
03D3:  MOVWF  24
03D4:  MOVLW  00
03D5:  MOVWF  23
03D6:  BSF    03.5
03D7:  CLRF   07
03D8:  BCF    03.5
03D9:  MOVF   24,W
03DA:  MOVWF  07
....................    
....................    }
03DB:  BSF    03.5
03DC:  BSF    03.6
03DD:  GOTO   2EE
.................... 
.................... 
.................... 
.................... 
.................... }
.................... 
.................... }
03DE:  SLEEP

Configuration Fuses:
   Word  1: 2FE4   INTRC_IO NOWDT PUT MCLR NOPROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
